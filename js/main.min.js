(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi.js":[function(require,module,exports){
/* =========================================================================
 * Bragi (Javascript Logger - Browser)
 *
 * ----------------------------------
 *
 * Distributed under MIT license
 * Author : Erik Hazzard ( http://vasir.net )
 *
 * Provides a LOGGER object which can be used to perform logging
 *      LOGGER.log('group1', 'hello world');
 *
 *      // Also, parasm can be passed in
 *      LOGGER.log('group1', 'message', param1, param2, etc...);
 *      
 *      // And subgroups can be logged
 *      LOGGER.log('group1:subgroup', 'message %j', param1); 
 *      
 * To change logger options:
 *      // Shows ALL messages (false to show none)
 *      LOGGER.options.groupsEnabled = true; 
 *
 *      // Shows only specific groups
 *      LOGGER.options.groupsEnabled = ['error', 'debug']; // only shows passed in groups 
 *
 *      // Can also filter on subgroups
 *      LOGGER.options.groupsEnabled = ['group1:subgroup1']; 
 *
 *      // Or regular expressions
 *      LOGGER.options.groupsEnabled = [/^start:to:end$/]
 *
 * To change storing stack traces (gives more info, but adds a nontrivial amount 
 *      of time), change the `storeStackTrace` property. It is `false` by default
 *
 *      LOGGER.options.storeStackTrace = true;
 *
 * TRANSPORTS
 *      Logs are output / written to a file / pipped to a server by means
 *      of transports
 *
 * ========================================================================= */
var util = require('util');

var canLog = require('./bragi/canLog');

// Transports is an object which we can add / remove transport objects to
var Transports = require('./bragi/transports/Transports');

// transports is an object containing all available transports
var transports = require('./bragi/transports');

// TODO: This should probably be in the transports
var SYMBOLS = require('./bragi/symbols');

(function(root, factory) {
    // Setup logger for the environment
    if(typeof define === 'function' && define.amd) {
        // RequireJS / AMD
        define(['exports'], function(exports) {
            root = factory(root, exports);
            return root;
        });
    } else if (typeof exports !== 'undefined') {
        // CommonJS
        factory(root, exports); 
        module.exports = factory();
    } else {
        // browser global if neither are supported
        root.logger = factory(root, {});
    }
}(this, function(root, logger) {

    // --------------------------------------
    //
    // Setup logger object
    //
    // --------------------------------------
    // Here, we use only a single LOGGER object which is shared among all files
    // which import Bragi. 
    // NOTE: Why use a single object? What are benefits? Could expose a "new"
    //  logger object

    // NOTE: It might be useful to have multiple loggers?
    var LOGGER = {
        util: {},

        // reference to canLog function
        canLog: canLog
    };

    // Setup line number / function name logging 
    // --------------------------------------
    LOGGER.util.__stack = function() {
        // Utility to get stack information
        var stack = null;
        try{
            var orig = Error.prepareStackTrace;
            Error.prepareStackTrace = function(_, stack) { return stack; };
            var err = new Error();
            Error.captureStackTrace(err, arguments.callee);
            stack = err.stack;
            Error.prepareStackTrace = orig;
        } catch(e){ }

        return stack;
    };

    // --------------------------------------
    // Expose styles to users
    // --------------------------------------
    // some symbols for the user
    LOGGER.util.symbols = SYMBOLS; 

    // --------------------------------------
    //
    // Setup options
    //
    // --------------------------------------
    LOGGER.options = {
        // default options
        // Primary configuration options
        // ----------------------------------
        // groupsEnabled: specifies what logs to display. Can be either:
        //      1. an {array} of log levels 
        //          e.g,. ['error', 'myLog1', 'myLog2']
        //    or
        //
        //      2. a {Boolean} : true to see *all* log messages, false to
        //          see *no* messages
        //
        // groupsEnabled acts as a "whitelist" for what messages to log
        groupsEnabled: true,

        // blackList is an array of log level groups which will always be excluded.
        // Levels specified here take priority over log groups specified in groupsEnabled
        groupsDisabled: [],

        // Store stack trace? Provides more info, but adds overhead. Very useful
        // when in development, tradeoffs should be considered when in production
        storeStackTrace: false
    };


    // Setup default transports
    // --------------------------------------
    // transports is the transports array the logger users. 
    LOGGER.transports = new Transports();

    // Default transports
    // ----------------------------------
    // NOTE:  see the Console transport for info on the configuration options.
    // NOTE: Do not 
    var _defaultTransports = [
        new transports.Console({
            showMeta: true,
            showStackTrace: false
        })
    ];

    // Other transports include:
    //      new transports.ConsoleJSON({}) 
    // 
    //      new transports.History({
    //          storeEverything: false
    //      })
    //
    //      new transports.File({
    //          filename: '/tmp/test.json'
    //         })

    for(var i = 0; i < _defaultTransports.length; i++){
        LOGGER.transports.add( _defaultTransports[i] );
    }

    // Expose a reference to all available transports
    // NOTE: This isn't the cleanest way to do this, could use improvement
    LOGGER.transportClasses = transports;

    // ----------------------------------
    //
    // Group Addition / Removal Functions
    //
    // ----------------------------------
    LOGGER.addGroup = function addGroup ( group ){
        // Add a passed in group (either a {String} or {RegExp}) to the
        // groupsEnabled array

        // If groupsEnabled is true or false, turn it into an array
        var groupsEnabled = LOGGER.options.groupsEnabled;

        if(groupsEnabled === true || groupsEnabled === false){
            LOGGER.options.groupsEnabled = groupsEnabled = [];
        }

        // Ensure it does not exist
        var i = 0, len = groupsEnabled.length;
        for(i = 0; i < len; i++){
            if(groupsEnabled[i].toString() === group.toString()){
                return LOGGER;
            }
        }

        // Group wasn't found yet, add it
        groupsEnabled.push( group );

        return LOGGER;
    };

    LOGGER.removeGroup = function removeGroup ( group ){
        // Takes in a group and removes all occurences of it from 
        // groupsEnabled
        
        // If groupsEnabled is true or false, turn it into an array
        var groupsEnabled = LOGGER.options.groupsEnabled;

        if(groupsEnabled === true || groupsEnabled === false){
            LOGGER.options.groupsEnabled = groupsEnabled = [];
        }

        // Ensure it does not exist
        var i = 0, len = groupsEnabled.length;
        var groupsEnabledWithoutGroup = [];

        for(i = 0; i < len; i++){
            if(groupsEnabled[i].toString() !== group.toString()){
                groupsEnabledWithoutGroup.push( groupsEnabled[i] );
            }
        }

        // update the groupsEnabled
        LOGGER.options.groupsEnabled = groupsEnabledWithoutGroup;

        return LOGGER;
    };

    // ----------------------------------
    //
    // UTIL functions
    //
    // ----------------------------------
    LOGGER.util.print = function print(message, color){
        // NOTE: This is a stub function which exists in Bragi, but not in
        // the browser version. We could print individual colors, but it 
        // requires adding an additional CSS string to console.log(). This is
        // a TODO
        return message;
    };

    // ----------------------------------
    //
    // LOG function
    //
    // ----------------------------------
    LOGGER.log = function loggerLog(group, message){
        // Main logging function. Takes in two (plus n) parameters:
        //   group: {String} specifies the log level, or log group
        //
        //   message: {String} the message to log. The message must be a single
        //      string, but can have multiple objects inside using `%O`. e.g.,
        //          logger.log('test', 'some object: %O', {answer: 42});
        //
        //   all other parameters are objects or strings that will be formatted
        //   into the message
        //
        var groupsEnabled, groupsDisabled, currentTransport;
        var transportFuncsToCall = [];

        // Check if this can be logged or not. All transports must be checked as
        // well, as they can override LOGGER.options.groupsEnabled 
        // ----------------------------------
        // For each transport, if it can be logged, log it
        for(var transport in LOGGER.transports._transports){
            currentTransport = LOGGER.transports._transports[transport];

            // by default, use the groupsEnabled and groupsDisabled specified in 
            // options
            groupsEnabled = LOGGER.options.groupsEnabled;
            groupsDisabled = LOGGER.options.groupsDisabled;

            // If transport overrides exist, use them
            if(currentTransport.groupsEnabled !== undefined){
                groupsEnabled = currentTransport.groupsEnabled;
            }
            if(currentTransport.groupsDisabled !== undefined){
                groupsDisabled = currentTransport.groupsDisabled;
            }

            // check if message can be logged
            if(canLog(group, groupsEnabled, groupsDisabled)){
                transportFuncsToCall.push( currentTransport );
            }
        }

        // can this message be logged? If not, do nothing
        if(transportFuncsToCall.length < 1){ 
            // Can NOT be logged if there are no transportFuncs to call 
            //
            // If storeAllHistory is not true, return immediately (if it is
            // true, the message will get stored just not passed to any
            // transports)
            if(!LOGGER.options.storeAllHistory){
                return false;
            }
        }

        // get all arguments
        // ----------------------------------
        // remove the group and message from the args array, so the new args array will
        // just be an array of the passed in arguments
        var extraArgs = Array.prototype.slice.call(arguments, 2);

        // ----------------------------------
        // Build up a `loggedObject`, a structured object containing log 
        // information. It can be output to the console, to another file, to
        // a remote host, etc.
        // ------------------------------
        var loggedObject = {};

        // Caller info
        var caller = null;

        // Only capture caller if storeStackTrace is true.
        // NOTE: This will not work in strict mode, as we cannot access
        // the caller's name
        if(LOGGER.options.storeStackTrace){
            caller = 'global scope';
            if(loggerLog.caller && loggerLog.caller.name){
                caller = loggerLog.caller.name;
            } else if((loggerLog.caller+'').indexOf('function ()') === 0){
                caller = 'anonymous function';
            }
        }

        // Setup properties on the loggedObject based on passed in properties
        // ----------------------------------
        // These are set before any of our library setters to ensure clients do not
        // override properties set by Bragi
        // NOTE: All properties set by Bragi are prefixed with an underscore
        loggedObject.properties = {};
        loggedObject.originalArgs = [];

        for(var i = 0; i < extraArgs.length; i++){
            // For each argument, we need to check its type. If it's an object, then
            // we'll extend the loggedObject `properties` object
            // (if there are multiple keys, the last
            // key found takes priority). If it's an array or any other data type,
            // we'll set a new property called `argumentX` and set the value

            if(!(extraArgs[i] instanceof Array) && typeof extraArgs[i] === 'object'){
                for(var key in extraArgs[i]){
                    loggedObject.properties[key] = extraArgs[i][key];
                }
            } else {
                loggedObject.properties['_argument' + i] = extraArgs[i];
            }

            // add to originalArgs array, so we can know by index what args were
            // passed in
            loggedObject.originalArgs.push(extraArgs[i]);
        }

        // setup meta
        // ----------------------------------
        loggedObject.meta = {
            caller: caller,
            date: new Date().toJSON()
        };
        loggedObject.unixTimestamp = new Date().getTime() / 1000;

        var stack = false;
        if(LOGGER.options.storeStackTrace){
            // Store and use stack trace if set. Aides in developing, but adds
            // some overhead
            stack = LOGGER.util.__stack();
            // Currently, getting stack info via this method
            // is unsupported in many browsers
            if(stack){
                var stackLength = stack.length;
                var trace = [];

                for(i = 1; i < stack.length; i++){
                    trace.push(stack[i] + '');
                }

                loggedObject.meta.file = stack[1].getFileName();
                loggedObject.meta.line = stack[1].getLineNumber();
                loggedObject.meta.column = stack[1].getColumnNumber();
                loggedObject.meta.trace = trace;
            }
        }

        // Setup group, message, other params
        // ----------------------------------
        loggedObject.group = group;

        // Setup the message
        // ----------------------------------
        loggedObject.message = message;

        // Send loggedObject to each transport
        // ----------------------------------
        // The loggedObject is setup now, call each of the transport log calls that
        // can be called
        var len;
        for(i = 0, len = transportFuncsToCall.length; i < len; i++){
            transportFuncsToCall[i].log.call( transportFuncsToCall[i], loggedObject );
        }
    };

    // Expose this to the window
    if(!(typeof define === 'function' && define.amd)) {
        window.BRAGI = LOGGER;
    }
    return LOGGER;
}));

},{"./bragi/canLog":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/canLog.js","./bragi/symbols":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/symbols.js","./bragi/transports":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports.js","./bragi/transports/Transports":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/Transports.js","util":"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/util/util.js"}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/canLog.js":[function(require,module,exports){
/* =========================================================================
 *
 * canLog
 *
 *      Function which takes in a gropu and groupsEnabled and returns a {Boolean}
 *      indicating if message can be logged
 *
 * ========================================================================= */
function canLog(group, groupsEnabled, groupsDisabled){ 
    // Check if a passed in group {string} can be logged based on the passed in
    // groupsEnabled ({Array} or {Boolean}). 
    // If the message cannot be logged, return false - otherwise, return true
    //
    //  NOTE: errors will always be logged unless explictly disabled

    if(groupsEnabled === undefined){
        groupsEnabled = true;
    }
    var i,len;

    // by default, allow logging
    var canLogIt = true;

    // First, check for allowed groups (whitelist)
    // ----------------------------------
    if(groupsEnabled === true){
        canLogIt = true;

    } else if(groupsEnabled === false || groupsEnabled === null){
        // Don't ever log if logging is disabled
        canLogIt = false;

    } else if(groupsEnabled instanceof Array){
        // if an array of log levels is set, check it
        canLogIt = false;

        for(i=0, len=groupsEnabled.length; i<len; i++){
            // the current groupsEnabled will be a string we check group against;
            // for instance,
            //      if group is "group1:group2", and if the current log level
            //      is "group1:group3", it will NOT match; but, "group1:group2" 
            //      would match.
            //          Likewise, "group1:group2:group3" WOULD match

            // If the current item is a regular expression, run the regex
            if(groupsEnabled[i] instanceof RegExp){
                if(groupsEnabled[i].test(group)){
                    canLogIt = true;
                    break;
                }
            } else if(group.indexOf(groupsEnabled[i]) === 0){
                canLogIt = true;
                break;
            }
        }
    } 

    // set error and warn to be always on unless explictly disabled
    if(group.indexOf('error') === 0 || group.indexOf('warn') === 0){
        canLogIt = true;
    }

    // Second, check disallowed groups (blacklist)
    if(groupsDisabled && groupsDisabled instanceof Array){
        for(i=0, len=groupsDisabled.length; i<len; i++){
            // Same logic as checking groupsEnabled, just the inverse
            //
            // If the current item is a regular expression, run the regex
            if(groupsDisabled[i] instanceof RegExp){
                if(groupsDisabled[i].test(group)){
                    canLogIt = false;
                    break;
                }
            } else if(group.indexOf(groupsDisabled[i]) === 0){
                canLogIt = false;
                break;
            }
        }
    }

    return canLogIt;
}

module.exports = canLog;

},{}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/symbols.js":[function(require,module,exports){
/* =========================================================================
 *
 *  symbols
 *      Defines special symbols used by logger
 *
 * ========================================================================= */
module.exports = {
    success: '✔︎ ',
    error: '✘ ',
    warn: '⚑ ',
    arrow: '➤ ',
    star: '☆ ',
    box: '☐ ',
    boxSuccess: '☑︎ ',
    boxError: '☒ ',
    circle: '◯ ',
    circleFilled: '◉ ',
    asterisk: '✢',
    floral: '❧',
    snowflake: '❄︎',
    fourDiamond:'❖',
    spade: '♠︎',
    club: '♣︎',
    heart: '♥︎',
    diamond: '♦︎',
    queen: '♛',
    rook: '♜',
    pawn: '♟',
    atom: '⚛'
};

},{}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports.js":[function(require,module,exports){
/* =========================================================================
 *  transports
 *      Handles all transports
 *
 * ========================================================================= */
var files = require('./transports/index');

var transports = {};

for(var file in files){ 
    transports[file] = files[file];
}

module.exports = transports;

},{"./transports/index":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/index.js"}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/Console.js":[function(require,module,exports){
/* =========================================================================
 *
 * Console
 *      Default transport - console
 *
 * ========================================================================= */
var SYMBOLS = require('../symbols');

// In < IE10 console is undefined unless the developer tools have at some
// point been opened in that tab. However, even after console and console.log
// exist, typeof console.log still evaluate to object, not function, so
// methods like .apply will cause errors
if (window.console && window.console.log) {
    if (typeof window.console.log !== 'function') {
        window.console.log = function () {};
    }
} else {
    window.console = {};
    window.console.log = function () {};
}

// --------------------------------------
//
// Setup group Colors to print
//
// --------------------------------------
var GROUP_COLORS = [
    // first is BG color, second is foreground color, third is border
    ['#3182bd', '#ffffff', '#225588'],
    ['#f38630', '#ffffff'],
    ['#e0e4cc', '#000000', '#c8cbb6'],
    ['#8c510a', '#ffffff'],
    ['#35978f', '#ffffff', "#13756d"],
    ['#c51b7d', '#ffffff'],
    ['#c6dbef', '#000000'],
    ['#af8dc3', '#000000'],
    ['#543005', '#ffffff', "#321002"],
    ['#7fbf7b', '#000000'],
    ['#dfc27d', '#000000', "#bda05b"],
    ['#f5f5f5', '#000000'],
    ['#e9a3c9', '#000000'],
    ['#59323C', '#ffffff'],
    ['#66c2a5', '#000000'],
    ['#f6e8c3', '#000000'],
    ['#606060', '#f0f0f0'],
    ['#8c510a', '#ffffff'],
    ['#80cdc1', '#000000'],
    ['#542788', '#ffffff'],
    ['#FB8AFE', '#343434'],
    ['#003c30', '#ffffff'],
    ['#e6f598', '#000000'],
    ['#c7eae5', '#000000'],
    ['#000000', '#f0f0f0'],
    ['#C3FF0E', '#343434']
];
var OVERFLOW_SYMBOLS = [
    'asterisk', 'floral', 'snowflake', 'fourDiamond', 'spade', 'club', 'heart',
    'diamond', 'queen', 'rook', 'pawn', 'atom'
];

var BASE_CSS = 'padding: 2px; margin:2px; line-height: 1.8em;';
var META_STYLE = BASE_CSS + 'font-size:0.9em; color: #cdcdcd; padding-left:30px;';

// ======================================
//
// Console Transport
//
// ======================================
function TransportConsole ( options ){
    options = options || {};
    // Transport must set groupsEnabled and groupsDisabled to provide transport
    // level support for overriding what groups to log
    // (NOTE - the user does not need to pass in groupsEnabled, but the
    // transport must set these properties)
    this.groupsEnabled = options.groupsEnabled;
    this.groupsDisabled = options.groupsDisabled;

    // Display / meta related config options
    // ----------------------------------
    // Add a line break after the last thing sent?
    this.addLineBreak = options.addLineBreak !== undefined ? options.addLineBreak : false;

    // showMeta: {Boolean} Show the meta info (calling func, time, line num, etc)
    //  `false` by default
    //  NOTE: This is primarily used only if you want to disable everything.
    //  If this is true and showStackTrace 
    //  options will be checked. If it is set to false, nothing will be shown
    this.showMeta = options.showMeta !== undefined ? options.showMeta : false;

    // showStackTrace: {Boolean} provide the full stack trace? Enabled by default,
    // but will only be shown if meta is shown
    this.showStackTrace = options.showStackTrace !== undefined ? options.showStackTrace: true;

    // Transport specific settings
    // ----------------------------------
    this.showColors = options.showColors === undefined ? true : options.showColor;

    this._foundColors = [];
    this._colorDict = {
        error: BASE_CSS + 'background: #ff0000; color: #ffffff; font-style: bold; border: 4px solid #cc0000;',
        warn: BASE_CSS + 'padding: 2px; background: #ffff00; color: #343434; font-style: bold; border: 4px solid #cccc00;'
    };

    this.curSymbolIndex = 0;

    return this;
}

TransportConsole.prototype.getColor = function getColor(group){
    // Color Formatting
    // ----------------------------------
    // Returns the background color for a passed in log group
    // TODO: if more found colors exist than the original length of the
    // COLOR array, cycle back and modify the original color
    //
    var color = '';
    var baseColor = '';
    var curSymbol;
    var cssString = '';

    // For color, get the first group
    group = group.split(':')[0];

    // if a color exists for the passed in log group, use it
    if(this._colorDict[group]){
        return this._colorDict[group];
    }

    if(this._foundColors.length >= GROUP_COLORS.length){
        // is the index too high? loop around if so
        color = GROUP_COLORS[this._foundColors.length % GROUP_COLORS.length];
        baseColor = color;

        // add underline if odd
        // ------------------------------
        cssString += 'font-style: italic;';

    } else {

        // We haven't yet exhausted all the colors
        color = GROUP_COLORS[this._foundColors.length];
    }

    var borderColor = color[2];
    // If no border color was provided, just bring all values down by 3
    // and use the result
    if(!color[2]){
        borderColor = '#';
        for(var i = 1; i < color[0].length; i++){
            borderColor += (
                (Math.max( 0, (parseInt(color[0][i], 16) - 2) )).toString(16)
            );
        }
    }


    cssString += BASE_CSS +
        "background: " + color[0] + ";" +
        "border: 1px solid " + borderColor + ";" +
        "color: " + color[1] + ";";

    // update the stored color info
    this._foundColors.push(color);
    this._colorDict[group] = cssString;

    return cssString;
};


// Prototype properties (All these must exist to be a valid transport)
// --------------------------------------
TransportConsole.prototype.name = 'Console';

TransportConsole.prototype.log = function transportConsoleLog( loggedObject ){
    // log
    //  Logs a passed object to the console
    //
    //  params:
    //      loggedObject: {Object} the log object to log
    //      options : {Object} the logger options
    //
    // Setup message for console output
    // ------------------------------
    //  The final message will look like: 
    //      [ group ]      message 
    //      meta info (function caller, time, file info)
    //
    var consoleMessage = "";
    if(this.showColors){
        consoleMessage += "%c";
    }

    var i;

    // Setup final log message format, depending on if it's a browser or not
    // ------------------------------
    consoleMessage +=
        "[ " +
            loggedObject.group + ' ' +
        " ] \t";

    // NOTE: Use the full styledMessage property
    consoleMessage += loggedObject.message + ' \t';

    // add line break to console messages if set
    if(this.addLineBreak){
        consoleMessage += '\n';
    }

    // Setup final log array to call console.log with
    var toLogArray = [];
    toLogArray.push(consoleMessage);

    if(this.showColors){
        toLogArray.push(this.getColor(loggedObject.group));
    }
    toLogArray = toLogArray.concat(loggedObject.originalArgs);

    // Log it
    // ------------------------------
    console.log.apply( console, toLogArray );

    // ----------------------------------
    // Log meta info?
    // ----------------------------------
    var metaConsoleMessage = '';
    var metaLogArray = [];

    if(this.showMeta){
        // push style for meta if there is meta
        if(this.showColors){
            metaConsoleMessage += '%c';
        }

        // JSON timestamp
        metaConsoleMessage += new Date().toJSON() + ' \t \t ';

        // Show the name of the calling function
        if(loggedObject.meta.caller){
            metaConsoleMessage += 'caller: ' + loggedObject.meta.caller + ' \t \t ';
        }

        // For node, log line number and filename
        if(loggedObject.meta.file && loggedObject.meta.line ){
            metaConsoleMessage += loggedObject.meta.file +
                ':' + loggedObject.meta.line +
                ':' + loggedObject.meta.column +
                '';
        }
    }

    if(this.showMeta && this.showStackTrace && loggedObject.meta.trace){
        // Show full stack trace if set
        // --------------------------
        metaConsoleMessage += '\n' +
            '(Stack Trace)' +
            '\n';

        // Skip the first item in the stack (this function)
        for(i = 0; i < loggedObject.meta.trace.length; i++){
            metaConsoleMessage += '\t' +
                loggedObject.meta.trace[i] + '\n';
        }
    }

    // push style for meta if there is meta
    if(this.showMeta && this.showColors){
        metaLogArray.push(metaConsoleMessage);
        metaLogArray.push(META_STYLE);
    }

    if(metaLogArray.length > 0){
        console.log.apply(console, metaLogArray);
    }

    return this;
};

module.exports = TransportConsole;

},{"../symbols":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/symbols.js"}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/History.js":[function(require,module,exports){
/* =========================================================================
 *
 * History
 *      Logs to console, but just outputs raw JSON
 *
 * ========================================================================= */
function TransportHistory ( options ){
    options = options || {};

    this.groupsEnabled = options.groupsEnabled;
    this.groupsDisabled = options.groupsDisabled;

    // Store *everything*?
    this.storeEverything = false;
    if(options.storeEverything === true){
        this.storeEverything = true;

        // Also, log *everything*
        this.groupsEnabled = true;
    }

    // Set history size per log group
    //  NOTE: if historySize is 0 or false, it has no limit
    this.historySize = options.historySize !== undefined ? options.historySize : 200;

    // History object
    this.history = {};

    return this;
}

// Prototype properties (All these must exist to be a valid transport)
// --------------------------------------
TransportHistory.prototype.name = 'History';

TransportHistory.prototype.log = function transportHistoryLog( loggedObject ){
    // log
    //  Logs a passed object to the console
    //
    //  params:
    //      loggedObject: {Object} the log object to log
    //      options : {Object} the logger options
    //
    // Setup message for console output
    // ------------------------------
    // store the key by the first root group
    var group = loggedObject.group.split(':')[0];

    // Keep track of message
    if(this.history[group] === undefined){
        this.history[group] = [];
    }

    // store the key by the first root group
    this.history[group].push(loggedObject);

    // Trim history
    if(this.historySize > 0 && 
       this.history[group].length > this.historySize
    ){
        this.history[group].shift();
    }

    return this;
};

module.exports = TransportHistory;

},{}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/Transports.js":[function(require,module,exports){
/* =========================================================================
 *
 * Transports
 *      Transports is an object which contains transports the logger uses
 *      to output logs
 *
 * ========================================================================= */
function Transports (){
    // This function is used by Bragi to keep track of what the currently
    // enabled transports to be used are
    
    this._transports = {};

    // Contains a count of # of transports by type
    this._transportCount = {};
    
    return this;
}

// ======================================
//
// access
//
// ======================================
Transports.prototype.get = function get( transportName ){
    // Returns a transport object that matches the passed in name
    var returnedTransportObjects = new Array();

    for(var key in this._transports){
        // If the name is part of of the key, remove it
        if(key.toLowerCase().indexOf(transportName.toLowerCase()) > -1){
            returnedTransportObjects.push(this._transports[key]);
        }
    }

    returnedTransportObjects.property = function transportProperty( keyOrObject, value ){
        // Allow `.property()` to be called, which will return an array of 
        // values if just the `keyOrObject` is passed in. If `value` is also passed in 
        // as a string, it will set all returned transports's key to that value
        //
        // An object containing property keys and values can also be passed in
        // as the first and only argument to set multiple properties at once
        //
        // example calls: .property( 'showMeta', true );
        //                .property( {showMeta: true} );

        var i = 0;
        var len = this.length;

        if(typeof keyOrObject === 'string' && value === undefined){
            // Getter called. called like `.property('showMeta');`
            var vals = [];
            for(i=0; i<len; i++){ 
                vals.push(this[i][keyOrObject]);
            }
            return vals;

        } 
        else if( typeof keyOrObject === 'string' && value !== undefined ){
            // Setter called. called like `.property('showMeta', true);`
            for(i=0; i<len; i++){ 
                this[i][keyOrObject] = value;
            }
        }
        else if( typeof keyOrObject === 'object' ){
            // Object passed in like `.property( {showMeta: true} )`
            for(i=0; i<len; i++){ 
                for( var keyName in keyOrObject ){
                    this[i][keyName] = keyOrObject[keyName];
                }
            }
        }

        return this;
    };

    return returnedTransportObjects;
};

// ======================================
//
// Add / Remove
//
// ======================================
Transports.prototype.add = function add( transport ){
    // Takes in a transport object and adds it to the transport object.
    //  If a transport object already exists (e.g., if there are two "File"
    //  transports already), the transport name will be transport.name + number

    if(this._transportCount[transport.name] === undefined){
        // Transport does not yet exist
        this._transportCount[transport.name] = 1;
        this._transports[transport.name] = transport;
    } else {
        // Transport already exists
        this._transportCount[transport.name] += 1;
        this._transports[transport.name + '' + (this._transportCount[transport.name] - 1)] = transport;
    }

    return this;
};

Transports.prototype.remove = function remove( transportName, index ){
    // Takes in the name of a transport (e.g., Console) and an optional index.
    // If no index is passed in, all transports that match the name will be 
    // removed. If an index is passed in, only the index will be removed. e.g.,
    // if there are two `File` transports, passed in index `1` will remove the
    // second file transport

    transportName = transportName;
    // if a transport object was passed in, remove the transport by name
    if(transportName.name){ transportName = transportName.name; }

    for(var key in this._transports){
        if(index !== undefined){
            if((transportName + '' + index) === key){
                delete this._transports[key];
            }
        } else {
            // If the name is part of of the key, remove it
            if(key.indexOf(transportName) > -1){
                delete this._transports[key];
            }
        }
    }

    return this;
};

Transports.prototype.empty = function empty (){
    // Removes all transports
    for(var key in this._transports){
        delete this._transports[key];
    }

    return this;
};

module.exports = Transports;

},{}],"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/index.js":[function(require,module,exports){
/* =========================================================================
 *
 * index.js
 *      Exports all available transports
 *
 * ========================================================================= */
module.exports.Console = require('./Console');
module.exports.History = require('./History');

},{"./Console":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/Console.js","./History":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi/transports/History.js"}],"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/process/browser.js","inherits":"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/home/seiyria/projects/Roguathia/node_modules/dice.js/package.json":[function(require,module,exports){
module.exports={
  "name": "dice.js",
  "version": "0.8.0",
  "description": "A parser and evaluator for a useful rpg dice syntax.",
  "main": "src/dice.js",
  "directories": {
    "test": "tests"
  },
  "dependencies": {},
  "devDependencies": {
    "karma": "~0.10.8",
    "karma-chrome-launcher": "~0.1.1",
    "karma-coffee-preprocessor": "~0.1.1",
    "karma-firefox-launcher": "~0.1.2",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.5",
    "karma-phantomjs-launcher": "~0.1.1",
    "karma-requirejs": "~0.2.0",
    "karma-script-launcher": "~0.1.0",
    "requirejs": "~2.1.9",
    "pegjs": "~0.9.0",
    "jasmine-node": "~1.14.5",
    "browserify": "~11.0.1"
  },
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lordnull/dice.js.git"
  },
  "keywords": [
    "rpg",
    "dice",
    "parser",
    "roll",
    "peg"
  ],
  "author": {
    "name": "Micah Warren",
    "url": "Lord Null"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lordnull/dice.js/issues"
  },
  "homepage": "https://github.com/lordnull/dice.js",
  "gitHead": "c326f12d06e47c635afba681ad54a43deb019082",
  "_id": "dice.js@0.8.0",
  "_shasum": "1712d2c97d33572dbb99c02552e37b504f2f33c0",
  "_from": "dice.js@>=0.8.0 <0.9.0",
  "_npmVersion": "2.12.1",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "lordnull",
    "email": "micahw@lordnull.com"
  },
  "dist": {
    "shasum": "1712d2c97d33572dbb99c02552e37b504f2f33c0",
    "tarball": "http://registry.npmjs.org/dice.js/-/dice.js-0.8.0.tgz"
  },
  "maintainers": [
    {
      "name": "lordnull",
      "email": "micahw@lordnull.com"
    }
  ],
  "_resolved": "https://registry.npmjs.org/dice.js/-/dice.js-0.8.0.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/dice.js":[function(require,module,exports){
var dice = {
	parse: require('./parser').parse,
	eval: require('./evaluate').eval,
	version: require('../package').version
};

function roll(str, scope){
	var parsed = dice.parse(str);
	var evaled = dice.eval(parsed, scope);
	return evaled;
};

dice.roll = roll;

dice.statistics = function(str, scope, samples){
	if(typeof(scope) == "number"){
		samples = scope;
		scope = {};
	}
	scope = scope || {};
	samples = samples || 1000;
	var resultSet = [];
	var i;
	for(i = 0; i < samples; i++){
		resultSet.push(roll(str, scope));
	}
	var mean = resultSet.reduce(function(n, acc){ return n + acc; }, 0) / samples;
	var min = resultSet.reduce(function(n, acc){ return n < acc ? n : acc; }, resultSet[0]);
	var max = resultSet.reduce(function(n, acc){ return n > acc ? n : acc; }, resultSet[0]);
	return {
		'results': resultSet,
		'mean': mean,
		'min': parseInt(min.toFixed()),
		'max': parseInt(max.toFixed())
	};
};

function stringify_expression(evaled_op){
	var sub = stringify(evaled_op.expression);
	var prefix = evaled_op.op[0];
	if(prefix === 'p'){
		prefix = '';
	}
	
	return prefix + "( " + sub + " )";
};

function stringify_op(evaled_op){
	var rs = stringify(evaled_op.rightSide);
	var ls = stringify(evaled_op.leftSide);
	return rs + ' ' + evaled_op.op + ' ' + ls;
};

function stringify_rolls(evaled_roll){
	var minStr = evaled_roll.min > 1 ? evaled_roll.min + '..' : '';
	var preamble = evaled_roll.x + evaled_roll.mode + minStr + evaled_roll.max + ':[';
	return preamble + evaled_roll.rolls.join(', ') + ']';
};

function stringify(evaled){
	if(evaled.expression){
		return stringify_expression(evaled);
	}

	if(evaled.op){
		return stringify_op(evaled);
	}

	if(evaled.rolls){
		return stringify_rolls(evaled);
	}

	return evaled.toString();
};

dice.stringify = stringify;

var k;
for(k in dice){
    exports[k] = dice[k];
}

return dice;

},{"../package":"/home/seiyria/projects/Roguathia/node_modules/dice.js/package.json","./evaluate":"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/evaluate.js","./parser":"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/parser.js"}],"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/evaluate.js":[function(require,module,exports){

function makeSeq(endIndex){
	var seq = [];
	seq[endIndex] = true;
	for(var i = 0; i < seq.length; i++){
		seq[i] = true;
	}
	return seq;
};

var ops = {

	'static': function(){
		var outValue = this.value;
		return function(){
			return outValue;
		};
	},

	'lookup': function(){
		var variableName = this.value;
		return function(scope){
			return scope[variableName];
		}
	},

	'floor': function(value){
		return function(scope){
			var floorable = value(scope);
			var tots = new Number(Math.floor(floorable));
			tots.op = 'floor';
			tots.expression = floorable;
			return tots;
		}
	},

	'ceil': function(value){
		return function(scope){
			var ceilable = value(scope);
			var tots = new Number(Math.ceil(ceilable));
			tots.op = 'ceil';
			tots.expression = ceilable;
			return tots;
		}
	},

	'round': function(value){
		return function(scope){
			var roundable = value(scope);
			var tots = new Number(Math.round(roundable));
			tots.op = 'round';
			tots.expression = roundable;
			return tots;
		}
	},

	'd': function(numRolls, minMax){
		return function(scope){
			var x = numRolls(scope);
			var seq = makeSeq(x - 1);
			var outMin, outMax;
			var rolled = seq.map(function(){
				var rolledRet = minMax(scope);
				outMin = rolledRet.min;
				outMax = rolledRet.max;
				return rolledRet;
			});
			var out = rolled.reduce(function(sum, val){
				return sum + val;
			}, 0);
			out = new Number(out);
			out.rolls = rolled;
			out.min = outMin;
			out.max = outMax;
			out.x = x;
			out.mode = 'd';
			return out;
		};
	},

	'w': function(numRolls, minMax){
		return function(scope){
			var x = numRolls(scope);
			var seq = makeSeq(x - 1);
			var outMin, outMax;
			var rolled = seq.map(function(){
				var lastRolled = minMax(scope);
				var wildrolled = 0;
				outMin = minMax.min;
				outMax = minMax.max;
				if(minMax.min === minMax.max){
					return lastRolled;
				}
				while(lastRolled === minMax.max){
					wildrolled += lastRolled;
					lastRolled = mimMax(scope);
				}
				return wildrolled;
			});
			var out = rolled.reduce(function(sum, val){
				return sum + val;
			}, 0);
			out = new Number(out);
			out.rolls = rolled;
			out.min = outMin;
			out.max = outMax;
			out.x = x;
			out.mode = 'w';
			return out;
		};
	},

	'random': function(minFun, maxFun){
		return function(scope){
			var rawRandom = Math.random();
			var max = maxFun(scope);
			var min = minFun(scope);
			var diff = max - min;
			var rawRandom = diff * rawRandom;
			var rndNumber = Math.round(rawRandom + min);
			rndNumber = new Number(rndNumber);
			rndNumber.min = min;
			rndNumber.max = max;
			return rndNumber;
		};
	},

	'+': function(v1, v2){
		return function(scope){
			var rightSide = v1(scope);
			var leftSide = v2(scope);
			var sum = rightSide + leftSide;
			sum = new Number(sum);
			sum.op = '+';
			sum.rightSide = rightSide;
			sum.leftSide = leftSide;
			return sum;
		};
	},

	'-': function(v1, v2){
		return function(scope){
			var rightSide = v1(scope);
			var leftSide = v2(scope);
			var sum = rightSide - leftSide;
			sum = new Number(sum);
			sum.op = '-';
			sum.rightSide = rightSide;
			sum.leftSide = leftSide;
			return sum;
		};
	},

	'*': function(v1, v2){
		return function(scope){
			var rightSide = v1(scope);
			var leftSide = v2(scope);
			var tots = rightSide * leftSide;
			tots = new Number(tots);
			tots.op = '*';
			tots.rightSide = rightSide;
			tots.leftSide = leftSide;
			return tots;
		};
	},

	'/': function(v1, v2){
		return function(scope){
			var rightSide = v1(scope);
			var leftSide = v2(scope);
			var tots = rightSide / leftSide;
			tots = new Number(tots);
			tots.op = '/';
			tots.rightSide = rightSide;
			tots.leftSide = leftSide;
			return tots;
		};
	},

	'paren_express': function(op){
		return function(scope){
			var tots = op(scope);
			outtots = new Number(tots);
			outtots.op = 'paren_express';
			outtots.expression = tots;
			return outtots;
		};
	}

};

function resolve_ops(args){
	args = args || [];
	return args.map(resolve_op);
};

function resolve_op(opObj){
	var subArgs = resolve_ops(opObj.args);
	return ops[opObj.op].apply(opObj, subArgs);
};


exports.eval = function(parsed, scope){
	scope = scope || {};
	var ops = resolve_op(parsed)
	return ops(scope);

	/*var acc = {sum: 0, mode: "+", rolls: [], 'scope':scope}
	var reduced = parsed.reduce(reduceThemBones, acc);
	return {sum: reduced.sum, rolls: reduced.rolls};*/
}

exports.ops = ops;


},{}],"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/parser.js":[function(require,module,exports){
module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(v1, op, v2) { return {'op':op, args: [v1, v2] }; },
        peg$c1 = function(out) { return out; },
        peg$c2 = "(",
        peg$c3 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c4 = ")",
        peg$c5 = { type: "literal", value: ")", description: "\")\"" },
        peg$c6 = function(rolls) { return {'op':'paren_express', args: [rolls]} },
        peg$c7 = "*",
        peg$c8 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c9 = function() { return '*'; },
        peg$c10 = "/",
        peg$c11 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c12 = function() { return '/'; },
        peg$c13 = function(v1, op, v2) { return {'op':op, args:[v1, v2] }; },
        peg$c14 = function(d) { return d; },
        peg$c15 = function(paren) { return paren; },
        peg$c16 = function(v1, op, v2) { return {'op':op, args:[v1, v2]}; },
        peg$c17 = function(op) { return op; },
        peg$c18 = "+",
        peg$c19 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c20 = function() { return "+"; },
        peg$c21 = "-",
        peg$c22 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c23 = function() { return "-"; },
        peg$c24 = function(x, mode, mm) { return {'op':mode, 'args':[x, mm]} },
        peg$c25 = function(mode, mm) { return {'op':mode, 'args':[{'op':'static', 'value':1}, mm]}; },
        peg$c26 = function(mm) { return { 'op':'d', 'args':[ {'op':'static', 'value':1}, mm]}; },
        peg$c27 = function(x) { return x; },
        peg$c28 = "d",
        peg$c29 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c30 = "w",
        peg$c31 = { type: "literal", value: "w", description: "\"w\"" },
        peg$c32 = function(mm) { return mm; },
        peg$c33 = function(max) { return {'op':'random', 'args':[{'op':'static', 'args':[], 'value':1}, max]}; },
        peg$c34 = "..",
        peg$c35 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c36 = function(min, max) { return {'op':'random', 'args':[min, max]}; },
        peg$c37 = /^[ ]/,
        peg$c38 = { type: "class", value: "[ ]", description: "[ ]" },
        peg$c39 = function(i) {
        		return {'op': 'static', value: i};
        	},
        peg$c40 = function(l) {
        		return l;
        	},
        peg$c41 = function(f, v) {
        		return {'op':f, args:[v]};
        	},
        peg$c42 = function(f, ex) {
            return {'op':f, args:ex.args};
        	},
        peg$c43 = "f",
        peg$c44 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c45 = function() { return 'floor'; },
        peg$c46 = "r",
        peg$c47 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c48 = function() { return 'round'; },
        peg$c49 = "c",
        peg$c50 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c51 = function() { return 'ceil'; },
        peg$c52 = function(v) { return {'op':'lookup', 'value':v}; },
        peg$c53 = "[",
        peg$c54 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c55 = /^[a-zA-Z 0-9]/,
        peg$c56 = { type: "class", value: "[a-zA-Z 0-9]", description: "[a-zA-Z 0-9]" },
        peg$c57 = "]",
        peg$c58 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c59 = function(varname) { return varname.join(""); },
        peg$c60 = { type: "other", description: "integer" },
        peg$c61 = /^[0-9]/,
        peg$c62 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c63 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c64 = function(digits) { return parseInt(digits.join(""), 10) * -1; },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsedicerolls();

      return s0;
    }

    function peg$parsedicerolls() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicationSeq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadditionOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadditionSeq();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseadditionSeq();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseparenExpress();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseparenExpress() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedicerolls();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c4;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c6(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemultiplicationOp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c9();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c10;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsemultiplicationSeq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsediceroll();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsemultiplicationOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemultiplicationSeq();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseparenExpress();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemultiplicationOp();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemultiplicationSeq();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsediceroll();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseparenExpress();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c15(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseadditionSeq() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicationSeq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseadditionOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadditionSeq();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemultiplicationSeq();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseparenExpress();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parseadditionOp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsews();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsews();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c21;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsews();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsediceroll() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseintval();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserollmode();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemaybe_minmax();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parserollmode();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemaybe_minmax();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseminmax();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c26(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseintval();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c27(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parserollmode() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 100) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 119) {
          s0 = peg$c30;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
      }

      return s0;
    }

    function peg$parsemaybe_minmax() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseminmax();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseintval();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c33(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseminmax() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseintval();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s2 = peg$c34;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseintval();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c36(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      s0 = [];
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c38); }
        }
      }

      return s0;
    }

    function peg$parseintval() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselookup();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsemathit();
          if (s1 !== peg$FAILED) {
            s2 = peg$parselookup();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c41(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemathit();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseparenExpress();
              if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c42(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemathit() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 102) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c45();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 114) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 99) {
            s1 = peg$c49;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parselookup() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsevariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c52(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c53;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c54); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c55.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c55.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c57;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c58); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c63(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c21;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();

},{}],"/home/seiyria/projects/Roguathia/node_modules/eventemitter2/lib/eventemitter2.js":[function(require,module,exports){
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
;!function(undefined) {

  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };
  var defaultMaxListeners = 10;

  function init() {
    this._events = {};
    if (this._conf) {
      configure.call(this, this._conf);
    }
  }

  function configure(conf) {
    if (conf) {

      this._conf = conf;

      conf.delimiter && (this.delimiter = conf.delimiter);
      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);
      conf.wildcard && (this.wildcard = conf.wildcard);
      conf.newListener && (this.newListener = conf.newListener);

      if (this.wildcard) {
        this.listenerTree = {};
      }
    }
  }

  function EventEmitter(conf) {
    this._events = {};
    this.newListener = false;
    configure.call(this, conf);
  }

  //
  // Attention, function return type now is array, always !
  // It has zero elements if no any matches found and one or more
  // elements (leafs) if there are matches
  //
  function searchListenerTree(handlers, type, tree, i) {
    if (!tree) {
      return [];
    }
    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,
        typeLength = type.length, currentType = type[i], nextType = type[i+1];
    if (i === typeLength && tree._listeners) {
      //
      // If at the end of the event(s) list and the tree has listeners
      // invoke those listeners.
      //
      if (typeof tree._listeners === 'function') {
        handlers && handlers.push(tree._listeners);
        return [tree];
      } else {
        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {
          handlers && handlers.push(tree._listeners[leaf]);
        }
        return [tree];
      }
    }

    if ((currentType === '*' || currentType === '**') || tree[currentType]) {
      //
      // If the event emitted is '*' at this part
      // or there is a concrete match at this patch
      //
      if (currentType === '*') {
        for (branch in tree) {
          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));
          }
        }
        return listeners;
      } else if(currentType === '**') {
        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));
        if(endReached && tree._listeners) {
          // The next element has a _listeners, add it to the handlers.
          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));
        }

        for (branch in tree) {
          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
            if(branch === '*' || branch === '**') {
              if(tree[branch]._listeners && !endReached) {
                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));
              }
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
            } else if(branch === nextType) {
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));
            } else {
              // No match on this one, shift into the tree but not in the type array.
              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
            }
          }
        }
        return listeners;
      }

      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));
    }

    xTree = tree['*'];
    if (xTree) {
      //
      // If the listener tree will allow any match for this part,
      // then recursively explore all branches of the tree
      //
      searchListenerTree(handlers, type, xTree, i+1);
    }

    xxTree = tree['**'];
    if(xxTree) {
      if(i < typeLength) {
        if(xxTree._listeners) {
          // If we have a listener on a '**', it will catch all, so add its handler.
          searchListenerTree(handlers, type, xxTree, typeLength);
        }

        // Build arrays of matching next branches and others.
        for(branch in xxTree) {
          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {
            if(branch === nextType) {
              // We know the next element will match, so jump twice.
              searchListenerTree(handlers, type, xxTree[branch], i+2);
            } else if(branch === currentType) {
              // Current node matches, move into the tree.
              searchListenerTree(handlers, type, xxTree[branch], i+1);
            } else {
              isolatedBranch = {};
              isolatedBranch[branch] = xxTree[branch];
              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);
            }
          }
        }
      } else if(xxTree._listeners) {
        // We have reached the end and still on a '**'
        searchListenerTree(handlers, type, xxTree, typeLength);
      } else if(xxTree['*'] && xxTree['*']._listeners) {
        searchListenerTree(handlers, type, xxTree['*'], typeLength);
      }
    }

    return listeners;
  }

  function growListenerTree(type, listener) {

    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();

    //
    // Looks for two consecutive '**', if so, don't add the event at all.
    //
    for(var i = 0, len = type.length; i+1 < len; i++) {
      if(type[i] === '**' && type[i+1] === '**') {
        return;
      }
    }

    var tree = this.listenerTree;
    var name = type.shift();

    while (name) {

      if (!tree[name]) {
        tree[name] = {};
      }

      tree = tree[name];

      if (type.length === 0) {

        if (!tree._listeners) {
          tree._listeners = listener;
        }
        else if(typeof tree._listeners === 'function') {
          tree._listeners = [tree._listeners, listener];
        }
        else if (isArray(tree._listeners)) {

          tree._listeners.push(listener);

          if (!tree._listeners.warned) {

            var m = defaultMaxListeners;

            if (typeof this._events.maxListeners !== 'undefined') {
              m = this._events.maxListeners;
            }

            if (m > 0 && tree._listeners.length > m) {

              tree._listeners.warned = true;
              console.error('(node) warning: possible EventEmitter memory ' +
                            'leak detected. %d listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit.',
                            tree._listeners.length);
              console.trace();
            }
          }
        }
        return true;
      }
      name = type.shift();
    }
    return true;
  }

  // By default EventEmitters will print a warning if more than
  // 10 listeners are added to it. This is a useful default which
  // helps finding memory leaks.
  //
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.

  EventEmitter.prototype.delimiter = '.';

  EventEmitter.prototype.setMaxListeners = function(n) {
    this._events || init.call(this);
    this._events.maxListeners = n;
    if (!this._conf) this._conf = {};
    this._conf.maxListeners = n;
  };

  EventEmitter.prototype.event = '';

  EventEmitter.prototype.once = function(event, fn) {
    this.many(event, 1, fn);
    return this;
  };

  EventEmitter.prototype.many = function(event, ttl, fn) {
    var self = this;

    if (typeof fn !== 'function') {
      throw new Error('many only accepts instances of Function');
    }

    function listener() {
      if (--ttl === 0) {
        self.off(event, listener);
      }
      fn.apply(this, arguments);
    }

    listener._origin = fn;

    this.on(event, listener);

    return self;
  };

  EventEmitter.prototype.emit = function() {

    this._events || init.call(this);

    var type = arguments[0];

    if (type === 'newListener' && !this.newListener) {
      if (!this._events.newListener) { return false; }
    }

    // Loop through the *_all* functions and invoke them.
    if (this._all) {
      var l = arguments.length;
      var args = new Array(l - 1);
      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
      for (i = 0, l = this._all.length; i < l; i++) {
        this.event = type;
        this._all[i].apply(this, args);
      }
    }

    // If there is no 'error' event listener then throw.
    if (type === 'error') {

      if (!this._all &&
        !this._events.error &&
        !(this.wildcard && this.listenerTree.error)) {

        if (arguments[1] instanceof Error) {
          throw arguments[1]; // Unhandled 'error' event
        } else {
          throw new Error("Uncaught, unspecified 'error' event.");
        }
        return false;
      }
    }

    var handler;

    if(this.wildcard) {
      handler = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
    }
    else {
      handler = this._events[type];
    }

    if (typeof handler === 'function') {
      this.event = type;
      if (arguments.length === 1) {
        handler.call(this);
      }
      else if (arguments.length > 1)
        switch (arguments.length) {
          case 2:
            handler.call(this, arguments[1]);
            break;
          case 3:
            handler.call(this, arguments[1], arguments[2]);
            break;
          // slower
          default:
            var l = arguments.length;
            var args = new Array(l - 1);
            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];
            handler.apply(this, args);
        }
      return true;
    }
    else if (handler) {
      var l = arguments.length;
      var args = new Array(l - 1);
      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];

      var listeners = handler.slice();
      for (var i = 0, l = listeners.length; i < l; i++) {
        this.event = type;
        listeners[i].apply(this, args);
      }
      return (listeners.length > 0) || !!this._all;
    }
    else {
      return !!this._all;
    }

  };

  EventEmitter.prototype.on = function(type, listener) {

    if (typeof type === 'function') {
      this.onAny(type);
      return this;
    }

    if (typeof listener !== 'function') {
      throw new Error('on only accepts instances of Function');
    }
    this._events || init.call(this);

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    this.emit('newListener', type, listener);

    if(this.wildcard) {
      growListenerTree.call(this, type, listener);
      return this;
    }

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    }
    else if(typeof this._events[type] === 'function') {
      // Adding the second element, need to change to array.
      this._events[type] = [this._events[type], listener];
    }
    else if (isArray(this._events[type])) {
      // If we've already got an array, just append.
      this._events[type].push(listener);

      // Check for listener leak
      if (!this._events[type].warned) {

        var m = defaultMaxListeners;

        if (typeof this._events.maxListeners !== 'undefined') {
          m = this._events.maxListeners;
        }

        if (m > 0 && this._events[type].length > m) {

          this._events[type].warned = true;
          console.error('(node) warning: possible EventEmitter memory ' +
                        'leak detected. %d listeners added. ' +
                        'Use emitter.setMaxListeners() to increase limit.',
                        this._events[type].length);
          console.trace();
        }
      }
    }
    return this;
  };

  EventEmitter.prototype.onAny = function(fn) {

    if (typeof fn !== 'function') {
      throw new Error('onAny only accepts instances of Function');
    }

    if(!this._all) {
      this._all = [];
    }

    // Add the function to the event listener collection.
    this._all.push(fn);
    return this;
  };

  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  EventEmitter.prototype.off = function(type, listener) {
    if (typeof listener !== 'function') {
      throw new Error('removeListener only takes instances of Function');
    }

    var handlers,leafs=[];

    if(this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
    }
    else {
      // does not use listeners(), so no side effect of creating _events[type]
      if (!this._events[type]) return this;
      handlers = this._events[type];
      leafs.push({_listeners:handlers});
    }

    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
      var leaf = leafs[iLeaf];
      handlers = leaf._listeners;
      if (isArray(handlers)) {

        var position = -1;

        for (var i = 0, length = handlers.length; i < length; i++) {
          if (handlers[i] === listener ||
            (handlers[i].listener && handlers[i].listener === listener) ||
            (handlers[i]._origin && handlers[i]._origin === listener)) {
            position = i;
            break;
          }
        }

        if (position < 0) {
          continue;
        }

        if(this.wildcard) {
          leaf._listeners.splice(position, 1);
        }
        else {
          this._events[type].splice(position, 1);
        }

        if (handlers.length === 0) {
          if(this.wildcard) {
            delete leaf._listeners;
          }
          else {
            delete this._events[type];
          }
        }
        return this;
      }
      else if (handlers === listener ||
        (handlers.listener && handlers.listener === listener) ||
        (handlers._origin && handlers._origin === listener)) {
        if(this.wildcard) {
          delete leaf._listeners;
        }
        else {
          delete this._events[type];
        }
      }
    }

    return this;
  };

  EventEmitter.prototype.offAny = function(fn) {
    var i = 0, l = 0, fns;
    if (fn && this._all && this._all.length > 0) {
      fns = this._all;
      for(i = 0, l = fns.length; i < l; i++) {
        if(fn === fns[i]) {
          fns.splice(i, 1);
          return this;
        }
      }
    } else {
      this._all = [];
    }
    return this;
  };

  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

  EventEmitter.prototype.removeAllListeners = function(type) {
    if (arguments.length === 0) {
      !this._events || init.call(this);
      return this;
    }

    if(this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);

      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
        var leaf = leafs[iLeaf];
        leaf._listeners = null;
      }
    }
    else {
      if (!this._events[type]) return this;
      this._events[type] = null;
    }
    return this;
  };

  EventEmitter.prototype.listeners = function(type) {
    if(this.wildcard) {
      var handlers = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
      return handlers;
    }

    this._events || init.call(this);

    if (!this._events[type]) this._events[type] = [];
    if (!isArray(this._events[type])) {
      this._events[type] = [this._events[type]];
    }
    return this._events[type];
  };

  EventEmitter.prototype.listenersAny = function() {

    if(this._all) {
      return this._all;
    }
    else {
      return [];
    }

  };

  if (typeof define === 'function' && define.amd) {
     // AMD. Register as an anonymous module.
    define(function() {
      return EventEmitter;
    });
  } else if (typeof exports === 'object') {
    // CommonJS
    exports.EventEmitter2 = EventEmitter;
  }
  else {
    // Browser global.
    window.EventEmitter2 = EventEmitter;
  }
}();

},{}],"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js":[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js":[function(require,module,exports){
(function (process,global){
/*
	This is rot.js, the ROguelike Toolkit in JavaScript.
	Version 0.6~dev, generated on Tue Mar  3 11:42:50 CET 2015.
*/
/**
 * Add objects for Node.js environment
 */
window = global;
document = {
	body: {
		appendChild: function(child) {},
		scrollLeft: 0,
		scrollTop: 0
	},
	createElement: function(type) {
		var canvas;
		return canvas = {
			getBoundingClientRect: function() {
				var rect;
				return rect = {
					left: 0,
					top: 0
				};
			},
			getContext: function(type) {
				var context;
				return context = {
					_termcolor: null,
					beginPath: function() {},
					canvas: canvas,
					drawImage: function(a, b, c, d, e, f, g, h, i) {},
					fill: function() {},
					fillRect: function(x, y, w, h) {
						if(this._termcolor !== null) {
							var clearCmd = this._termcolor.clearToAnsi(this.fillStyle);
							process.stdout.write(clearCmd);
						}
					},
					fillStyle: "#000",
					fillText: function(chs, x, y) {},
					font: "monospace",
					lineTo: function(x, y) {},
					measureText: function(ch) {
						var result;
						return result = {
							width: 12
						};
					},
					moveTo: function(x, y) {},
					textAlign: "center",
					textBaseline: "middle"
				};
			},
			height: 0,
			style: {
				left: "100px",
				position: "absolute",
				top: "100px",
				visibility: "hidden"
			},
			width: 0
		};
	},
	documentElement: {
		scrollLeft: 0,
		scrollTop: 0
	}
};
/**
 * @namespace Top-level ROT namespace
 */
var ROT = {
	/**
	 * @returns {bool} Is rot.js supported by this browser?
	 */
	isSupported: function() {
		return !!(document.createElement("canvas").getContext && Function.prototype.bind);
	},

	/** Default with for display and map generators */
	DEFAULT_WIDTH: 80,
	/** Default height for display and map generators */
	DEFAULT_HEIGHT: 25,

	/** Directional constants. Ordering is important! */
	DIRS: {
		"4": [
			[ 0, -1],
			[ 1,  0],
			[ 0,  1],
			[-1,  0]
		],
		"8": [
			[ 0, -1],
			[ 1, -1],
			[ 1,  0],
			[ 1,  1],
			[ 0,  1],
			[-1,  1],
			[-1,  0],
			[-1, -1]
		],
		"6": [
			[-1, -1],
			[ 1, -1],
			[ 2,  0],
			[ 1,  1],
			[-1,  1],
			[-2,  0]
		]
	},

	/** Cancel key. */
	VK_CANCEL: 3, 
	/** Help key. */
	VK_HELP: 6, 
	/** Backspace key. */
	VK_BACK_SPACE: 8, 
	/** Tab key. */
	VK_TAB: 9, 
	/** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */
	VK_CLEAR: 12, 
	/** Return/enter key on the main keyboard. */
	VK_RETURN: 13, 
	/** Reserved, but not used. */
	VK_ENTER: 14, 
	/** Shift key. */
	VK_SHIFT: 16, 
	/** Control key. */
	VK_CONTROL: 17, 
	/** Alt (Option on Mac) key. */
	VK_ALT: 18, 
	/** Pause key. */
	VK_PAUSE: 19, 
	/** Caps lock. */
	VK_CAPS_LOCK: 20, 
	/** Escape key. */
	VK_ESCAPE: 27, 
	/** Space bar. */
	VK_SPACE: 32, 
	/** Page Up key. */
	VK_PAGE_UP: 33, 
	/** Page Down key. */
	VK_PAGE_DOWN: 34, 
	/** End key. */
	VK_END: 35, 
	/** Home key. */
	VK_HOME: 36, 
	/** Left arrow. */
	VK_LEFT: 37, 
	/** Up arrow. */
	VK_UP: 38, 
	/** Right arrow. */
	VK_RIGHT: 39, 
	/** Down arrow. */
	VK_DOWN: 40, 
	/** Print Screen key. */
	VK_PRINTSCREEN: 44, 
	/** Ins(ert) key. */
	VK_INSERT: 45, 
	/** Del(ete) key. */
	VK_DELETE: 46, 
	/***/
	VK_0: 48,
	/***/
	VK_1: 49,
	/***/
	VK_2: 50,
	/***/
	VK_3: 51,
	/***/
	VK_4: 52,
	/***/
	VK_5: 53,
	/***/
	VK_6: 54,
	/***/
	VK_7: 55,
	/***/
	VK_8: 56,
	/***/
	VK_9: 57,
	/** Colon (:) key. Requires Gecko 15.0 */
	VK_COLON: 58, 
	/** Semicolon (;) key. */
	VK_SEMICOLON: 59, 
	/** Less-than (<) key. Requires Gecko 15.0 */
	VK_LESS_THAN: 60, 
	/** Equals (=) key. */
	VK_EQUALS: 61, 
	/** Greater-than (>) key. Requires Gecko 15.0 */
	VK_GREATER_THAN: 62, 
	/** Question mark (?) key. Requires Gecko 15.0 */
	VK_QUESTION_MARK: 63, 
	/** Atmark (@) key. Requires Gecko 15.0 */
	VK_AT: 64, 
	/***/
	VK_A: 65,
	/***/
	VK_B: 66,
	/***/
	VK_C: 67,
	/***/
	VK_D: 68,
	/***/
	VK_E: 69,
	/***/
	VK_F: 70,
	/***/
	VK_G: 71,
	/***/
	VK_H: 72,
	/***/
	VK_I: 73,
	/***/
	VK_J: 74,
	/***/
	VK_K: 75,
	/***/
	VK_L: 76,
	/***/
	VK_M: 77,
	/***/
	VK_N: 78,
	/***/
	VK_O: 79,
	/***/
	VK_P: 80,
	/***/
	VK_Q: 81,
	/***/
	VK_R: 82,
	/***/
	VK_S: 83,
	/***/
	VK_T: 84,
	/***/
	VK_U: 85,
	/***/
	VK_V: 86,
	/***/
	VK_W: 87,
	/***/
	VK_X: 88,
	/***/
	VK_Y: 89,
	/***/
	VK_Z: 90,
	/***/
	VK_CONTEXT_MENU: 93,
	/** 0 on the numeric keypad. */
	VK_NUMPAD0: 96, 
	/** 1 on the numeric keypad. */
	VK_NUMPAD1: 97, 
	/** 2 on the numeric keypad. */
	VK_NUMPAD2: 98, 
	/** 3 on the numeric keypad. */
	VK_NUMPAD3: 99, 
	/** 4 on the numeric keypad. */
	VK_NUMPAD4: 100, 
	/** 5 on the numeric keypad. */
	VK_NUMPAD5: 101, 
	/** 6 on the numeric keypad. */
	VK_NUMPAD6: 102, 
	/** 7 on the numeric keypad. */
	VK_NUMPAD7: 103, 
	/** 8 on the numeric keypad. */
	VK_NUMPAD8: 104, 
	/** 9 on the numeric keypad. */
	VK_NUMPAD9: 105, 
	/** * on the numeric keypad. */
	VK_MULTIPLY: 106,
	/** + on the numeric keypad. */
	VK_ADD: 107, 
	/***/
	VK_SEPARATOR: 108,
	/** - on the numeric keypad. */
	VK_SUBTRACT: 109, 
	/** Decimal point on the numeric keypad. */
	VK_DECIMAL: 110, 
	/** / on the numeric keypad. */
	VK_DIVIDE: 111, 
	/** F1 key. */
	VK_F1: 112, 
	/** F2 key. */
	VK_F2: 113, 
	/** F3 key. */
	VK_F3: 114, 
	/** F4 key. */
	VK_F4: 115, 
	/** F5 key. */
	VK_F5: 116, 
	/** F6 key. */
	VK_F6: 117, 
	/** F7 key. */
	VK_F7: 118, 
	/** F8 key. */
	VK_F8: 119, 
	/** F9 key. */
	VK_F9: 120, 
	/** F10 key. */
	VK_F10: 121, 
	/** F11 key. */
	VK_F11: 122, 
	/** F12 key. */
	VK_F12: 123, 
	/** F13 key. */
	VK_F13: 124, 
	/** F14 key. */
	VK_F14: 125, 
	/** F15 key. */
	VK_F15: 126, 
	/** F16 key. */
	VK_F16: 127, 
	/** F17 key. */
	VK_F17: 128, 
	/** F18 key. */
	VK_F18: 129, 
	/** F19 key. */
	VK_F19: 130, 
	/** F20 key. */
	VK_F20: 131, 
	/** F21 key. */
	VK_F21: 132, 
	/** F22 key. */
	VK_F22: 133, 
	/** F23 key. */
	VK_F23: 134, 
	/** F24 key. */
	VK_F24: 135, 
	/** Num Lock key. */
	VK_NUM_LOCK: 144, 
	/** Scroll Lock key. */
	VK_SCROLL_LOCK: 145, 
	/** Circumflex (^) key. Requires Gecko 15.0 */
	VK_CIRCUMFLEX: 160, 
	/** Exclamation (!) key. Requires Gecko 15.0 */
	VK_EXCLAMATION: 161, 
	/** Double quote () key. Requires Gecko 15.0 */
	VK_DOUBLE_QUOTE: 162, 
	/** Hash (#) key. Requires Gecko 15.0 */
	VK_HASH: 163, 
	/** Dollar sign ($) key. Requires Gecko 15.0 */
	VK_DOLLAR: 164, 
	/** Percent (%) key. Requires Gecko 15.0 */
	VK_PERCENT: 165, 
	/** Ampersand (&) key. Requires Gecko 15.0 */
	VK_AMPERSAND: 166, 
	/** Underscore (_) key. Requires Gecko 15.0 */
	VK_UNDERSCORE: 167, 
	/** Open parenthesis (() key. Requires Gecko 15.0 */
	VK_OPEN_PAREN: 168, 
	/** Close parenthesis ()) key. Requires Gecko 15.0 */
	VK_CLOSE_PAREN: 169, 
	/* Asterisk (*) key. Requires Gecko 15.0 */
	VK_ASTERISK: 170,
	/** Plus (+) key. Requires Gecko 15.0 */
	VK_PLUS: 171, 
	/** Pipe (|) key. Requires Gecko 15.0 */
	VK_PIPE: 172, 
	/** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */
	VK_HYPHEN_MINUS: 173, 
	/** Open curly bracket ({) key. Requires Gecko 15.0 */
	VK_OPEN_CURLY_BRACKET: 174, 
	/** Close curly bracket (}) key. Requires Gecko 15.0 */
	VK_CLOSE_CURLY_BRACKET: 175, 
	/** Tilde (~) key. Requires Gecko 15.0 */
	VK_TILDE: 176, 
	/** Comma (,) key. */
	VK_COMMA: 188, 
	/** Period (.) key. */
	VK_PERIOD: 190, 
	/** Slash (/) key. */
	VK_SLASH: 191, 
	/** Back tick (`) key. */
	VK_BACK_QUOTE: 192, 
	/** Open square bracket ([) key. */
	VK_OPEN_BRACKET: 219, 
	/** Back slash (\) key. */
	VK_BACK_SLASH: 220, 
	/** Close square bracket (]) key. */
	VK_CLOSE_BRACKET: 221, 
	/** Quote (''') key. */
	VK_QUOTE: 222, 
	/** Meta key on Linux, Command key on Mac. */
	VK_META: 224, 
	/** AltGr key on Linux. Requires Gecko 15.0 */
	VK_ALTGR: 225, 
	/** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */
	VK_WIN: 91, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_KANA: 21, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_HANGUL: 21, 
	/** 英数 key on Japanese Mac keyboard. Requires Gecko 15.0 */
	VK_EISU: 22, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_JUNJA: 23, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_FINAL: 24, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_HANJA: 25, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_KANJI: 25, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_CONVERT: 28, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_NONCONVERT: 29, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_ACCEPT: 30, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_MODECHANGE: 31, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_SELECT: 41, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_PRINT: 42, 
	/** Linux support for this keycode was added in Gecko 4.0. */
	VK_EXECUTE: 43, 
	/** Linux support for this keycode was added in Gecko 4.0.	 */
	VK_SLEEP: 95 
};
/**
 * @namespace
 * Contains text tokenization and breaking routines
 */
ROT.Text = {
	RE_COLORS: /%([bc]){([^}]*)}/g,

	/* token types */
	TYPE_TEXT:		0,
	TYPE_NEWLINE:	1,
	TYPE_FG:		2,
	TYPE_BG:		3,

	/**
	 * Measure size of a resulting text block
	 */
	measure: function(str, maxWidth) {
		var result = {width:0, height:1};
		var tokens = this.tokenize(str, maxWidth);
		var lineWidth = 0;

		for (var i=0;i<tokens.length;i++) {
			var token = tokens[i];
			switch (token.type) {
				case this.TYPE_TEXT:
					lineWidth += token.value.length;
				break;

				case this.TYPE_NEWLINE:
					result.height++;
					result.width = Math.max(result.width, lineWidth);
					lineWidth = 0;
				break;
			}
		}
		result.width = Math.max(result.width, lineWidth);

		return result;
	},

	/**
	 * Convert string to a series of a formatting commands
	 */
	tokenize: function(str, maxWidth) {
		var result = [];

		/* first tokenization pass - split texts and color formatting commands */
		var offset = 0;
		str.replace(this.RE_COLORS, function(match, type, name, index) {
			/* string before */
			var part = str.substring(offset, index);
			if (part.length) {
				result.push({
					type: ROT.Text.TYPE_TEXT,
					value: part
				});
			}

			/* color command */
			result.push({
				type: (type == "c" ? ROT.Text.TYPE_FG : ROT.Text.TYPE_BG),
				value: name.trim()
			});

			offset = index + match.length;
			return "";
		});

		/* last remaining part */
		var part = str.substring(offset);
		if (part.length) {
			result.push({
				type: ROT.Text.TYPE_TEXT,
				value: part
			});
		}

		return this._breakLines(result, maxWidth);
	},

	/* insert line breaks into first-pass tokenized data */
	_breakLines: function(tokens, maxWidth) {
		if (!maxWidth) { maxWidth = Infinity; };

		var i = 0;
		var lineLength = 0;
		var lastTokenWithSpace = -1;

		while (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */
			var token = tokens[i];
			if (token.type == ROT.Text.TYPE_NEWLINE) { /* reset */
				lineLength = 0; 
				lastTokenWithSpace = -1;
			}
			if (token.type != ROT.Text.TYPE_TEXT) { /* skip non-text tokens */
				i++;
				continue; 
			}

			/* remove spaces at the beginning of line */
			while (lineLength == 0 && token.value.charAt(0) == " ") { token.value = token.value.substring(1); }

			/* forced newline? insert two new tokens after this one */
			var index = token.value.indexOf("\n");
			if (index != -1) { 
				token.value = this._breakInsideToken(tokens, i, index, true); 

				/* if there are spaces at the end, we must remove them (we do not want the line too long) */
				var arr = token.value.split("");
				while (arr[arr.length-1] == " ") { arr.pop(); }
				token.value = arr.join("");
			}

			/* token degenerated? */
			if (!token.value.length) {
				tokens.splice(i, 1);
				continue;
			}

			if (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */

				/* is it possible to break within this token? */
				var index = -1;
				while (1) {
					var nextIndex = token.value.indexOf(" ", index+1);
					if (nextIndex == -1) { break; }
					if (lineLength + nextIndex > maxWidth) { break; }
					index = nextIndex;
				}

				if (index != -1) { /* break at space within this one */
					token.value = this._breakInsideToken(tokens, i, index, true);
				} else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */
					var token = tokens[lastTokenWithSpace];
					var breakIndex = token.value.lastIndexOf(" ");
					token.value = this._breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);
					i = lastTokenWithSpace;
				} else { /* force break in this token */
					token.value = this._breakInsideToken(tokens, i, maxWidth-lineLength, false);
				}

			} else { /* line not long, continue */
				lineLength += token.value.length;
				if (token.value.indexOf(" ") != -1) { lastTokenWithSpace = i; }
			}
			
			i++; /* advance to next token */
		}


		tokens.push({type: ROT.Text.TYPE_NEWLINE}); /* insert fake newline to fix the last text line */

		/* remove trailing space from text tokens before newlines */
		var lastTextToken = null;
		for (var i=0;i<tokens.length;i++) {
			var token = tokens[i];
			switch (token.type) {
				case ROT.Text.TYPE_TEXT: lastTextToken = token; break;
				case ROT.Text.TYPE_NEWLINE: 
					if (lastTextToken) { /* remove trailing space */
						var arr = lastTextToken.value.split("");
						while (arr[arr.length-1] == " ") { arr.pop(); }
						lastTextToken.value = arr.join("");
					}
					lastTextToken = null;
				break;
			}
		}

		tokens.pop(); /* remove fake token */

		return tokens;
	},

	/**
	 * Create new tokens and insert them into the stream
	 * @param {object[]} tokens
	 * @param {int} tokenIndex Token being processed
	 * @param {int} breakIndex Index within current token's value
	 * @param {bool} removeBreakChar Do we want to remove the breaking character?
	 * @returns {string} remaining unbroken token value
	 */
	_breakInsideToken: function(tokens, tokenIndex, breakIndex, removeBreakChar) {
		var newBreakToken = {
			type: ROT.Text.TYPE_NEWLINE
		}
		var newTextToken = {
			type: ROT.Text.TYPE_TEXT,
			value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))
		}
		tokens.splice(tokenIndex+1, 0, newBreakToken, newTextToken);
		return tokens[tokenIndex].value.substring(0, breakIndex);
	}
}
/**
 * @returns {any} Randomly picked item, null when length=0
 */
Array.prototype.random = function() {
	if (!this.length) { return null; }
	return this[Math.floor(ROT.RNG.getUniform() * this.length)];
}

/**
 * @returns {array} New array with randomized items
 * FIXME destroys this!
 */
Array.prototype.randomize = function() {
	var result = [];
	while (this.length) {
		var index = this.indexOf(this.random());
		result.push(this.splice(index, 1)[0]);
	}
	return result;
}
/**
 * Always positive modulus
 * @param {int} n Modulus
 * @returns {int} this modulo n
 */
Number.prototype.mod = function(n) {
	return ((this%n)+n)%n;
}
/**
 * @returns {string} First letter capitalized
 */
String.prototype.capitalize = function() {
	return this.charAt(0).toUpperCase() + this.substring(1);
}

/** 
 * Left pad
 * @param {string} [character="0"]
 * @param {int} [count=2]
 */
String.prototype.lpad = function(character, count) {
	var ch = character || "0";
	var cnt = count || 2;

	var s = "";
	while (s.length < (cnt - this.length)) { s += ch; }
	s = s.substring(0, cnt-this.length);
	return s+this;
}

/** 
 * Right pad
 * @param {string} [character="0"]
 * @param {int} [count=2]
 */
String.prototype.rpad = function(character, count) {
	var ch = character || "0";
	var cnt = count || 2;

	var s = "";
	while (s.length < (cnt - this.length)) { s += ch; }
	s = s.substring(0, cnt-this.length);
	return this+s;
}

/**
 * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.
 * @param {string} template
 * @param {any} [argv]
 */
String.format = function(template) {
	var map = String.format.map;
	var args = Array.prototype.slice.call(arguments, 1);

	var replacer = function(match, group1, group2, index) {
		if (template.charAt(index-1) == "%") { return match.substring(1); }
		if (!args.length) { return match; }
		var obj = args[0];

		var group = group1 || group2;
		var parts = group.split(",");
		var name = parts.shift();
		var method = map[name.toLowerCase()];
		if (!method) { return match; }

		var obj = args.shift();
		var replaced = obj[method].apply(obj, parts);

		var first = name.charAt(0);
		if (first != first.toLowerCase()) { replaced = replaced.capitalize(); }

		return replaced;
	}
	return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);
}

String.format.map = {
	"s": "toString"
}

/**
 * Convenience shortcut to String.format(this)
 */
String.prototype.format = function() {
	var args = Array.prototype.slice.call(arguments);
	args.unshift(this);
	return String.format.apply(String, args);
}

if (!Object.create) {  
	/**
	 * ES5 Object.create
	 */
	Object.create = function(o) {  
		var tmp = function() {};
		tmp.prototype = o;
		return new tmp();
	};  
}  
/**
 * Sets prototype of this function to an instance of parent function
 * @param {function} parent
 */
Function.prototype.extend = function(parent) {
	this.prototype = Object.create(parent.prototype);
	this.prototype.constructor = this;
	return this;
}
if (typeof window != "undefined") {
	window.requestAnimationFrame =
		window.requestAnimationFrame
		|| window.mozRequestAnimationFrame
		|| window.webkitRequestAnimationFrame
		|| window.oRequestAnimationFrame
		|| window.msRequestAnimationFrame
		|| function(cb) { return setTimeout(cb, 1000/60); };

	window.cancelAnimationFrame =
		window.cancelAnimationFrame
		|| window.mozCancelAnimationFrame
		|| window.webkitCancelAnimationFrame
		|| window.oCancelAnimationFrame
		|| window.msCancelAnimationFrame
		|| function(id) { return clearTimeout(id); };
}
/**
 * @class Visual map display
 * @param {object} [options]
 * @param {int} [options.width=ROT.DEFAULT_WIDTH]
 * @param {int} [options.height=ROT.DEFAULT_HEIGHT]
 * @param {int} [options.fontSize=15]
 * @param {string} [options.fontFamily="monospace"]
 * @param {string} [options.fontStyle=""] bold/italic/none/both
 * @param {string} [options.fg="#ccc"]
 * @param {string} [options.bg="#000"]
 * @param {float} [options.spacing=1]
 * @param {float} [options.border=0]
 * @param {string} [options.layout="rect"]
 * @param {int} [options.tileWidth=32]
 * @param {int} [options.tileHeight=32]
 * @param {object} [options.tileMap={}]
 * @param {image} [options.tileSet=null]
 * @param {image} [options.tileColorize=false]
 */
ROT.Display = function(options) {
	var canvas = document.createElement("canvas");
	this._context = canvas.getContext("2d");
	this._data = {};
	this._dirty = false; /* false = nothing, true = all, object = dirty cells */
	this._options = {};
	this._backend = null;
	
	var defaultOptions = {
		width: ROT.DEFAULT_WIDTH,
		height: ROT.DEFAULT_HEIGHT,
		transpose: false,
		layout: "rect",
		fontSize: 15,
		spacing: 1,
		border: 0,
		fontFamily: "monospace",
		fontStyle: "",
		fg: "#ccc",
		bg: "#000",
		tileWidth: 32,
		tileHeight: 32,
		tileMap: {},
		tileSet: null,
		tileColorize: false,
		termColor: "xterm"
	};
	for (var p in options) { defaultOptions[p] = options[p]; }
	this.setOptions(defaultOptions);
	this.DEBUG = this.DEBUG.bind(this);

	this._tick = this._tick.bind(this);
	requestAnimationFrame(this._tick);
}

/**
 * Debug helper, ideal as a map generator callback. Always bound to this.
 * @param {int} x
 * @param {int} y
 * @param {int} what
 */
ROT.Display.prototype.DEBUG = function(x, y, what) {
	var colors = [this._options.bg, this._options.fg];
	this.draw(x, y, null, null, colors[what % colors.length]);
}

/**
 * Clear the whole display (cover it with background color)
 */
ROT.Display.prototype.clear = function() {
	this._data = {};
	this._dirty = true;
}

/**
 * @see ROT.Display
 */
ROT.Display.prototype.setOptions = function(options) {
	for (var p in options) { this._options[p] = options[p]; }
	if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {
		if (options.layout) { 
			this._backend = new ROT.Display[options.layout.capitalize()](this._context);
		}

		var font = (this._options.fontStyle ? this._options.fontStyle + " " : "") + this._options.fontSize + "px " + this._options.fontFamily;
		this._context.font = font;
		this._backend.compute(this._options);
		this._context.font = font;
		this._context.textAlign = "center";
		this._context.textBaseline = "middle";
		this._dirty = true;
	}
	return this;
}

/**
 * Returns currently set options
 * @returns {object} Current options object 
 */
ROT.Display.prototype.getOptions = function() {
	return this._options;
}

/**
 * Returns the DOM node of this display
 * @returns {node} DOM node
 */
ROT.Display.prototype.getContainer = function() {
	return this._context.canvas;
}

/**
 * Compute the maximum width/height to fit into a set of given constraints
 * @param {int} availWidth Maximum allowed pixel width
 * @param {int} availHeight Maximum allowed pixel height
 * @returns {int[2]} cellWidth,cellHeight
 */
ROT.Display.prototype.computeSize = function(availWidth, availHeight) {
	return this._backend.computeSize(availWidth, availHeight, this._options);
}

/**
 * Compute the maximum font size to fit into a set of given constraints
 * @param {int} availWidth Maximum allowed pixel width
 * @param {int} availHeight Maximum allowed pixel height
 * @returns {int} fontSize
 */
ROT.Display.prototype.computeFontSize = function(availWidth, availHeight) {
	return this._backend.computeFontSize(availWidth, availHeight, this._options);
}

/**
 * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.
 * @param {Event} e event
 * @returns {int[2]} -1 for values outside of the canvas
 */
ROT.Display.prototype.eventToPosition = function(e) {
	if (e.touches) {
		var x = e.touches[0].clientX;
		var y = e.touches[0].clientY;
	} else {
		var x = e.clientX;
		var y = e.clientY;
	}

	var rect = this._context.canvas.getBoundingClientRect();
	x -= rect.left;
	y -= rect.top;
	
	if (x < 0 || y < 0 || x >= this._context.canvas.width || y >= this._context.canvas.height) { return [-1, -1]; }

	return this._backend.eventToPosition(x, y);
}

/**
 * @param {int} x
 * @param {int} y
 * @param {string || string[]} ch One or more chars (will be overlapping themselves)
 * @param {string} [fg] foreground color
 * @param {string} [bg] background color
 */
ROT.Display.prototype.draw = function(x, y, ch, fg, bg) {
	if (!fg) { fg = this._options.fg; }
	if (!bg) { bg = this._options.bg; }
	this._data[x+","+y] = [x, y, ch, fg, bg];
	
	if (this._dirty === true) { return; } /* will already redraw everything */
	if (!this._dirty) { this._dirty = {}; } /* first! */
	this._dirty[x+","+y] = true;
}

/**
 * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.
 * @param {int} x
 * @param {int} y
 * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.
 * @param {int} [maxWidth] wrap at what width?
 * @returns {int} lines drawn
 */
ROT.Display.prototype.drawText = function(x, y, text, maxWidth) {
	var fg = null;
	var bg = null;
	var cx = x;
	var cy = y;
	var lines = 1;
	if (!maxWidth) { maxWidth = this._options.width-x; }

	var tokens = ROT.Text.tokenize(text, maxWidth);

	while (tokens.length) { /* interpret tokenized opcode stream */
		var token = tokens.shift();
		switch (token.type) {
			case ROT.Text.TYPE_TEXT:
				var isSpace = isPrevSpace = isFullWidth = isPrevFullWidth = false;
				for (var i=0;i<token.value.length;i++) {
					var cc = token.value.charCodeAt(i);
					var c = token.value.charAt(i);
					// Assign to `true` when the current char is full-width.
					isFullWidth = (cc > 0xff && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) && cc > 0xffee;
					// Current char is space, whatever full-width or half-width both are OK.
					isSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);
					// The previous char is full-width and
					// current char is nether half-width nor a space.
					if (isPrevFullWidth && !isFullWidth && !isSpace) { cx++; } // add an extra position
					// The current char is full-width and
					// the previous char is not a space.
					if(isFullWidth && !isPrevSpace) { cx++; } // add an extra position
					this.draw(cx++, cy, c, fg, bg);
					isPrevSpace = isSpace;
					isPrevFullWidth = isFullWidth;
				}
			break;

			case ROT.Text.TYPE_FG:
				fg = token.value || null;
			break;

			case ROT.Text.TYPE_BG:
				bg = token.value || null;
			break;

			case ROT.Text.TYPE_NEWLINE:
				cx = x;
				cy++;
				lines++
			break;
		}
	}

	return lines;
}

/**
 * Timer tick: update dirty parts
 */
ROT.Display.prototype._tick = function() {
	requestAnimationFrame(this._tick);

	if (!this._dirty) { return; }

	if (this._dirty === true) { /* draw all */
		this._context.fillStyle = this._options.bg;
		this._context.fillRect(0, 0, this._context.canvas.width, this._context.canvas.height);

		for (var id in this._data) { /* redraw cached data */
			this._draw(id, false);
		}

	} else { /* draw only dirty */
		for (var key in this._dirty) {
			this._draw(key, true);
		}
	}

	this._dirty = false;
}

/**
 * @param {string} key What to draw
 * @param {bool} clearBefore Is it necessary to clean before?
 */
ROT.Display.prototype._draw = function(key, clearBefore) {
	var data = this._data[key];
	if (data[4] != this._options.bg) { clearBefore = true; }

	this._backend.draw(data, clearBefore);
}
/**
 * @class Abstract display backend module
 * @private
 */
ROT.Display.Backend = function(context) {
	this._context = context;
}

ROT.Display.Backend.prototype.compute = function(options) {
}

ROT.Display.Backend.prototype.draw = function(data, clearBefore) {
}

ROT.Display.Backend.prototype.computeSize = function(availWidth, availHeight) {
}

ROT.Display.Backend.prototype.computeFontSize = function(availWidth, availHeight) {
}

ROT.Display.Backend.prototype.eventToPosition = function(x, y) {
}
/**
 * @class Rectangular backend
 * @private
 */
ROT.Display.Rect = function(context) {
	ROT.Display.Backend.call(this, context);
	
	this._spacingX = 0;
	this._spacingY = 0;
	this._canvasCache = {};
	this._options = {};
}
ROT.Display.Rect.extend(ROT.Display.Backend);

ROT.Display.Rect.cache = false;

ROT.Display.Rect.prototype.compute = function(options) {
	this._canvasCache = {};
	this._options = options;

	var charWidth = Math.ceil(this._context.measureText("W").width);
	this._spacingX = Math.ceil(options.spacing * charWidth);
	this._spacingY = Math.ceil(options.spacing * options.fontSize);
	this._context.canvas.width = options.width * this._spacingX;
	this._context.canvas.height = options.height * this._spacingY;
}

ROT.Display.Rect.prototype.draw = function(data, clearBefore) {
	if (this.constructor.cache) {
		this._drawWithCache(data, clearBefore);
	} else {
		this._drawNoCache(data, clearBefore);
	}
}

ROT.Display.Rect.prototype._drawWithCache = function(data, clearBefore) {
	var x = data[0];
	var y = data[1];
	var ch = data[2];
	var fg = data[3];
	var bg = data[4];

	var hash = ""+ch+fg+bg;
	if (hash in this._canvasCache) {
		var canvas = this._canvasCache[hash];
	} else {
		var b = this._options.border;
		var canvas = document.createElement("canvas");
		var ctx = canvas.getContext("2d");
		canvas.width = this._spacingX;
		canvas.height = this._spacingY;
		ctx.fillStyle = bg;
		ctx.fillRect(b, b, canvas.width-b, canvas.height-b);
		
		if (ch) {
			ctx.fillStyle = fg;
			ctx.font = this._context.font;
			ctx.textAlign = "center";
			ctx.textBaseline = "middle";

			var chars = [].concat(ch);
			for (var i=0;i<chars.length;i++) {
				ctx.fillText(chars[i], this._spacingX/2, this._spacingY/2);
			}
		}
		this._canvasCache[hash] = canvas;
	}
	
	this._context.drawImage(canvas, x*this._spacingX, y*this._spacingY);
}

ROT.Display.Rect.prototype._drawNoCache = function(data, clearBefore) {
	var x = data[0];
	var y = data[1];
	var ch = data[2];
	var fg = data[3];
	var bg = data[4];

	if (clearBefore) { 
		var b = this._options.border;
		this._context.fillStyle = bg;
		this._context.fillRect(x*this._spacingX + b, y*this._spacingY + b, this._spacingX - b, this._spacingY - b);
	}
	
	if (!ch) { return; }

	this._context.fillStyle = fg;

	var chars = [].concat(ch);
	for (var i=0;i<chars.length;i++) {
		this._context.fillText(chars[i], (x+0.5) * this._spacingX, (y+0.5) * this._spacingY);
	}
}

ROT.Display.Rect.prototype.computeSize = function(availWidth, availHeight) {
	var width = Math.floor(availWidth / this._spacingX);
	var height = Math.floor(availHeight / this._spacingY);
	return [width, height];
}

ROT.Display.Rect.prototype.computeFontSize = function(availWidth, availHeight) {
	var boxWidth = Math.floor(availWidth / this._options.width);
	var boxHeight = Math.floor(availHeight / this._options.height);

	/* compute char ratio */
	var oldFont = this._context.font;
	this._context.font = "100px " + this._options.fontFamily;
	var width = Math.ceil(this._context.measureText("W").width);
	this._context.font = oldFont;
	var ratio = width / 100;
		
	var widthFraction = ratio * boxHeight / boxWidth;
	if (widthFraction > 1) { /* too wide with current aspect ratio */
		boxHeight = Math.floor(boxHeight / widthFraction);
	}
	return Math.floor(boxHeight / this._options.spacing);
}

ROT.Display.Rect.prototype.eventToPosition = function(x, y) {
	return [Math.floor(x/this._spacingX), Math.floor(y/this._spacingY)];
}
/**
 * @class Hexagonal backend
 * @private
 */
ROT.Display.Hex = function(context) {
	ROT.Display.Backend.call(this, context);

	this._spacingX = 0;
	this._spacingY = 0;
	this._hexSize = 0;
	this._options = {};
}
ROT.Display.Hex.extend(ROT.Display.Backend);

ROT.Display.Hex.prototype.compute = function(options) {
	this._options = options;

	/* FIXME char size computation does not respect transposed hexes */
	var charWidth = Math.ceil(this._context.measureText("W").width);
	this._hexSize = Math.floor(options.spacing * (options.fontSize + charWidth/Math.sqrt(3)) / 2);
	this._spacingX = this._hexSize * Math.sqrt(3) / 2;
	this._spacingY = this._hexSize * 1.5;

	if (options.transpose) {
		var xprop = "height";
		var yprop = "width";
	} else {
		var xprop = "width";
		var yprop = "height";
	}
	this._context.canvas[xprop] = Math.ceil( (options.width + 1) * this._spacingX );
	this._context.canvas[yprop] = Math.ceil( (options.height - 1) * this._spacingY + 2*this._hexSize );
}

ROT.Display.Hex.prototype.draw = function(data, clearBefore) {
	var x = data[0];
	var y = data[1];
	var ch = data[2];
	var fg = data[3];
	var bg = data[4];

	var px = [
		(x+1) * this._spacingX,
		y * this._spacingY + this._hexSize
	];
	if (this._options.transpose) { px.reverse(); }

	if (clearBefore) { 
		this._context.fillStyle = bg;
		this._fill(px[0], px[1]);
	}
	
	if (!ch) { return; }

	this._context.fillStyle = fg;

	var chars = [].concat(ch);
	for (var i=0;i<chars.length;i++) {
		this._context.fillText(chars[i], px[0], px[1]);
	}
}

ROT.Display.Hex.prototype.computeSize = function(availWidth, availHeight) {
	if (this._options.transpose) {
		availWidth += availHeight;
		availHeight = availWidth - availHeight;
		availWidth -= availHeight;
	}

	var width = Math.floor(availWidth / this._spacingX) - 1;
	var height = Math.floor((availHeight - 2*this._hexSize) / this._spacingY + 1);
	return [width, height];
}

ROT.Display.Hex.prototype.computeFontSize = function(availWidth, availHeight) {
	if (this._options.transpose) {
		availWidth += availHeight;
		availHeight = availWidth - availHeight;
		availWidth -= availHeight;
	}

	var hexSizeWidth = 2*availWidth / ((this._options.width+1) * Math.sqrt(3)) - 1;
	var hexSizeHeight = availHeight / (2 + 1.5*(this._options.height-1));
	var hexSize = Math.min(hexSizeWidth, hexSizeHeight);

	/* compute char ratio */
	var oldFont = this._context.font;
	this._context.font = "100px " + this._options.fontFamily;
	var width = Math.ceil(this._context.measureText("W").width);
	this._context.font = oldFont;
	var ratio = width / 100;

	hexSize = Math.floor(hexSize)+1; /* closest larger hexSize */

	/* FIXME char size computation does not respect transposed hexes */
	var fontSize = 2*hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));

	/* closest smaller fontSize */
	return Math.ceil(fontSize)-1;
}

ROT.Display.Hex.prototype.eventToPosition = function(x, y) {
	if (this._options.transpose) {
		x += y;
		y = x-y;
		x -= y;
		var prop = "width";
	} else {
		var prop = "height";
	}
	var size = this._context.canvas[prop] / this._options[prop];
	y = Math.floor(y/size);

	if (y.mod(2)) { /* odd row */
		x -= this._spacingX;
		x = 1 + 2*Math.floor(x/(2*this._spacingX));
	} else {
		x = 2*Math.floor(x/(2*this._spacingX));
	}
	
	return [x, y];
}

/**
 * Arguments are pixel values. If "transposed" mode is enabled, then these two are already swapped.
 */
ROT.Display.Hex.prototype._fill = function(cx, cy) {
	var a = this._hexSize;
	var b = this._options.border;
	
	this._context.beginPath();

	if (this._options.transpose) {
		this._context.moveTo(cx-a+b,	cy);
		this._context.lineTo(cx-a/2+b,	cy+this._spacingX-b);
		this._context.lineTo(cx+a/2-b,	cy+this._spacingX-b);
		this._context.lineTo(cx+a-b,	cy);
		this._context.lineTo(cx+a/2-b,	cy-this._spacingX+b);
		this._context.lineTo(cx-a/2+b,	cy-this._spacingX+b);
		this._context.lineTo(cx-a+b,	cy);
	} else {
		this._context.moveTo(cx,					cy-a+b);
		this._context.lineTo(cx+this._spacingX-b,	cy-a/2+b);
		this._context.lineTo(cx+this._spacingX-b,	cy+a/2-b);
		this._context.lineTo(cx,					cy+a-b);
		this._context.lineTo(cx-this._spacingX+b,	cy+a/2-b);
		this._context.lineTo(cx-this._spacingX+b,	cy-a/2+b);
		this._context.lineTo(cx,					cy-a+b);
	}
	this._context.fill();
}
/**
 * @class Tile backend
 * @private
 */
ROT.Display.Tile = function(context) {
	ROT.Display.Rect.call(this, context);
	
	this._options = {};
	this._colorCanvas = document.createElement("canvas");
}
ROT.Display.Tile.extend(ROT.Display.Rect);

ROT.Display.Tile.prototype.compute = function(options) {
	this._options = options;
	this._context.canvas.width = options.width * options.tileWidth;
	this._context.canvas.height = options.height * options.tileHeight;
	this._colorCanvas.width = options.tileWidth;
	this._colorCanvas.height = options.tileHeight;
}

ROT.Display.Tile.prototype.draw = function(data, clearBefore) {
	var x = data[0];
	var y = data[1];
	var ch = data[2];
	var fg = data[3];
	var bg = data[4];

	var tileWidth = this._options.tileWidth;
	var tileHeight = this._options.tileHeight;

	if (clearBefore) {
		var b = this._options.border;
		this._context.fillStyle = bg;

		if (this._options.tileColor) {this._context.clearRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);} else {
			this._context.fillRect(x*tileWidth, y*tileHeight, tileWidth, tileHeight);
		}
		
	}

	if (!ch) { return; }

	var chars = [].concat(ch);
	for (var i=0;i<chars.length;i++) {
		var tile = this._options.tileMap[chars[i]];
		if (!tile) { throw new Error("Char '" + chars[i] + "' not found in tileMap"); }
		
		if (this._options.tileColorize) { /* apply colorization */
			var canvas = this._colorCanvas;
			var context = canvas.getContext("2d");
			context.clearRect(0, 0, tileWidth, tileHeight);

			context.drawImage(
				this._options.tileSet,
				tile[0], tile[1], tileWidth, tileHeight,
				0, 0, tileWidth, tileHeight
			);

			if (fg != "transparent") {
				context.fillStyle = fg;
				context.globalCompositeOperation = "source-atop";
				context.fillRect(0, 0, tileWidth, tileHeight);
			}

			if (bg != "transparent") {
				context.fillStyle = bg;
				context.globalCompositeOperation = "destination-over";
				context.fillRect(0, 0, tileWidth, tileHeight);
			}

			this._context.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);

		} else { /* no colorizing, easy */
			this._context.drawImage(
				this._options.tileSet,
				tile[0], tile[1], tileWidth, tileHeight,
				x*tileWidth, y*tileHeight, tileWidth, tileHeight
			);
		}
	}
}

ROT.Display.Tile.prototype.computeSize = function(availWidth, availHeight) {
	var width = Math.floor(availWidth / this._options.tileWidth);
	var height = Math.floor(availHeight / this._options.tileHeight);
	return [width, height];
}

ROT.Display.Tile.prototype.computeFontSize = function(availWidth, availHeight) {
	var width = Math.floor(availWidth / this._options.width);
	var height = Math.floor(availHeight / this._options.height);
	return [width, height];
}

ROT.Display.Tile.prototype.eventToPosition = function(x, y) {
	return [Math.floor(x/this._options.tileWidth), Math.floor(y/this._options.tileHeight)];
}
/**
 * @namespace
 * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baagøe.
 * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.
 */
ROT.RNG = {
	/**
	 * @returns {number} 
	 */
	getSeed: function() {
		return this._seed;
	},

	/**
	 * @param {number} seed Seed the number generator
	 */
	setSeed: function(seed) {
		seed = (seed < 1 ? 1/seed : seed);

		this._seed = seed;
		this._s0 = (seed >>> 0) * this._frac;

		seed = (seed*69069 + 1) >>> 0;
		this._s1 = seed * this._frac;

		seed = (seed*69069 + 1) >>> 0;
		this._s2 = seed * this._frac;

		this._c = 1;
		return this;
	},

	/**
	 * @returns {float} Pseudorandom value [0,1), uniformly distributed
	 */
	getUniform: function() {
		var t = 2091639 * this._s0 + this._c * this._frac;
		this._s0 = this._s1;
		this._s1 = this._s2;
		this._c = t | 0;
		this._s2 = t - this._c;
		return this._s2;
	},

	/**
	 * @param {int} lowerBound The lower end of the range to return a value from, inclusive
	 * @param {int} upperBound The upper end of the range to return a value from, inclusive
	 * @returns {int} Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value
	 */
	getUniformInt: function(lowerBound, upperBound) {
		var max = Math.max(lowerBound, upperBound);
		var min = Math.min(lowerBound, upperBound);
		return Math.floor(this.getUniform() * (max - min + 1)) + min;
	},

	/**
	 * @param {float} [mean=0] Mean value
	 * @param {float} [stddev=1] Standard deviation. ~95% of the absolute values will be lower than 2*stddev.
	 * @returns {float} A normally distributed pseudorandom value
	 */
	getNormal: function(mean, stddev) {
		do {
			var u = 2*this.getUniform()-1;
			var v = 2*this.getUniform()-1;
			var r = u*u + v*v;
		} while (r > 1 || r == 0);

		var gauss = u * Math.sqrt(-2*Math.log(r)/r);
		return (mean || 0) + gauss*(stddev || 1);
	},

	/**
	 * @returns {int} Pseudorandom value [1,100] inclusive, uniformly distributed
	 */
	getPercentage: function() {
		return 1 + Math.floor(this.getUniform()*100);
	},
	
	/**
	 * @param {object} data key=whatever, value=weight (relative probability)
	 * @returns {string} whatever
	 */
	getWeightedValue: function(data) {
		var avail = [];
		var total = 0;
		
		for (var id in data) {
			total += data[id];
		}
		var random = Math.floor(this.getUniform()*total);
		
		var part = 0;
		for (var id in data) {
			part += data[id];
			if (random < part) { return id; }
		}
		
		return null;
	},

	/**
	 * Get RNG state. Useful for storing the state and re-setting it via setState.
	 * @returns {?} Internal state
	 */
	getState: function() {
		return [this._s0, this._s1, this._s2, this._c];
	},

	/**
	 * Set a previously retrieved state.
	 * @param {?} state
	 */
	setState: function(state) {
		this._s0 = state[0];
		this._s1 = state[1];
		this._s2 = state[2];
		this._c  = state[3];
		return this;
	},

	/**
	 * Returns a cloned RNG
	 */
	clone: function() {
		var clone = Object.create(this);
		clone.setState(this.getState());
		return clone;
	},

	_s0: 0,
	_s1: 0,
	_s2: 0,
	_c: 0,
	_frac: 2.3283064365386963e-10 /* 2^-32 */
}

ROT.RNG.setSeed(Date.now());
/**
 * @class (Markov process)-based string generator. 
 * Copied from a <a href="http://www.roguebasin.roguelikedevelopment.org/index.php?title=Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme">RogueBasin article</a>. 
 * Offers configurable order and prior.
 * @param {object} [options]
 * @param {bool} [options.words=false] Use word mode?
 * @param {int} [options.order=3]
 * @param {float} [options.prior=0.001]
 */
ROT.StringGenerator = function(options) {
	this._options = {
		words: false,
		order: 3,
		prior: 0.001
	}
	for (var p in options) { this._options[p] = options[p]; }

	this._boundary = String.fromCharCode(0);
	this._suffix = this._boundary;
	this._prefix = [];
	for (var i=0;i<this._options.order;i++) { this._prefix.push(this._boundary); }

	this._priorValues = {};
	this._priorValues[this._boundary] = this._options.prior;

	this._data = {};
}

/**
 * Remove all learning data
 */
ROT.StringGenerator.prototype.clear = function() {
	this._data = {};
	this._priorValues = {};
}

/**
 * @returns {string} Generated string
 */
ROT.StringGenerator.prototype.generate = function() {
	var result = [this._sample(this._prefix)];
	while (result[result.length-1] != this._boundary) {
		result.push(this._sample(result));
	}
	return this._join(result.slice(0, -1));
}

/**
 * Observe (learn) a string from a training set
 */
ROT.StringGenerator.prototype.observe = function(string) {
	var tokens = this._split(string);

	for (var i=0; i<tokens.length; i++) {
		this._priorValues[tokens[i]] = this._options.prior;
	}

	tokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */

	for (var i=this._options.order; i<tokens.length; i++) {
		var context = tokens.slice(i-this._options.order, i);
		var event = tokens[i];
		for (var j=0; j<context.length; j++) {
			var subcontext = context.slice(j);
			this._observeEvent(subcontext, event);
		}
	}
}

ROT.StringGenerator.prototype.getStats = function() {
	var parts = [];

	var priorCount = 0;
	for (var p in this._priorValues) { priorCount++; }
	priorCount--; /* boundary */
	parts.push("distinct samples: " + priorCount);

	var dataCount = 0;
	var eventCount = 0;
	for (var p in this._data) { 
		dataCount++; 
		for (var key in this._data[p]) {
			eventCount++;
		}
	}
	parts.push("dictionary size (contexts): " + dataCount);
	parts.push("dictionary size (events): " + eventCount);

	return parts.join(", ");
}

/**
 * @param {string}
 * @returns {string[]}
 */
ROT.StringGenerator.prototype._split = function(str) {
	return str.split(this._options.words ? /\s+/ : "");
}

/**
 * @param {string[]}
 * @returns {string} 
 */
ROT.StringGenerator.prototype._join = function(arr) {
	return arr.join(this._options.words ? " " : "");
}

/**
 * @param {string[]} context
 * @param {string} event
 */
ROT.StringGenerator.prototype._observeEvent = function(context, event) {
	var key = this._join(context);
	if (!(key in this._data)) { this._data[key] = {}; }
	var data = this._data[key];

	if (!(event in data)) { data[event] = 0; }
	data[event]++;
}

/**
 * @param {string[]}
 * @returns {string}
 */
ROT.StringGenerator.prototype._sample = function(context) {
	context = this._backoff(context);
	var key = this._join(context);
	var data = this._data[key];

	var available = {};

	if (this._options.prior) {
		for (var event in this._priorValues) { available[event] = this._priorValues[event]; }
		for (var event in data) { available[event] += data[event]; }
	} else { 
		available = data;
	}

	return this._pickRandom(available);
}

/**
 * @param {string[]}
 * @returns {string[]}
 */
ROT.StringGenerator.prototype._backoff = function(context) {
	if (context.length > this._options.order) {
		context = context.slice(-this._options.order);
	} else if (context.length < this._options.order) {
		context = this._prefix.slice(0, this._options.order - context.length).concat(context);
	}

	while (!(this._join(context) in this._data) && context.length > 0) { context = context.slice(1); }

	return context;
}


ROT.StringGenerator.prototype._pickRandom = function(data) {
	var total = 0;
	
	for (var id in data) {
		total += data[id];
	}
	var random = ROT.RNG.getUniform()*total;
	
	var part = 0;
	for (var id in data) {
		part += data[id];
		if (random < part) { return id; }
	}
}
/**
 * @class Generic event queue: stores events and retrieves them based on their time
 */
ROT.EventQueue = function() {
	this._time = 0;
	this._events = [];
	this._eventTimes = [];
}

/**
 * @returns {number} Elapsed time
 */
ROT.EventQueue.prototype.getTime = function() {
	return this._time;
}

/**
 * Clear all scheduled events
 */
ROT.EventQueue.prototype.clear = function() {
	this._events = [];
	this._eventTimes = [];
	return this;
}

/**
 * @param {?} event
 * @param {number} time
 */
ROT.EventQueue.prototype.add = function(event, time) {
	var index = this._events.length;
	for (var i=0;i<this._eventTimes.length;i++) {
		if (this._eventTimes[i] > time) {
			index = i;
			break;
		}
	}

	this._events.splice(index, 0, event);
	this._eventTimes.splice(index, 0, time);
}

/**
 * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.
 * @returns {? || null} The event previously added by addEvent, null if no event available
 */
ROT.EventQueue.prototype.get = function() {
	if (!this._events.length) { return null; }

	var time = this._eventTimes.splice(0, 1)[0];
	if (time > 0) { /* advance */
		this._time += time;
		for (var i=0;i<this._eventTimes.length;i++) { this._eventTimes[i] -= time; }
	}

	return this._events.splice(0, 1)[0];
}

/**
 * Remove an event from the queue
 * @param {?} event
 * @returns {bool} success?
 */
ROT.EventQueue.prototype.remove = function(event) {
	var index = this._events.indexOf(event);
	if (index == -1) { return false }
	this._remove(index);
	return true;
}

/**
 * Remove an event from the queue
 * @param {int} index
 */
ROT.EventQueue.prototype._remove = function(index) {
	this._events.splice(index, 1);
	this._eventTimes.splice(index, 1);
}
/**
 * @class Abstract scheduler
 */
ROT.Scheduler = function() {
	this._queue = new ROT.EventQueue();
	this._repeat = [];
	this._current = null;
}

/**
 * @see ROT.EventQueue#getTime
 */
ROT.Scheduler.prototype.getTime = function() {
	return this._queue.getTime();
}

/**
 * @param {?} item
 * @param {bool} repeat
 */
ROT.Scheduler.prototype.add = function(item, repeat) {
	if (repeat) { this._repeat.push(item); }
	return this;
}

/**
 * Clear all items
 */
ROT.Scheduler.prototype.clear = function() {
	this._queue.clear();
	this._repeat = [];
	this._current = null;
	return this;
}

/**
 * Remove a previously added item
 * @param {?} item
 * @returns {bool} successful?
 */
ROT.Scheduler.prototype.remove = function(item) {
	var result = this._queue.remove(item);

	var index = this._repeat.indexOf(item);
	if (index != -1) { this._repeat.splice(index, 1); }

	if (this._current == item) { this._current = null; }

	return result;
}

/**
 * Schedule next item
 * @returns {?}
 */
ROT.Scheduler.prototype.next = function() {
	this._current = this._queue.get();
	return this._current;
}
/**
 * @class Simple fair scheduler (round-robin style)
 * @augments ROT.Scheduler
 */
ROT.Scheduler.Simple = function() {
	ROT.Scheduler.call(this);
}
ROT.Scheduler.Simple.extend(ROT.Scheduler);

/**
 * @see ROT.Scheduler#add
 */
ROT.Scheduler.Simple.prototype.add = function(item, repeat) {
	this._queue.add(item, 0);
	return ROT.Scheduler.prototype.add.call(this, item, repeat);
}

/**
 * @see ROT.Scheduler#next
 */
ROT.Scheduler.Simple.prototype.next = function() {
	if (this._current && this._repeat.indexOf(this._current) != -1) {
		this._queue.add(this._current, 0);
	}
	return ROT.Scheduler.prototype.next.call(this);
}
/**
 * @class Speed-based scheduler
 * @augments ROT.Scheduler
 */
ROT.Scheduler.Speed = function() {
	ROT.Scheduler.call(this);
}
ROT.Scheduler.Speed.extend(ROT.Scheduler);

/**
 * @param {object} item anything with "getSpeed" method
 * @param {bool} repeat
 * @see ROT.Scheduler#add
 */
ROT.Scheduler.Speed.prototype.add = function(item, repeat) {
	this._queue.add(item, 1/item.getSpeed());
	return ROT.Scheduler.prototype.add.call(this, item, repeat);
}

/**
 * @see ROT.Scheduler#next
 */
ROT.Scheduler.Speed.prototype.next = function() {
	if (this._current && this._repeat.indexOf(this._current) != -1) {
		this._queue.add(this._current, 1/this._current.getSpeed());
	}
	return ROT.Scheduler.prototype.next.call(this);
}
/**
 * @class Action-based scheduler
 * @augments ROT.Scheduler
 */
ROT.Scheduler.Action = function() {
	ROT.Scheduler.call(this);
	this._defaultDuration = 1; /* for newly added */
	this._duration = this._defaultDuration; /* for this._current */
}
ROT.Scheduler.Action.extend(ROT.Scheduler);

/**
 * @param {object} item
 * @param {bool} repeat
 * @param {number} [time=1]
 * @see ROT.Scheduler#add
 */
ROT.Scheduler.Action.prototype.add = function(item, repeat, time) {
	this._queue.add(item, time || this._defaultDuration);
	return ROT.Scheduler.prototype.add.call(this, item, repeat);
}

ROT.Scheduler.Action.prototype.clear = function() {
	this._duration = this._defaultDuration;
	return ROT.Scheduler.prototype.clear.call(this);
}

ROT.Scheduler.Action.prototype.remove = function(item) {
	if (item == this._current) { this._duration = this._defaultDuration; }
	return ROT.Scheduler.prototype.remove.call(this, item);
}

/**
 * @see ROT.Scheduler#next
 */
ROT.Scheduler.Action.prototype.next = function() {
	if (this._current && this._repeat.indexOf(this._current) != -1) {
		this._queue.add(this._current, this._duration || this._defaultDuration);
		this._duration = this._defaultDuration;
	}
	return ROT.Scheduler.prototype.next.call(this);
}

/**
 * Set duration for the active item
 */
ROT.Scheduler.Action.prototype.setDuration = function(time) {
	if (this._current) { this._duration = time; }
	return this;
}
/**
 * @class Asynchronous main loop
 * @param {ROT.Scheduler} scheduler
 */
ROT.Engine = function(scheduler) {
	this._scheduler = scheduler;
	this._lock = 1;
}

/**
 * Start the main loop. When this call returns, the loop is locked.
 */
ROT.Engine.prototype.start = function() {
	return this.unlock();
}

/**
 * Interrupt the engine by an asynchronous action
 */
ROT.Engine.prototype.lock = function() {
	this._lock++;
	return this;
}

/**
 * Resume execution (paused by a previous lock)
 */
ROT.Engine.prototype.unlock = function() {
	if (!this._lock) { throw new Error("Cannot unlock unlocked engine"); }
	this._lock--;

	while (!this._lock) {
		var actor = this._scheduler.next();
		if (!actor) { return this.lock(); } /* no actors */
		var result = actor.act();
		if (result && result.then) { /* actor returned a "thenable", looks like a Promise */
			this.lock();
			result.then(this.unlock.bind(this));
		}
	}

	return this;
}
/**
 * @class Base map generator
 * @param {int} [width=ROT.DEFAULT_WIDTH]
 * @param {int} [height=ROT.DEFAULT_HEIGHT]
 */
ROT.Map = function(width, height) {
	this._width = width || ROT.DEFAULT_WIDTH;
	this._height = height || ROT.DEFAULT_HEIGHT;
};

ROT.Map.prototype.create = function(callback) {}

ROT.Map.prototype._fillMap = function(value) {
	var map = [];
	for (var i=0;i<this._width;i++) {
		map.push([]);
		for (var j=0;j<this._height;j++) { map[i].push(value); }
	}
	return map;
}
/**
 * @class Simple empty rectangular room
 * @augments ROT.Map
 */
ROT.Map.Arena = function(width, height) {
	ROT.Map.call(this, width, height);
}
ROT.Map.Arena.extend(ROT.Map);

ROT.Map.Arena.prototype.create = function(callback) {
	var w = this._width-1;
	var h = this._height-1;
	for (var i=0;i<=w;i++) {
		for (var j=0;j<=h;j++) {
			var empty = (i && j && i<w && j<h);
			callback(i, j, empty ? 0 : 1);
		}
	}
	return this;
}
/**
 * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method
 * @augments ROT.Map
 */
ROT.Map.DividedMaze = function(width, height) {
	ROT.Map.call(this, width, height);
	this._stack = [];
}
ROT.Map.DividedMaze.extend(ROT.Map);

ROT.Map.DividedMaze.prototype.create = function(callback) {
	var w = this._width;
	var h = this._height;
	
	this._map = [];
	
	for (var i=0;i<w;i++) {
		this._map.push([]);
		for (var j=0;j<h;j++) {
			var border = (i == 0 || j == 0 || i+1 == w || j+1 == h);
			this._map[i].push(border ? 1 : 0);
		}
	}
	
	this._stack = [
		[1, 1, w-2, h-2]
	];
	this._process();
	
	for (var i=0;i<w;i++) {
		for (var j=0;j<h;j++) {
			callback(i, j, this._map[i][j]);
		}
	}
	this._map = null;
	return this;
}

ROT.Map.DividedMaze.prototype._process = function() {
	while (this._stack.length) {
		var room = this._stack.shift(); /* [left, top, right, bottom] */
		this._partitionRoom(room);
	}
}

ROT.Map.DividedMaze.prototype._partitionRoom = function(room) {
	var availX = [];
	var availY = [];
	
	for (var i=room[0]+1;i<room[2];i++) {
		var top = this._map[i][room[1]-1];
		var bottom = this._map[i][room[3]+1];
		if (top && bottom && !(i % 2)) { availX.push(i); }
	}
	
	for (var j=room[1]+1;j<room[3];j++) {
		var left = this._map[room[0]-1][j];
		var right = this._map[room[2]+1][j];
		if (left && right && !(j % 2)) { availY.push(j); }
	}

	if (!availX.length || !availY.length) { return; }

	var x = availX.random();
	var y = availY.random();
	
	this._map[x][y] = 1;
	
	var walls = [];
	
	var w = []; walls.push(w); /* left part */
	for (var i=room[0]; i<x; i++) { 
		this._map[i][y] = 1;
		w.push([i, y]); 
	}
	
	var w = []; walls.push(w); /* right part */
	for (var i=x+1; i<=room[2]; i++) { 
		this._map[i][y] = 1;
		w.push([i, y]); 
	}

	var w = []; walls.push(w); /* top part */
	for (var j=room[1]; j<y; j++) { 
		this._map[x][j] = 1;
		w.push([x, j]); 
	}
	
	var w = []; walls.push(w); /* bottom part */
	for (var j=y+1; j<=room[3]; j++) { 
		this._map[x][j] = 1;
		w.push([x, j]); 
	}
		
	var solid = walls.random();
	for (var i=0;i<walls.length;i++) {
		var w = walls[i];
		if (w == solid) { continue; }
		
		var hole = w.random();
		this._map[hole[0]][hole[1]] = 0;
	}

	this._stack.push([room[0], room[1], x-1, y-1]); /* left top */
	this._stack.push([x+1, room[1], room[2], y-1]); /* right top */
	this._stack.push([room[0], y+1, x-1, room[3]]); /* left bottom */
	this._stack.push([x+1, y+1, room[2], room[3]]); /* right bottom */
}
/**
 * @class Icey's Maze generator
 * See http://www.roguebasin.roguelikedevelopment.org/index.php?title=Simple_maze for explanation
 * @augments ROT.Map
 */
ROT.Map.IceyMaze = function(width, height, regularity) {
	ROT.Map.call(this, width, height);
	this._regularity = regularity || 0;
}
ROT.Map.IceyMaze.extend(ROT.Map);

ROT.Map.IceyMaze.prototype.create = function(callback) {
	var width = this._width;
	var height = this._height;
	
	var map = this._fillMap(1);
	
	width -= (width % 2 ? 1 : 2);
	height -= (height % 2 ? 1 : 2);

	var cx = 0;
	var cy = 0;
	var nx = 0;
	var ny = 0;

	var done = 0;
	var blocked = false;
	var dirs = [
		[0, 0],
		[0, 0],
		[0, 0],
		[0, 0]
	];
	do {
		cx = 1 + 2*Math.floor(ROT.RNG.getUniform()*(width-1) / 2);
		cy = 1 + 2*Math.floor(ROT.RNG.getUniform()*(height-1) / 2);

		if (!done) { map[cx][cy] = 0; }
		
		if (!map[cx][cy]) {
			this._randomize(dirs);
			do {
				if (Math.floor(ROT.RNG.getUniform()*(this._regularity+1)) == 0) { this._randomize(dirs); }
				blocked = true;
				for (var i=0;i<4;i++) {
					nx = cx + dirs[i][0]*2;
					ny = cy + dirs[i][1]*2;
					if (this._isFree(map, nx, ny, width, height)) {
						map[nx][ny] = 0;
						map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;
						
						cx = nx;
						cy = ny;
						blocked = false;
						done++;
						break;
					}
				}
			} while (!blocked);
		}
	} while (done+1 < width*height/4);
	
	for (var i=0;i<this._width;i++) {
		for (var j=0;j<this._height;j++) {
			callback(i, j, map[i][j]);
		}
	}
	this._map = null;
	return this;
}

ROT.Map.IceyMaze.prototype._randomize = function(dirs) {
	for (var i=0;i<4;i++) {
		dirs[i][0] = 0;
		dirs[i][1] = 0;
	}
	
	switch (Math.floor(ROT.RNG.getUniform()*4)) {
		case 0:
			dirs[0][0] = -1; dirs[1][0] = 1;
			dirs[2][1] = -1; dirs[3][1] = 1;
		break;
		case 1:
			dirs[3][0] = -1; dirs[2][0] = 1;
			dirs[1][1] = -1; dirs[0][1] = 1;
		break;
		case 2:
			dirs[2][0] = -1; dirs[3][0] = 1;
			dirs[0][1] = -1; dirs[1][1] = 1;
		break;
		case 3:
			dirs[1][0] = -1; dirs[0][0] = 1;
			dirs[3][1] = -1; dirs[2][1] = 1;
		break;
	}
}

ROT.Map.IceyMaze.prototype._isFree = function(map, x, y, width, height) {
	if (x < 1 || y < 1 || x >= width || y >= height) { return false; }
	return map[x][y];
}
/**
 * @class Maze generator - Eller's algorithm
 * See http://homepages.cwi.nl/~tromp/maze.html for explanation
 * @augments ROT.Map
 */
ROT.Map.EllerMaze = function(width, height) {
	ROT.Map.call(this, width, height);
}
ROT.Map.EllerMaze.extend(ROT.Map);

ROT.Map.EllerMaze.prototype.create = function(callback) {
	var map = this._fillMap(1);
	var w = Math.ceil((this._width-2)/2);
	
	var rand = 9/24;
	
	var L = [];
	var R = [];
	
	for (var i=0;i<w;i++) {
		L.push(i);
		R.push(i);
	}
	L.push(w-1); /* fake stop-block at the right side */

	for (var j=1;j+3<this._height;j+=2) {
		/* one row */
		for (var i=0;i<w;i++) {
			/* cell coords (will be always empty) */
			var x = 2*i+1;
			var y = j;
			map[x][y] = 0;
			
			/* right connection */
			if (i != L[i+1] && ROT.RNG.getUniform() > rand) {
				this._addToList(i, L, R);
				map[x+1][y] = 0;
			}
			
			/* bottom connection */
			if (i != L[i] && ROT.RNG.getUniform() > rand) {
				/* remove connection */
				this._removeFromList(i, L, R);
			} else {
				/* create connection */
				map[x][y+1] = 0;
			}
		}
	}

	/* last row */
	for (var i=0;i<w;i++) {
		/* cell coords (will be always empty) */
		var x = 2*i+1;
		var y = j;
		map[x][y] = 0;
		
		/* right connection */
		if (i != L[i+1] && (i == L[i] || ROT.RNG.getUniform() > rand)) {
			/* dig right also if the cell is separated, so it gets connected to the rest of maze */
			this._addToList(i, L, R);
			map[x+1][y] = 0;
		}
		
		this._removeFromList(i, L, R);
	}
	
	for (var i=0;i<this._width;i++) {
		for (var j=0;j<this._height;j++) {
			callback(i, j, map[i][j]);
		}
	}
	
	return this;
}

/**
 * Remove "i" from its list
 */
ROT.Map.EllerMaze.prototype._removeFromList = function(i, L, R) {
	R[L[i]] = R[i];
	L[R[i]] = L[i];
	R[i] = i;
	L[i] = i;
}

/**
 * Join lists with "i" and "i+1"
 */
ROT.Map.EllerMaze.prototype._addToList = function(i, L, R) {
	R[L[i+1]] = R[i];
	L[R[i]] = L[i+1];
	R[i] = i+1;
	L[i+1] = i;
}
/**
 * @class Cellular automaton map generator
 * @augments ROT.Map
 * @param {int} [width=ROT.DEFAULT_WIDTH]
 * @param {int} [height=ROT.DEFAULT_HEIGHT]
 * @param {object} [options] Options
 * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space
 * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive
 * @param {int} [options.topology] Topology 4 or 6 or 8
 */
ROT.Map.Cellular = function(width, height, options) {
	ROT.Map.call(this, width, height);
	this._options = {
		born: [5, 6, 7, 8],
		survive: [4, 5, 6, 7, 8],
		topology: 8,
		connected: false
	};
	this.setOptions(options);
	
	this._dirs = ROT.DIRS[this._options.topology];
	this._map = this._fillMap(0);
}
ROT.Map.Cellular.extend(ROT.Map);

/**
 * Fill the map with random values
 * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full
 */
ROT.Map.Cellular.prototype.randomize = function(probability) {
	for (var i=0;i<this._width;i++) {
		for (var j=0;j<this._height;j++) {
			this._map[i][j] = (ROT.RNG.getUniform() < probability ? 1 : 0);
		}
	}
	return this;
}

/**
 * Change options.
 * @see ROT.Map.Cellular
 */
ROT.Map.Cellular.prototype.setOptions = function(options) {
	for (var p in options) { this._options[p] = options[p]; }
}

ROT.Map.Cellular.prototype.set = function(x, y, value) {
	this._map[x][y] = value;
}

ROT.Map.Cellular.prototype.create = function(callback) {
	var newMap = this._fillMap(0);
	var born = this._options.born;
	var survive = this._options.survive;


	for (var j=0;j<this._height;j++) {
		var widthStep = 1;
		var widthStart = 0;
		if (this._options.topology == 6) { 
			widthStep = 2;
			widthStart = j%2;
		}

		for (var i=widthStart; i<this._width; i+=widthStep) {

			var cur = this._map[i][j];
			var ncount = this._getNeighbors(i, j);
			
			if (cur && survive.indexOf(ncount) != -1) { /* survive */
				newMap[i][j] = 1;
			} else if (!cur && born.indexOf(ncount) != -1) { /* born */
				newMap[i][j] = 1;
			}			
		}
	}
	
	this._map = newMap;

	// optinially connect every space
	if (this._options.connected) {
		this._completeMaze();	
	}

	if (callback) { 
		for (var i = 0; i < this._width; i++) {
			for (var j = 0; j < this._height; j++) {
				callback(i, j, newMap[i][j]);
			}
		}
	}
}

/**
 * Get neighbor count at [i,j] in this._map
 */
ROT.Map.Cellular.prototype._getNeighbors = function(cx, cy) {
	var result = 0;
	for (var i=0;i<this._dirs.length;i++) {
		var dir = this._dirs[i];
		var x = cx + dir[0];
		var y = cy + dir[1];
		
		if (x < 0 || x >= this._width || x < 0 || y >= this._width) { continue; }
		result += (this._map[x][y] == 1 ? 1 : 0);
	}
	
	return result;
}

/**
 * Make sure every non-wall space is accessible.
 */
ROT.Map.Cellular.prototype._completeMaze = function() {
	var allFreeSpace = [];
	var notConnected = {};
	// find all free space
	for (var x = 0; x < this._width; x++) {
		for (var y = 0; y < this._height; y++) {
			if (this._freeSpace(x, y)) {
				var p = [x, y];
				notConnected[this._pointKey(p)] = p;
				allFreeSpace.push([x, y]);
			}
		}
	}
	var start = allFreeSpace[ROT.RNG.getUniformInt(0, allFreeSpace.length - 1)];

	var key = this._pointKey(start);
	var connected = {};
	connected[key] = start;
	delete notConnected[key]

	// find what's connected to the starting point
	this._findConnected(connected, notConnected, [start]);

	while(Object.keys(notConnected).length > 0) {

		// find two points from notConnected to connected
		var p = this._getFromTo(connected, notConnected);
		var from = p[0]; // notConnected
		var to = p[1]; // connected

		// find everything connected to the starting point
		var local = {};
		local[this._pointKey(from)] = from;
		this._findConnected(local, notConnected, [from], true);

		// connect to a connected square
		this._tunnelToConnected(to, from, connected, notConnected);

		// now all of local is connected
		for (var k in local) {
			var pp = local[k];
			this._map[pp[0]][pp[1]] = 0;
			connected[k] = pp;
			delete notConnected[k];
		}
	}
}

/**
 * Find random points to connect. Search for the closest point in the larger space. 
 * This is to minimize the length of the passage while maintaining good performance.
 */
ROT.Map.Cellular.prototype._getFromTo = function(connected, notConnected) {
	var from, to, d;
	var connectedKeys = Object.keys(connected);
	var notConnectedKeys = Object.keys(notConnected);
	for (var i = 0; i < 5; i++) {
		if (connectedKeys.length < notConnectedKeys.length) {
			var keys = connectedKeys;
			to = connected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]]
			from = this._getClosest(to, notConnected);
		} else {
			var keys = notConnectedKeys;
			from = notConnected[keys[ROT.RNG.getUniformInt(0, keys.length - 1)]]
			to = this._getClosest(from, connected);
		}
		d = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);
		if (d < 64) {
			break;
		}
	}
	// console.log(">>> connected=" + to + " notConnected=" + from + " dist=" + d);
	return [from, to];
}

ROT.Map.Cellular.prototype._getClosest = function(point, space) {
	var minPoint = null;
	var minDist = null;
	for (k in space) {
		var p = space[k];
		var d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);
		if (minDist == null || d < minDist) {
			minDist = d;
			minPoint = p;
		}
	}
	return minPoint;
}

ROT.Map.Cellular.prototype._findConnected = function(connected, notConnected, stack, keepNotConnected) {
	while(stack.length > 0) {
		var p = stack.splice(0, 1)[0];
		var tests = [
			[p[0] + 1, p[1]],
			[p[0] - 1, p[1]],
			[p[0],     p[1] + 1],
			[p[0],     p[1] - 1]
		];
		for (var i = 0; i < tests.length; i++) {
			var key = this._pointKey(tests[i]);
			if (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1])) {
				connected[key] = tests[i];
				if (!keepNotConnected) {
					delete notConnected[key];
				}
				stack.push(tests[i]);
			}
		}
	}
}

ROT.Map.Cellular.prototype._tunnelToConnected = function(to, from, connected, notConnected) {
	var key = this._pointKey(from);
	var a, b;
	if (from[0] < to[0]) {
		a = from;
		b = to;
	} else {
		a = to;
		b = from;
	}
	for (var xx = a[0]; xx <= b[0]; xx++) {
		this._map[xx][a[1]] = 0;
		var p = [xx, a[1]];
		var pkey = this._pointKey(p);
		connected[pkey] = p;
		delete notConnected[pkey];
	}

	// x is now fixed
	var x = b[0];

	if (from[1] < to[1]) {
		a = from;
		b = to;
	} else {
		a = to;
		b = from;
	}
	for (var yy = a[1]; yy < b[1]; yy++) {
		this._map[x][yy] = 0;
		var p = [x, yy];
		var pkey = this._pointKey(p);
		connected[pkey] = p;
		delete notConnected[pkey];
	}
}

ROT.Map.Cellular.prototype._freeSpace = function(x, y) {
	return x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] != 1;
}

ROT.Map.Cellular.prototype._pointKey = function(p) {
	return p[0] + "." + p[1];
}

/**
 * @class Dungeon map: has rooms and corridors
 * @augments ROT.Map
 */
ROT.Map.Dungeon = function(width, height) {
	ROT.Map.call(this, width, height);
	this._rooms = []; /* list of all rooms */
	this._corridors = [];
}
ROT.Map.Dungeon.extend(ROT.Map);

/**
 * Get all generated rooms
 * @returns {ROT.Map.Feature.Room[]}
 */
ROT.Map.Dungeon.prototype.getRooms = function() {
	return this._rooms;
}

/**
 * Get all generated corridors
 * @returns {ROT.Map.Feature.Corridor[]}
 */
ROT.Map.Dungeon.prototype.getCorridors = function() {
	return this._corridors;
}
/**
 * @class Random dungeon generator using human-like digging patterns.
 * Heavily based on Mike Anderson's ideas from the "Tyrant" algo, mentioned at 
 * http://www.roguebasin.roguelikedevelopment.org/index.php?title=Dungeon-Building_Algorithm.
 * @augments ROT.Map.Dungeon
 */
ROT.Map.Digger = function(width, height, options) {
	ROT.Map.Dungeon.call(this, width, height);
	
	this._options = {
		roomWidth: [3, 9], /* room minimum and maximum width */
		roomHeight: [3, 5], /* room minimum and maximum height */
		corridorLength: [3, 10], /* corridor minimum and maximum length */
		dugPercentage: 0.2, /* we stop after this percentage of level area has been dug out */
		timeLimit: 1000 /* we stop after this much time has passed (msec) */
	}
	for (var p in options) { this._options[p] = options[p]; }
	
	this._features = {
		"Room": 4,
		"Corridor": 4
	}
	this._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */
	this._walls = {}; /* these are available for digging */
	
	this._digCallback = this._digCallback.bind(this);
	this._canBeDugCallback = this._canBeDugCallback.bind(this);
	this._isWallCallback = this._isWallCallback.bind(this);
	this._priorityWallCallback = this._priorityWallCallback.bind(this);
}
ROT.Map.Digger.extend(ROT.Map.Dungeon);

/**
 * Create a map
 * @see ROT.Map#create
 */
ROT.Map.Digger.prototype.create = function(callback) {
	this._rooms = [];
	this._corridors = [];
	this._map = this._fillMap(1);
	this._walls = {};
	this._dug = 0;
	var area = (this._width-2) * (this._height-2);

	this._firstRoom();
	
	var t1 = Date.now();

	do {
		var t2 = Date.now();
		if (t2 - t1 > this._options.timeLimit) { break; }

		/* find a good wall */
		var wall = this._findWall();
		if (!wall) { break; } /* no more walls */
		
		var parts = wall.split(",");
		var x = parseInt(parts[0]);
		var y = parseInt(parts[1]);
		var dir = this._getDiggingDirection(x, y);
		if (!dir) { continue; } /* this wall is not suitable */
		
//		console.log("wall", x, y);

		/* try adding a feature */
		var featureAttempts = 0;
		do {
			featureAttempts++;
			if (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */
				//if (this._rooms.length + this._corridors.length == 2) { this._rooms[0].addDoor(x, y); } /* first room oficially has doors */
				this._removeSurroundingWalls(x, y);
				this._removeSurroundingWalls(x-dir[0], y-dir[1]);
				break; 
			}
		} while (featureAttempts < this._featureAttempts);
		
		var priorityWalls = 0;
		for (var id in this._walls) { 
			if (this._walls[id] > 1) { priorityWalls++; }
		}

	} while (this._dug/area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */

	this._addDoors();

	if (callback) {
		for (var i=0;i<this._width;i++) {
			for (var j=0;j<this._height;j++) {
				callback(i, j, this._map[i][j]);
			}
		}
	}
	
	this._walls = {};
	this._map = null;

	return this;
}

ROT.Map.Digger.prototype._digCallback = function(x, y, value) {
	if (value == 0 || value == 2) { /* empty */
		this._map[x][y] = 0;
		this._dug++;
	} else { /* wall */
		this._walls[x+","+y] = 1;
	}
}

ROT.Map.Digger.prototype._isWallCallback = function(x, y) {
	if (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }
	return (this._map[x][y] == 1);
}

ROT.Map.Digger.prototype._canBeDugCallback = function(x, y) {
	if (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }
	return (this._map[x][y] == 1);
}

ROT.Map.Digger.prototype._priorityWallCallback = function(x, y) {
	this._walls[x+","+y] = 2;
}

ROT.Map.Digger.prototype._firstRoom = function() {
	var cx = Math.floor(this._width/2);
	var cy = Math.floor(this._height/2);
	var room = ROT.Map.Feature.Room.createRandomCenter(cx, cy, this._options);
	this._rooms.push(room);
	room.create(this._digCallback);
}

/**
 * Get a suitable wall
 */
ROT.Map.Digger.prototype._findWall = function() {
	var prio1 = [];
	var prio2 = [];
	for (var id in this._walls) {
		var prio = this._walls[id];
		if (prio == 2) { 
			prio2.push(id); 
		} else {
			prio1.push(id);
		}
	}
	
	var arr = (prio2.length ? prio2 : prio1);
	if (!arr.length) { return null; } /* no walls :/ */
	
	var id = arr.random();
	delete this._walls[id];

	return id;
}

/**
 * Tries adding a feature
 * @returns {bool} was this a successful try?
 */
ROT.Map.Digger.prototype._tryFeature = function(x, y, dx, dy) {
	var feature = ROT.RNG.getWeightedValue(this._features);
	feature = ROT.Map.Feature[feature].createRandomAt(x, y, dx, dy, this._options);
	
	if (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {
//		console.log("not valid");
//		feature.debug();
		return false;
	}
	
	feature.create(this._digCallback);
//	feature.debug();

	if (feature instanceof ROT.Map.Feature.Room) { this._rooms.push(feature); }
	if (feature instanceof ROT.Map.Feature.Corridor) { 
		feature.createPriorityWalls(this._priorityWallCallback);
		this._corridors.push(feature); 
	}
	
	return true;
}

ROT.Map.Digger.prototype._removeSurroundingWalls = function(cx, cy) {
	var deltas = ROT.DIRS[4];

	for (var i=0;i<deltas.length;i++) {
		var delta = deltas[i];
		var x = cx + delta[0];
		var y = cy + delta[1];
		delete this._walls[x+","+y];
		var x = cx + 2*delta[0];
		var y = cy + 2*delta[1];
		delete this._walls[x+","+y];
	}
}

/**
 * Returns vector in "digging" direction, or false, if this does not exist (or is not unique)
 */
ROT.Map.Digger.prototype._getDiggingDirection = function(cx, cy) {
	var result = null;
	var deltas = ROT.DIRS[4];
	
	for (var i=0;i<deltas.length;i++) {
		var delta = deltas[i];
		var x = cx + delta[0];
		var y = cy + delta[1];
		
		if (x < 0 || y < 0 || x >= this._width || y >= this._width) { return null; }
		
		if (!this._map[x][y]) { /* there already is another empty neighbor! */
			if (result) { return null; }
			result = delta;
		}
	}
	
	/* no empty neighbor */
	if (!result) { return null; }
	
	return [-result[0], -result[1]];
}

/**
 * Find empty spaces surrounding rooms, and apply doors.
 */
ROT.Map.Digger.prototype._addDoors = function() {
	var data = this._map;
	var isWallCallback = function(x, y) {
		return (data[x][y] == 1);
	}
	for (var i = 0; i < this._rooms.length; i++ ) {
		var room = this._rooms[i];
		room.clearDoors();
		room.addDoors(isWallCallback);
	}
}
/**
 * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.
 * @augments ROT.Map.Dungeon
 */
ROT.Map.Uniform = function(width, height, options) {
	ROT.Map.Dungeon.call(this, width, height);

	this._options = {
		roomWidth: [3, 9], /* room minimum and maximum width */
		roomHeight: [3, 5], /* room minimum and maximum height */
		roomDugPercentage: 0.1, /* we stop after this percentage of level area has been dug out by rooms */
		timeLimit: 1000 /* we stop after this much time has passed (msec) */
	}
	for (var p in options) { this._options[p] = options[p]; }

	this._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */
	this._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */

	this._connected = []; /* list of already connected rooms */
	this._unconnected = []; /* list of remaining unconnected rooms */
	
	this._digCallback = this._digCallback.bind(this);
	this._canBeDugCallback = this._canBeDugCallback.bind(this);
	this._isWallCallback = this._isWallCallback.bind(this);
}
ROT.Map.Uniform.extend(ROT.Map.Dungeon);

/**
 * Create a map. If the time limit has been hit, returns null.
 * @see ROT.Map#create
 */
ROT.Map.Uniform.prototype.create = function(callback) {
	var t1 = Date.now();
	while (1) {
		var t2 = Date.now();
		if (t2 - t1 > this._options.timeLimit) { return null; } /* time limit! */
	
		this._map = this._fillMap(1);
		this._dug = 0;
		this._rooms = [];
		this._unconnected = [];
		this._generateRooms();
		if (this._rooms.length < 2) { continue; }
		if (this._generateCorridors()) { break; }
	}
	
	if (callback) {
		for (var i=0;i<this._width;i++) {
			for (var j=0;j<this._height;j++) {
				callback(i, j, this._map[i][j]);
			}
		}
	}
	
	return this;
}

/**
 * Generates a suitable amount of rooms
 */
ROT.Map.Uniform.prototype._generateRooms = function() {
	var w = this._width-2;
	var h = this._height-2;

	do {
		var room = this._generateRoom();
		if (this._dug/(w*h) > this._options.roomDugPercentage) { break; } /* achieved requested amount of free space */
	} while (room);

	/* either enough rooms, or not able to generate more of them :) */
}

/**
 * Try to generate one room
 */
ROT.Map.Uniform.prototype._generateRoom = function() {
	var count = 0;
	while (count < this._roomAttempts) {
		count++;
		
		var room = ROT.Map.Feature.Room.createRandom(this._width, this._height, this._options);
		if (!room.isValid(this._isWallCallback, this._canBeDugCallback)) { continue; }
		
		room.create(this._digCallback);
		this._rooms.push(room);
		return room;
	} 

	/* no room was generated in a given number of attempts */
	return null;
}

/**
 * Generates connectors beween rooms
 * @returns {bool} success Was this attempt successfull?
 */
ROT.Map.Uniform.prototype._generateCorridors = function() {
	var cnt = 0;
	while (cnt < this._corridorAttempts) {
		cnt++;
		this._corridors = [];

		/* dig rooms into a clear map */
		this._map = this._fillMap(1);
		for (var i=0;i<this._rooms.length;i++) { 
			var room = this._rooms[i];
			room.clearDoors();
			room.create(this._digCallback); 
		}

		this._unconnected = this._rooms.slice().randomize();
		this._connected = [];
		if (this._unconnected.length) { this._connected.push(this._unconnected.pop()); } /* first one is always connected */
		
		while (1) {
			/* 1. pick random connected room */
			var connected = this._connected.random();
			
			/* 2. find closest unconnected */
			var room1 = this._closestRoom(this._unconnected, connected);
			
			/* 3. connect it to closest connected */
			var room2 = this._closestRoom(this._connected, room1);
			
			var ok = this._connectRooms(room1, room2);
			if (!ok) { break; } /* stop connecting, re-shuffle */
			
			if (!this._unconnected.length) { return true; } /* done; no rooms remain */
		}
	}
	return false;
}

/**
 * For a given room, find the closest one from the list
 */
ROT.Map.Uniform.prototype._closestRoom = function(rooms, room) {
	var dist = Infinity;
	var center = room.getCenter();
	var result = null;
	
	for (var i=0;i<rooms.length;i++) {
		var r = rooms[i];
		var c = r.getCenter();
		var dx = c[0]-center[0];
		var dy = c[1]-center[1];
		var d = dx*dx+dy*dy;
		
		if (d < dist) {
			dist = d;
			result = r;
		}
	}
	
	return result;
}

ROT.Map.Uniform.prototype._connectRooms = function(room1, room2) {
	/*
		room1.debug();
		room2.debug();
	*/

	var center1 = room1.getCenter();
	var center2 = room2.getCenter();

	var diffX = center2[0] - center1[0];
	var diffY = center2[1] - center1[1];

	if (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */
		var dirIndex1 = (diffY > 0 ? 2 : 0);
		var dirIndex2 = (dirIndex1 + 2) % 4;
		var min = room2.getLeft();
		var max = room2.getRight();
		var index = 0;
	} else { /* first try connecting east-west walls */
		var dirIndex1 = (diffX > 0 ? 1 : 3);
		var dirIndex2 = (dirIndex1 + 2) % 4;
		var min = room2.getTop();
		var max = room2.getBottom();
		var index = 1;
	}

	var start = this._placeInWall(room1, dirIndex1); /* corridor will start here */
	if (!start) { return false; }

	if (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */
		var end = start.slice();
		var value = null;
		switch (dirIndex2) {
			case 0: value = room2.getTop()-1; break;
			case 1: value = room2.getRight()+1; break;
			case 2: value = room2.getBottom()+1; break;
			case 3: value = room2.getLeft()-1; break;
		}
		end[(index+1)%2] = value;
		this._digLine([start, end]);
		
	} else if (start[index] < min-1 || start[index] > max+1) { /* need to switch target wall (L-like) */

		var diff = start[index] - center2[index];
		switch (dirIndex2) {
			case 0:
			case 1:	var rotation = (diff < 0 ? 3 : 1); break;
			case 2:
			case 3:	var rotation = (diff < 0 ? 1 : 3); break;
		}
		dirIndex2 = (dirIndex2 + rotation) % 4;
		
		var end = this._placeInWall(room2, dirIndex2);
		if (!end) { return false; }

		var mid = [0, 0];
		mid[index] = start[index];
		var index2 = (index+1)%2;
		mid[index2] = end[index2];
		this._digLine([start, mid, end]);
		
	} else { /* use current wall pair, but adjust the line in the middle (S-like) */
	
		var index2 = (index+1)%2;
		var end = this._placeInWall(room2, dirIndex2);
		if (!end) { return; }
		var mid = Math.round((end[index2] + start[index2])/2);

		var mid1 = [0, 0];
		var mid2 = [0, 0];
		mid1[index] = start[index];
		mid1[index2] = mid;
		mid2[index] = end[index];
		mid2[index2] = mid;
		this._digLine([start, mid1, mid2, end]);
	}

	room1.addDoor(start[0], start[1]);
	room2.addDoor(end[0], end[1]);
	
	var index = this._unconnected.indexOf(room1);
	if (index != -1) {
		this._unconnected.splice(index, 1);
		this._connected.push(room1);
	}

	var index = this._unconnected.indexOf(room2);
	if (index != -1) {
		this._unconnected.splice(index, 1);
		this._connected.push(room2);
	}
	
	return true;
}

ROT.Map.Uniform.prototype._placeInWall = function(room, dirIndex) {
	var start = [0, 0];
	var dir = [0, 0];
	var length = 0;
	
	switch (dirIndex) {
		case 0:
			dir = [1, 0];
			start = [room.getLeft(), room.getTop()-1];
			length = room.getRight()-room.getLeft()+1;
		break;
		case 1:
			dir = [0, 1];
			start = [room.getRight()+1, room.getTop()];
			length = room.getBottom()-room.getTop()+1;
		break;
		case 2:
			dir = [1, 0];
			start = [room.getLeft(), room.getBottom()+1];
			length = room.getRight()-room.getLeft()+1;
		break;
		case 3:
			dir = [0, 1];
			start = [room.getLeft()-1, room.getTop()];
			length = room.getBottom()-room.getTop()+1;
		break;
	}
	
	var avail = [];
	var lastBadIndex = -2;

	for (var i=0;i<length;i++) {
		var x = start[0] + i*dir[0];
		var y = start[1] + i*dir[1];
		avail.push(null);
		
		var isWall = (this._map[x][y] == 1);
		if (isWall) {
			if (lastBadIndex != i-1) { avail[i] = [x, y]; }
		} else {
			lastBadIndex = i;
			if (i) { avail[i-1] = null; }
		}
	}
	
	for (var i=avail.length-1; i>=0; i--) {
		if (!avail[i]) { avail.splice(i, 1); }
	}
	return (avail.length ? avail.random() : null);
}

/**
 * Dig a polyline.
 */
ROT.Map.Uniform.prototype._digLine = function(points) {
	for (var i=1;i<points.length;i++) {
		var start = points[i-1];
		var end = points[i];
		var corridor = new ROT.Map.Feature.Corridor(start[0], start[1], end[0], end[1]);
		corridor.create(this._digCallback);
		this._corridors.push(corridor);
	}
}

ROT.Map.Uniform.prototype._digCallback = function(x, y, value) {
	this._map[x][y] = value;
	if (value == 0) { this._dug++; }
}

ROT.Map.Uniform.prototype._isWallCallback = function(x, y) {
	if (x < 0 || y < 0 || x >= this._width || y >= this._height) { return false; }
	return (this._map[x][y] == 1);
}

ROT.Map.Uniform.prototype._canBeDugCallback = function(x, y) {
	if (x < 1 || y < 1 || x+1 >= this._width || y+1 >= this._height) { return false; }
	return (this._map[x][y] == 1);
}

/**
 * @author hyakugei
 * @class Dungeon generator which uses the "orginal" Rogue dungeon generation algorithm. See http://kuoi.com/~kamikaze/GameDesign/art07_rogue_dungeon.php
 * @augments ROT.Map
 * @param {int} [width=ROT.DEFAULT_WIDTH]
 * @param {int} [height=ROT.DEFAULT_HEIGHT]
 * @param {object} [options] Options
 * @param {int[]} [options.cellWidth=3] Number of cells to create on the horizontal (number of rooms horizontally)
 * @param {int[]} [options.cellHeight=3] Number of cells to create on the vertical (number of rooms vertically) 
 * @param {int} [options.roomWidth] Room min and max width - normally set auto-magically via the constructor.
 * @param {int} [options.roomHeight] Room min and max height - normally set auto-magically via the constructor. 
 */
ROT.Map.Rogue = function(width, height, options) {
	ROT.Map.call(this, width, height);
	
	this._options = {
		cellWidth: 3,  // NOTE to self, these could probably work the same as the roomWidth/room Height values
		cellHeight: 3  //     ie. as an array with min-max values for each direction....
	}
	
	for (var p in options) { this._options[p] = options[p]; }
	
	/*
	Set the room sizes according to the over-all width of the map, 
	and the cell sizes. 
	*/
	
	if (!this._options.hasOwnProperty("roomWidth")) {
		this._options["roomWidth"] = this._calculateRoomSize(this._width, this._options["cellWidth"]);
	}
	if (!this._options.hasOwnProperty["roomHeight"]) {
		this._options["roomHeight"] = this._calculateRoomSize(this._height, this._options["cellHeight"]);
	}
	
}

ROT.Map.Rogue.extend(ROT.Map); 

/**
 * @see ROT.Map#create
 */
ROT.Map.Rogue.prototype.create = function(callback) {
	this.map = this._fillMap(1);
	this.rooms = [];
	this.connectedCells = [];
	
	this._initRooms();
	this._connectRooms();
	this._connectUnconnectedRooms();
	this._createRandomRoomConnections();
	this._createRooms();
	this._createCorridors();
	
	if (callback) {
		for (var i = 0; i < this._width; i++) {
			for (var j = 0; j < this._height; j++) {
				callback(i, j, this.map[i][j]);   
			}
		}
	}
	
	return this;
}

ROT.Map.Rogue.prototype._getRandomInt = function(min, max) {
	return Math.floor(ROT.RNG.getUniform() * (max - min + 1)) + min;
}

ROT.Map.Rogue.prototype._calculateRoomSize = function(size, cell) {
	var max = Math.floor((size/cell) * 0.8);
	var min = Math.floor((size/cell) * 0.25);
	if (min < 2) min = 2;
	if (max < 2) max = 2;
	return [min, max];
}

ROT.Map.Rogue.prototype._initRooms = function () { 
	// create rooms array. This is the "grid" list from the algo.  
	for (var i = 0; i < this._options.cellWidth; i++) {  
		this.rooms.push([]);
		for(var j = 0; j < this._options.cellHeight; j++) {
			this.rooms[i].push({"x":0, "y":0, "width":0, "height":0, "connections":[], "cellx":i, "celly":j});
		}
	}
}

ROT.Map.Rogue.prototype._connectRooms = function() {
	//pick random starting grid
	var cgx = this._getRandomInt(0, this._options.cellWidth-1);
	var cgy = this._getRandomInt(0, this._options.cellHeight-1);
	
	var idx;
	var ncgx;
	var ncgy;
	
	var found = false;
	var room;
	var otherRoom;
	
	// find  unconnected neighbour cells
	do {
	
		//var dirToCheck = [0,1,2,3,4,5,6,7];
		var dirToCheck = [0,2,4,6];
		dirToCheck = dirToCheck.randomize();
		
		do {
			found = false;
			idx = dirToCheck.pop();
			
			
			ncgx = cgx + ROT.DIRS[8][idx][0];
			ncgy = cgy + ROT.DIRS[8][idx][1];
			
			if(ncgx < 0 || ncgx >= this._options.cellWidth) continue;
			if(ncgy < 0 || ncgy >= this._options.cellHeight) continue;
			
			room = this.rooms[cgx][cgy];
			
			if(room["connections"].length > 0)
			{
				// as long as this room doesn't already coonect to me, we are ok with it. 
				if(room["connections"][0][0] == ncgx &&
				room["connections"][0][1] == ncgy)
				{
					break;
				}
			}
			
			otherRoom = this.rooms[ncgx][ncgy];
			
			if (otherRoom["connections"].length == 0) { 
				otherRoom["connections"].push([cgx,cgy]);
				
				this.connectedCells.push([ncgx, ncgy]);
				cgx = ncgx;
				cgy = ncgy;
				found = true;
			}
					
		} while (dirToCheck.length > 0 && found == false)
		
	} while (dirToCheck.length > 0)

}

ROT.Map.Rogue.prototype._connectUnconnectedRooms = function() {
	//While there are unconnected rooms, try to connect them to a random connected neighbor 
	//(if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).
	var cw = this._options.cellWidth;
	var ch = this._options.cellHeight;
	
	var randomConnectedCell;
	this.connectedCells = this.connectedCells.randomize();
	var room;
	var otherRoom;
	var validRoom;
	
	for (var i = 0; i < this._options.cellWidth; i++) {
		for (var j = 0; j < this._options.cellHeight; j++)  {
				
			room = this.rooms[i][j];
			
			if (room["connections"].length == 0) {
				var directions = [0,2,4,6];
				directions = directions.randomize();
				
				var validRoom = false;
				
				do {
					
					var dirIdx = directions.pop();
					var newI = i + ROT.DIRS[8][dirIdx][0];
					var newJ = j + ROT.DIRS[8][dirIdx][1];
					
					if (newI < 0 || newI >= cw || 
					newJ < 0 || newJ >= ch) {
						continue;
					}
					
					otherRoom = this.rooms[newI][newJ];
					
					validRoom = true;
					
					if (otherRoom["connections"].length == 0) {
						break;
					}
					
					for (var k = 0; k < otherRoom["connections"].length; k++) {
						if(otherRoom["connections"][k][0] == i && 
						otherRoom["connections"][k][1] == j) {
							validRoom = false;
							break;
						}
					}
					
					if (validRoom) break;
					
				} while (directions.length)
				
				if(validRoom) { 
					room["connections"].push( [otherRoom["cellx"], otherRoom["celly"]] );  
				} else {
					console.log("-- Unable to connect room.");
				}
			}
		}
	}
}

ROT.Map.Rogue.prototype._createRandomRoomConnections = function(connections) {
	// Empty for now. 
}


ROT.Map.Rogue.prototype._createRooms = function() {
	// Create Rooms 
	
	var w = this._width;
	var h = this._height;
	
	var cw = this._options.cellWidth;
	var ch = this._options.cellHeight;
	
	var cwp = Math.floor(this._width / cw);
	var chp = Math.floor(this._height / ch);
	
	var roomw;
	var roomh;
	var roomWidth = this._options["roomWidth"];
	var roomHeight = this._options["roomHeight"];
	var sx;
	var sy;
	var tx;
	var ty;
	var otherRoom;
	
	for (var i = 0; i < cw; i++) {
		for (var j = 0; j < ch; j++) {
			sx = cwp * i;
			sy = chp * j;
			
			if (sx == 0) sx = 1;
			if (sy == 0) sy = 1;
			
			roomw = this._getRandomInt(roomWidth[0], roomWidth[1]);
			roomh = this._getRandomInt(roomHeight[0], roomHeight[1]);
			
			if (j > 0) {
				otherRoom = this.rooms[i][j-1];
				while (sy - (otherRoom["y"] + otherRoom["height"] ) < 3) {
					sy++;
				}
			}
			
			if (i > 0) {
				otherRoom = this.rooms[i-1][j];
				while(sx - (otherRoom["x"] + otherRoom["width"]) < 3) {
					sx++;
				}
			}
						
			var sxOffset = Math.round(this._getRandomInt(0, cwp-roomw)/2);
			var syOffset = Math.round(this._getRandomInt(0, chp-roomh)/2);
			
			while (sx + sxOffset + roomw >= w) {
				if(sxOffset) {
					sxOffset--;
				} else {
					roomw--; 
				}
			}
			
			while (sy + syOffset + roomh >= h) { 
				if(syOffset) {
					syOffset--;
				} else {
					roomh--; 
				}
			}
			
			sx = sx + sxOffset;
			sy = sy + syOffset;
			
			this.rooms[i][j]["x"] = sx;
			this.rooms[i][j]["y"] = sy;
			this.rooms[i][j]["width"] = roomw;
			this.rooms[i][j]["height"] = roomh;  
			
			for (var ii = sx; ii < sx + roomw; ii++) {
				for (var jj = sy; jj < sy + roomh; jj++) {
					this.map[ii][jj] = 0;
				}
			}  
		}
	}
}

ROT.Map.Rogue.prototype._getWallPosition = function(aRoom, aDirection) {
	var rx;
	var ry;
	var door;
	
	if (aDirection == 1 || aDirection == 3) {
		rx = this._getRandomInt(aRoom["x"] + 1, aRoom["x"] + aRoom["width"] - 2);
		if (aDirection == 1) {
			ry = aRoom["y"] - 2;
			door = ry + 1;
		} else {
			ry = aRoom["y"] + aRoom["height"] + 1;
			door = ry -1;
		}
		
		this.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space. 
		
	} else if (aDirection == 2 || aDirection == 4) {
		ry = this._getRandomInt(aRoom["y"] + 1, aRoom["y"] + aRoom["height"] - 2);
		if(aDirection == 2) {
			rx = aRoom["x"] + aRoom["width"] + 1;
			door = rx - 1;
		} else {
			rx = aRoom["x"] - 2;
			door = rx + 1;
		}
		
		this.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space. 
		
	}
	return [rx, ry];
}

/***
* @param startPosition a 2 element array
* @param endPosition a 2 element array
*/
ROT.Map.Rogue.prototype._drawCorridore = function (startPosition, endPosition) {
	var xOffset = endPosition[0] - startPosition[0];
	var yOffset = endPosition[1] - startPosition[1];
	
	var xpos = startPosition[0];
	var ypos = startPosition[1];
	
	var tempDist;
	var xDir;
	var yDir;
	
	var move; // 2 element array, element 0 is the direction, element 1 is the total value to move. 
	var moves = []; // a list of 2 element arrays
	
	var xAbs = Math.abs(xOffset);
	var yAbs = Math.abs(yOffset);
	
	var percent = ROT.RNG.getUniform(); // used to split the move at different places along the long axis
	var firstHalf = percent;
	var secondHalf = 1 - percent;
	
	xDir = xOffset > 0 ? 2 : 6;
	yDir = yOffset > 0 ? 4 : 0;
	
	if (xAbs < yAbs) {
		// move firstHalf of the y offset
		tempDist = Math.ceil(yAbs * firstHalf);
		moves.push([yDir, tempDist]);
		// move all the x offset
		moves.push([xDir, xAbs]);
		// move sendHalf of the  y offset
		tempDist = Math.floor(yAbs * secondHalf);
		moves.push([yDir, tempDist]);
	} else {
		//  move firstHalf of the x offset
		tempDist = Math.ceil(xAbs * firstHalf);
		moves.push([xDir, tempDist]);
		// move all the y offset
		moves.push([yDir, yAbs]);
		// move secondHalf of the x offset.
		tempDist = Math.floor(xAbs * secondHalf);
		moves.push([xDir, tempDist]);  
	}
	
	this.map[xpos][ypos] = 0;
	
	while (moves.length > 0) {
		move = moves.pop();
		while (move[1] > 0) {
			xpos += ROT.DIRS[8][move[0]][0];
			ypos += ROT.DIRS[8][move[0]][1];
			this.map[xpos][ypos] = 0;
			move[1] = move[1] - 1;
		}
	}
}

ROT.Map.Rogue.prototype._createCorridors = function () {
	// Draw Corridors between connected rooms
	
	var cw = this._options.cellWidth;
	var ch = this._options.cellHeight;
	var room;
	var connection;
	var otherRoom;
	var wall;
	var otherWall;
	
	for (var i = 0; i < cw; i++) {
		for (var j = 0; j < ch; j++) {
			room = this.rooms[i][j];
			
			for (var k = 0; k < room["connections"].length; k++) {
					
				connection = room["connections"][k]; 
				
				otherRoom = this.rooms[connection[0]][connection[1]];
				
				// figure out what wall our corridor will start one.
				// figure out what wall our corridor will end on. 
				if (otherRoom["cellx"] > room["cellx"] ) {
					wall = 2;
					otherWall = 4;
				} else if (otherRoom["cellx"] < room["cellx"] ) {
					wall = 4;
					otherWall = 2;
				} else if(otherRoom["celly"] > room["celly"]) {
					wall = 3;
					otherWall = 1;
				} else if(otherRoom["celly"] < room["celly"]) {
					wall = 1;
					otherWall = 3;
				}
				
				this._drawCorridore(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));
			}
		}
	}
}
/**
 * @class Dungeon feature; has own .create() method
 */
ROT.Map.Feature = function() {}
ROT.Map.Feature.prototype.isValid = function(canBeDugCallback) {}
ROT.Map.Feature.prototype.create = function(digCallback) {}
ROT.Map.Feature.prototype.debug = function() {}
ROT.Map.Feature.createRandomAt = function(x, y, dx, dy, options) {}

/**
 * @class Room
 * @augments ROT.Map.Feature
 * @param {int} x1
 * @param {int} y1
 * @param {int} x2
 * @param {int} y2
 * @param {int} [doorX]
 * @param {int} [doorY]
 */
ROT.Map.Feature.Room = function(x1, y1, x2, y2, doorX, doorY) {
	this._x1 = x1;
	this._y1 = y1;
	this._x2 = x2;
	this._y2 = y2;
	this._doors = {};
	if (arguments.length > 4) { this.addDoor(doorX, doorY); }
}
ROT.Map.Feature.Room.extend(ROT.Map.Feature);

/**
 * Room of random size, with a given doors and direction
 */
ROT.Map.Feature.Room.createRandomAt = function(x, y, dx, dy, options) {
	var min = options.roomWidth[0];
	var max = options.roomWidth[1];
	var width = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	var min = options.roomHeight[0];
	var max = options.roomHeight[1];
	var height = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	if (dx == 1) { /* to the right */
		var y2 = y - Math.floor(ROT.RNG.getUniform() * height);
		return new this(x+1, y2, x+width, y2+height-1, x, y);
	}
	
	if (dx == -1) { /* to the left */
		var y2 = y - Math.floor(ROT.RNG.getUniform() * height);
		return new this(x-width, y2, x-1, y2+height-1, x, y);
	}

	if (dy == 1) { /* to the bottom */
		var x2 = x - Math.floor(ROT.RNG.getUniform() * width);
		return new this(x2, y+1, x2+width-1, y+height, x, y);
	}

	if (dy == -1) { /* to the top */
		var x2 = x - Math.floor(ROT.RNG.getUniform() * width);
		return new this(x2, y-height, x2+width-1, y-1, x, y);
	}
}

/**
 * Room of random size, positioned around center coords
 */
ROT.Map.Feature.Room.createRandomCenter = function(cx, cy, options) {
	var min = options.roomWidth[0];
	var max = options.roomWidth[1];
	var width = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	var min = options.roomHeight[0];
	var max = options.roomHeight[1];
	var height = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));

	var x1 = cx - Math.floor(ROT.RNG.getUniform()*width);
	var y1 = cy - Math.floor(ROT.RNG.getUniform()*height);
	var x2 = x1 + width - 1;
	var y2 = y1 + height - 1;

	return new this(x1, y1, x2, y2);
}

/**
 * Room of random size within a given dimensions
 */
ROT.Map.Feature.Room.createRandom = function(availWidth, availHeight, options) {
	var min = options.roomWidth[0];
	var max = options.roomWidth[1];
	var width = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	var min = options.roomHeight[0];
	var max = options.roomHeight[1];
	var height = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	var left = availWidth - width - 1;
	var top = availHeight - height - 1;

	var x1 = 1 + Math.floor(ROT.RNG.getUniform()*left);
	var y1 = 1 + Math.floor(ROT.RNG.getUniform()*top);
	var x2 = x1 + width - 1;
	var y2 = y1 + height - 1;

	return new this(x1, y1, x2, y2);
}

ROT.Map.Feature.Room.prototype.addDoor = function(x, y) {
	this._doors[x+","+y] = 1;
	return this;
}

/**
 * @param {function}
 */
ROT.Map.Feature.Room.prototype.getDoors = function(callback) {
	for (var key in this._doors) {
		var parts = key.split(",");
		callback(parseInt(parts[0]), parseInt(parts[1]));
	}
	return this;
}

ROT.Map.Feature.Room.prototype.clearDoors = function() {
	this._doors = {};
	return this;
}

ROT.Map.Feature.Room.prototype.addDoors = function(isWallCallback) {
	var left = this._x1-1;
	var right = this._x2+1;
	var top = this._y1-1;
	var bottom = this._y2+1;

	for (var x=left; x<=right; x++) {
		for (var y=top; y<=bottom; y++) {
			if (x != left && x != right && y != top && y != bottom) { continue; }
			if (isWallCallback(x, y)) { continue; }

			this.addDoor(x, y);
		}
	}

	return this;
}

ROT.Map.Feature.Room.prototype.debug = function() {
	console.log("room", this._x1, this._y1, this._x2, this._y2);
}

ROT.Map.Feature.Room.prototype.isValid = function(isWallCallback, canBeDugCallback) { 
	var left = this._x1-1;
	var right = this._x2+1;
	var top = this._y1-1;
	var bottom = this._y2+1;
	
	for (var x=left; x<=right; x++) {
		for (var y=top; y<=bottom; y++) {
			if (x == left || x == right || y == top || y == bottom) {
				if (!isWallCallback(x, y)) { return false; }
			} else {
				if (!canBeDugCallback(x, y)) { return false; }
			}
		}
	}

	return true;
}

/**
 * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.
 */
ROT.Map.Feature.Room.prototype.create = function(digCallback) { 
	var left = this._x1-1;
	var right = this._x2+1;
	var top = this._y1-1;
	var bottom = this._y2+1;
	
	var value = 0;
	for (var x=left; x<=right; x++) {
		for (var y=top; y<=bottom; y++) {
			if (x+","+y in this._doors) {
				value = 2;
			} else if (x == left || x == right || y == top || y == bottom) {
				value = 1;
			} else {
				value = 0;
			}
			digCallback(x, y, value);
		}
	}
}

ROT.Map.Feature.Room.prototype.getCenter = function() {
	return [Math.round((this._x1 + this._x2)/2), Math.round((this._y1 + this._y2)/2)];
}

ROT.Map.Feature.Room.prototype.getLeft = function() {
	return this._x1;
}

ROT.Map.Feature.Room.prototype.getRight = function() {
	return this._x2;
}

ROT.Map.Feature.Room.prototype.getTop = function() {
	return this._y1;
}

ROT.Map.Feature.Room.prototype.getBottom = function() {
	return this._y2;
}

/**
 * @class Corridor
 * @augments ROT.Map.Feature
 * @param {int} startX
 * @param {int} startY
 * @param {int} endX
 * @param {int} endY
 */
ROT.Map.Feature.Corridor = function(startX, startY, endX, endY) {
	this._startX = startX;
	this._startY = startY;
	this._endX = endX; 
	this._endY = endY;
	this._endsWithAWall = true;
}
ROT.Map.Feature.Corridor.extend(ROT.Map.Feature);

ROT.Map.Feature.Corridor.createRandomAt = function(x, y, dx, dy, options) {
	var min = options.corridorLength[0];
	var max = options.corridorLength[1];
	var length = min + Math.floor(ROT.RNG.getUniform()*(max-min+1));
	
	return new this(x, y, x + dx*length, y + dy*length);
}

ROT.Map.Feature.Corridor.prototype.debug = function() {
	console.log("corridor", this._startX, this._startY, this._endX, this._endY);
}

ROT.Map.Feature.Corridor.prototype.isValid = function(isWallCallback, canBeDugCallback){ 
	var sx = this._startX;
	var sy = this._startY;
	var dx = this._endX-sx;
	var dy = this._endY-sy;
	var length = 1 + Math.max(Math.abs(dx), Math.abs(dy));
	
	if (dx) { dx = dx/Math.abs(dx); }
	if (dy) { dy = dy/Math.abs(dy); }
	var nx = dy;
	var ny = -dx;
	
	var ok = true;
	for (var i=0; i<length; i++) {
		var x = sx + i*dx;
		var y = sy + i*dy;

		if (!canBeDugCallback(     x,      y)) { ok = false; }
		if (!isWallCallback  (x + nx, y + ny)) { ok = false; }
		if (!isWallCallback  (x - nx, y - ny)) { ok = false; }
		
		if (!ok) {
			length = i;
			this._endX = x-dx;
			this._endY = y-dy;
			break;
		}
	}
	
	/**
	 * If the length degenerated, this corridor might be invalid
	 */
	 
	/* not supported */
	if (length == 0) { return false; } 
	
	 /* length 1 allowed only if the next space is empty */
	if (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) { return false; }
	
	/**
	 * We do not want the corridor to crash into a corner of a room;
	 * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.
	 * 
	 * Situation:
	 * #######1
	 * .......?
	 * #######2
	 * 
	 * The corridor was dug from left to right.
	 * 1, 2 - problematic corners, ? = N+1th cell (not dug)
	 */
	var firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);
	var secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);
	this._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);
	if ((firstCornerBad || secondCornerBad) && this._endsWithAWall) { return false; }

	return true;
}

/**
 * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.
 */
ROT.Map.Feature.Corridor.prototype.create = function(digCallback) { 
	var sx = this._startX;
	var sy = this._startY;
	var dx = this._endX-sx;
	var dy = this._endY-sy;
	var length = 1+Math.max(Math.abs(dx), Math.abs(dy));
	
	if (dx) { dx = dx/Math.abs(dx); }
	if (dy) { dy = dy/Math.abs(dy); }
	var nx = dy;
	var ny = -dx;
	
	for (var i=0; i<length; i++) {
		var x = sx + i*dx;
		var y = sy + i*dy;
		digCallback(x, y, 0);
	}
	
	return true;
}

ROT.Map.Feature.Corridor.prototype.createPriorityWalls = function(priorityWallCallback) {
	if (!this._endsWithAWall) { return; }

	var sx = this._startX;
	var sy = this._startY;

	var dx = this._endX-sx;
	var dy = this._endY-sy;
	if (dx) { dx = dx/Math.abs(dx); }
	if (dy) { dy = dy/Math.abs(dy); }
	var nx = dy;
	var ny = -dx;

	priorityWallCallback(this._endX + dx, this._endY + dy);
	priorityWallCallback(this._endX + nx, this._endY + ny);
	priorityWallCallback(this._endX - nx, this._endY - ny);
}/**
 * @class Base noise generator
 */
ROT.Noise = function() {
};

ROT.Noise.prototype.get = function(x, y) {}
/**
 * A simple 2d implementation of simplex noise by Ondrej Zara
 *
 * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
 * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 */

/**
 * @class 2D simplex noise generator
 * @param {int} [gradients=256] Random gradients
 */
ROT.Noise.Simplex = function(gradients) {
	ROT.Noise.call(this);

	this._F2 = 0.5 * (Math.sqrt(3) - 1);
    this._G2 = (3 - Math.sqrt(3)) / 6;

	this._gradients = [
		[ 0, -1],
		[ 1, -1],
		[ 1,  0],
		[ 1,  1],
		[ 0,  1],
		[-1,  1],
		[-1,  0],
		[-1, -1]
	];

	var permutations = [];
	var count = gradients || 256;
	for (var i=0;i<count;i++) { permutations.push(i); }
	permutations = permutations.randomize();

	this._perms = [];
	this._indexes = [];

	for (var i=0;i<2*count;i++) {
		this._perms.push(permutations[i % count]);
		this._indexes.push(this._perms[i] % this._gradients.length);
	}

};
ROT.Noise.Simplex.extend(ROT.Noise);

ROT.Noise.Simplex.prototype.get = function(xin, yin) {
	var perms = this._perms;
	var indexes = this._indexes;
	var count = perms.length/2;
	var G2 = this._G2;

	var n0 =0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners

	// Skew the input space to determine which simplex cell we're in
	var s = (xin + yin) * this._F2; // Hairy factor for 2D
	var i = Math.floor(xin + s);
	var j = Math.floor(yin + s);
	var t = (i + j) * G2;
	var X0 = i - t; // Unskew the cell origin back to (x,y) space
	var Y0 = j - t;
	var x0 = xin - X0; // The x,y distances from the cell origin
	var y0 = yin - Y0;

	// For the 2D case, the simplex shape is an equilateral triangle.
	// Determine which simplex we are in.
	var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
	if (x0 > y0) {
		i1 = 1;
		j1 = 0;
	} else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)
		i1 = 0;
		j1 = 1;
	} // upper triangle, YX order: (0,0)->(0,1)->(1,1)

	// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
	// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
	// c = (3-sqrt(3))/6
	var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
	var y1 = y0 - j1 + G2;
	var x2 = x0 - 1 + 2*G2; // Offsets for last corner in (x,y) unskewed coords
	var y2 = y0 - 1 + 2*G2;

	// Work out the hashed gradient indices of the three simplex corners
	var ii = i.mod(count);
	var jj = j.mod(count);

	// Calculate the contribution from the three corners
	var t0 = 0.5 - x0*x0 - y0*y0;
	if (t0 >= 0) {
		t0 *= t0;
		gi = indexes[ii+perms[jj]];
		var grad = this._gradients[gi];
		n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);
	}
	
	var t1 = 0.5 - x1*x1 - y1*y1;
	if (t1 >= 0) {
		t1 *= t1;
		gi = indexes[ii+i1+perms[jj+j1]];
		var grad = this._gradients[gi];
		n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);
	}
	
	var t2 = 0.5 - x2*x2 - y2*y2;
	if (t2 >= 0) {
		t2 *= t2;
		gi = indexes[ii+1+perms[jj+1]];
		var grad = this._gradients[gi];
		n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);
	}

	// Add contributions from each corner to get the final noise value.
	// The result is scaled to return values in the interval [-1,1].
	return 70 * (n0 + n1 + n2);
}
/**
 * @class Abstract FOV algorithm
 * @param {function} lightPassesCallback Does the light pass through x,y?
 * @param {object} [options]
 * @param {int} [options.topology=8] 4/6/8
 */
ROT.FOV = function(lightPassesCallback, options) {
	this._lightPasses = lightPassesCallback;
	this._options = {
		topology: 8
	}
	for (var p in options) { this._options[p] = options[p]; }
};

/**
 * Compute visibility for a 360-degree circle
 * @param {int} x
 * @param {int} y
 * @param {int} R Maximum visibility radius
 * @param {function} callback
 */
ROT.FOV.prototype.compute = function(x, y, R, callback) {}

/**
 * Return all neighbors in a concentric ring
 * @param {int} cx center-x
 * @param {int} cy center-y
 * @param {int} r range
 */
ROT.FOV.prototype._getCircle = function(cx, cy, r) {
	var result = [];
	var dirs, countFactor, startOffset;

	switch (this._options.topology) {
		case 4:
			countFactor = 1;
			startOffset = [0, 1];
			dirs = [
				ROT.DIRS[8][7],
				ROT.DIRS[8][1],
				ROT.DIRS[8][3],
				ROT.DIRS[8][5]
			]
		break;

		case 6:
			dirs = ROT.DIRS[6];
			countFactor = 1;
			startOffset = [-1, 1];
		break;

		case 8:
			dirs = ROT.DIRS[4];
			countFactor = 2;
			startOffset = [-1, 1];
		break;
	}

	/* starting neighbor */
	var x = cx + startOffset[0]*r;
	var y = cy + startOffset[1]*r;

	/* circle */
	for (var i=0;i<dirs.length;i++) {
		for (var j=0;j<r*countFactor;j++) {
			result.push([x, y]);
			x += dirs[i][0];
			y += dirs[i][1];

		}
	}

	return result;
}
/**
 * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.
 * @augments ROT.FOV
 */
ROT.FOV.DiscreteShadowcasting = function(lightPassesCallback, options) {
	ROT.FOV.call(this, lightPassesCallback, options);
}
ROT.FOV.DiscreteShadowcasting.extend(ROT.FOV);

/**
 * @see ROT.FOV#compute
 */
ROT.FOV.DiscreteShadowcasting.prototype.compute = function(x, y, R, callback) {
	var center = this._coords;
	var map = this._map;

	/* this place is always visible */
	callback(x, y, 0);

	/* standing in a dark place. FIXME is this a good idea?  */
	if (!this._lightPasses(x, y)) { return; }
	
	/* start and end angles */
	var DATA = [];
	
	var A, B, cx, cy, blocks;

	/* analyze surrounding cells in concentric rings, starting from the center */
	for (var r=1; r<=R; r++) {
		var neighbors = this._getCircle(x, y, r);
		var angle = 360 / neighbors.length;

		for (var i=0;i<neighbors.length;i++) {
			cx = neighbors[i][0];
			cy = neighbors[i][1];
			A = angle * (i - 0.5);
			B = A + angle;
			
			blocks = !this._lightPasses(cx, cy);
			if (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) { callback(cx, cy, r, 1); }
			
			if (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) { return; } /* cutoff? */

		} /* for all cells in this ring */
	} /* for all rings */
}

/**
 * @param {int} A start angle
 * @param {int} B end angle
 * @param {bool} blocks Does current cell block visibility?
 * @param {int[][]} DATA shadowed angle pairs
 */
ROT.FOV.DiscreteShadowcasting.prototype._visibleCoords = function(A, B, blocks, DATA) {
	if (A < 0) { 
		var v1 = arguments.callee(0, B, blocks, DATA);
		var v2 = arguments.callee(360+A, 360, blocks, DATA);
		return v1 || v2;
	}
	
	var index = 0;
	while (index < DATA.length && DATA[index] < A) { index++; }
	
	if (index == DATA.length) { /* completely new shadow */
		if (blocks) { DATA.push(A, B); } 
		return true;
	}
	
	var count = 0;
	
	if (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */
		while (index < DATA.length && DATA[index] < B) {
			index++;
			count++;
		}
		
		if (count == 0) { return false; }
		
		if (blocks) { 
			if (count % 2) {
				DATA.splice(index-count, count, B);
			} else {
				DATA.splice(index-count, count);
			}
		}
		
		return true;

	} else { /* this shadow starts outside an existing shadow, or within a starting boundary */
		while (index < DATA.length && DATA[index] < B) {
			index++;
			count++;
		}
		
		/* visible when outside an existing shadow, or when overlapping */
		if (A == DATA[index-count] && count == 1) { return false; }
		
		if (blocks) { 
			if (count % 2) {
				DATA.splice(index-count, count, A);
			} else {
				DATA.splice(index-count, count, A, B);
			}
		}
			
		return true;
	}
}
/**
 * @class Precise shadowcasting algorithm
 * @augments ROT.FOV
 */
ROT.FOV.PreciseShadowcasting = function(lightPassesCallback, options) {
	ROT.FOV.call(this, lightPassesCallback, options);
}
ROT.FOV.PreciseShadowcasting.extend(ROT.FOV);

/**
 * @see ROT.FOV#compute
 */
ROT.FOV.PreciseShadowcasting.prototype.compute = function(x, y, R, callback) {
	/* this place is always visible */
	callback(x, y, 0, 1);

	/* standing in a dark place. FIXME is this a good idea?  */
	if (!this._lightPasses(x, y)) { return; }
	
	/* list of all shadows */
	var SHADOWS = [];
	
	var cx, cy, blocks, A1, A2, visibility;

	/* analyze surrounding cells in concentric rings, starting from the center */
	for (var r=1; r<=R; r++) {
		var neighbors = this._getCircle(x, y, r);
		var neighborCount = neighbors.length;

		for (var i=0;i<neighborCount;i++) {
			cx = neighbors[i][0];
			cy = neighbors[i][1];
			/* shift half-an-angle backwards to maintain consistency of 0-th cells */
			A1 = [i ? 2*i-1 : 2*neighborCount-1, 2*neighborCount];
			A2 = [2*i+1, 2*neighborCount]; 
			
			blocks = !this._lightPasses(cx, cy);
			visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);
			if (visibility) { callback(cx, cy, r, visibility); }

			if (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) { return; } /* cutoff? */

		} /* for all cells in this ring */
	} /* for all rings */
}

/**
 * @param {int[2]} A1 arc start
 * @param {int[2]} A2 arc end
 * @param {bool} blocks Does current arc block visibility?
 * @param {int[][]} SHADOWS list of active shadows
 */
ROT.FOV.PreciseShadowcasting.prototype._checkVisibility = function(A1, A2, blocks, SHADOWS) {
	if (A1[0] > A2[0]) { /* split into two sub-arcs */
		var v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);
		var v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);
		return (v1+v2)/2;
	}

	/* index1: first shadow >= A1 */
	var index1 = 0, edge1 = false;
	while (index1 < SHADOWS.length) {
		var old = SHADOWS[index1];
		var diff = old[0]*A1[1] - A1[0]*old[1];
		if (diff >= 0) { /* old >= A1 */
			if (diff == 0 && !(index1 % 2)) { edge1 = true; }
			break;
		}
		index1++;
	}

	/* index2: last shadow <= A2 */
	var index2 = SHADOWS.length, edge2 = false;
	while (index2--) {
		var old = SHADOWS[index2];
		var diff = A2[0]*old[1] - old[0]*A2[1];
		if (diff >= 0) { /* old <= A2 */
			if (diff == 0 && (index2 % 2)) { edge2 = true; }
			break;
		}
	}

	var visible = true;
	if (index1 == index2 && (edge1 || edge2)) {  /* subset of existing shadow, one of the edges match */
		visible = false; 
	} else if (edge1 && edge2 && index1+1==index2 && (index2 % 2)) { /* completely equivalent with existing shadow */
		visible = false;
	} else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */
		visible = false;
	}
	
	if (!visible) { return 0; } /* fast case: not visible */
	
	var visibleLength, P;

	/* compute the length of visible arc, adjust list of shadows (if blocking) */
	var remove = index2-index1+1;
	if (remove % 2) {
		if (index1 % 2) { /* first edge within existing shadow, second outside */
			var P = SHADOWS[index1];
			visibleLength = (A2[0]*P[1] - P[0]*A2[1]) / (P[1] * A2[1]);
			if (blocks) { SHADOWS.splice(index1, remove, A2); }
		} else { /* second edge within existing shadow, first outside */
			var P = SHADOWS[index2];
			visibleLength = (P[0]*A1[1] - A1[0]*P[1]) / (A1[1] * P[1]);
			if (blocks) { SHADOWS.splice(index1, remove, A1); }
		}
	} else {
		if (index1 % 2) { /* both edges within existing shadows */
			var P1 = SHADOWS[index1];
			var P2 = SHADOWS[index2];
			visibleLength = (P2[0]*P1[1] - P1[0]*P2[1]) / (P1[1] * P2[1]);
			if (blocks) { SHADOWS.splice(index1, remove); }
		} else { /* both edges outside existing shadows */
			if (blocks) { SHADOWS.splice(index1, remove, A1, A2); }
			return 1; /* whole arc visible! */
		}
	}

	var arcLength = (A2[0]*A1[1] - A1[0]*A2[1]) / (A1[1] * A2[1]);

	return visibleLength/arcLength;
}
/**
 * @class Recursive shadowcasting algorithm
 * Currently only supports 4/8 topologies, not hexagonal.
 * Based on Peter Harkins' implementation of Björn Bergström's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting
 * @augments ROT.FOV
 */
ROT.FOV.RecursiveShadowcasting = function(lightPassesCallback, options) {
	ROT.FOV.call(this, lightPassesCallback, options);
}
ROT.FOV.RecursiveShadowcasting.extend(ROT.FOV);

/** Octants used for translating recursive shadowcasting offsets */
ROT.FOV.RecursiveShadowcasting.OCTANTS = [
	[-1,  0,  0,  1],
	[ 0, -1,  1,  0],
	[ 0, -1, -1,  0],
	[-1,  0,  0, -1],
	[ 1,  0,  0, -1],
	[ 0,  1, -1,  0],
	[ 0,  1,  1,  0],
	[ 1,  0,  0,  1]
];

/**
 * Compute visibility for a 360-degree circle
 * @param {int} x
 * @param {int} y
 * @param {int} R Maximum visibility radius
 * @param {function} callback
 */
ROT.FOV.RecursiveShadowcasting.prototype.compute = function(x, y, R, callback) {
	//You can always see your own tile
	callback(x, y, 0, true);
	for(var i = 0; i < ROT.FOV.RecursiveShadowcasting.OCTANTS.length; i++) {
		this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[i], R, callback);
	}
}

/**
 * Compute visibility for a 180-degree arc
 * @param {int} x
 * @param {int} y
 * @param {int} R Maximum visibility radius
 * @param {int} dir Direction to look in (expressed in a ROT.DIR value);
 * @param {function} callback
 */
ROT.FOV.RecursiveShadowcasting.prototype.compute180 = function(x, y, R, dir, callback) {
	//You can always see your own tile
	callback(x, y, 0, true);
	var previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees
	var nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees
	var nextOctant = (dir+ 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextPreviousOctant], R, callback);
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[nextOctant], R, callback);
}

/**
 * Compute visibility for a 90-degree arc
 * @param {int} x
 * @param {int} y
 * @param {int} R Maximum visibility radius
 * @param {int} dir Direction to look in (expressed in a ROT.DIR value);
 * @param {function} callback
 */
ROT.FOV.RecursiveShadowcasting.prototype.compute90 = function(x, y, R, dir, callback) {
	//You can always see your own tile
	callback(x, y, 0, true);
	var previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[dir], R, callback);
	this._renderOctant(x, y, ROT.FOV.RecursiveShadowcasting.OCTANTS[previousOctant], R, callback);
}

/**
 * Render one octant (45-degree arc) of the viewshed
 * @param {int} x
 * @param {int} y
 * @param {int} octant Octant to be rendered
 * @param {int} R Maximum visibility radius
 * @param {function} callback
 */
ROT.FOV.RecursiveShadowcasting.prototype._renderOctant = function(x, y, octant, R, callback) {
	//Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses
	this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);
}

/**
 * Actually calculates the visibility
 * @param {int} startX The starting X coordinate
 * @param {int} startY The starting Y coordinate
 * @param {int} row The row to render
 * @param {float} visSlopeStart The slope to start at
 * @param {float} visSlopeEnd The slope to end at
 * @param {int} radius The radius to reach out to
 * @param {int} xx 
 * @param {int} xy 
 * @param {int} yx 
 * @param {int} yy 
 * @param {function} callback The callback to use when we hit a block that is visible
 */
ROT.FOV.RecursiveShadowcasting.prototype._castVisibility = function(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {
	if(visSlopeStart < visSlopeEnd) { return; }
	for(var i = row; i <= radius; i++) {
		var dx = -i - 1;
		var dy = -i;
		var blocked = false;
		var newStart = 0;

		//'Row' could be column, names here assume octant 0 and would be flipped for half the octants
		while(dx <= 0) {
			dx += 1;

			//Translate from relative coordinates to map coordinates
			var mapX = startX + dx * xx + dy * xy;
			var mapY = startY + dx * yx + dy * yy;

			//Range of the row
			var slopeStart = (dx - 0.5) / (dy + 0.5);
			var slopeEnd = (dx + 0.5) / (dy - 0.5);
		
			//Ignore if not yet at left edge of Octant
			if(slopeEnd > visSlopeStart) { continue; }
			
			//Done if past right edge
			if(slopeStart < visSlopeEnd) { break; }
				
			//If it's in range, it's visible
			if((dx * dx + dy * dy) < (radius * radius)) {
				callback(mapX, mapY, i, true);
			}
	
			if(!blocked) {
				//If tile is a blocking tile, cast around it
				if(!this._lightPasses(mapX, mapY) && i < radius) {
					blocked = true;
					this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);
					newStart = slopeEnd;
				}
			} else {
				//Keep narrowing if scanning across a block
				if(!this._lightPasses(mapX, mapY)) {
					newStart = slopeEnd;
					continue;
				}
			
				//Block has ended
				blocked = false;
				visSlopeStart = newStart;
			}
		}
		if(blocked) { break; }
	}
}
/**
 * @namespace Color operations
 */
ROT.Color = {
	fromString: function(str) {
		var cached, r;
		if (str in this._cache) {
			cached = this._cache[str];
		} else {
			if (str.charAt(0) == "#") { /* hex rgb */

				var values = str.match(/[0-9a-f]/gi).map(function(x) { return parseInt(x, 16); });
				if (values.length == 3) {
					cached = values.map(function(x) { return x*17; });
				} else {
					for (var i=0;i<3;i++) {
						values[i+1] += 16*values[i];
						values.splice(i, 1);
					}
					cached = values;
				}

			} else if (r = str.match(/rgb\(([0-9, ]+)\)/i)) { /* decimal rgb */
				cached = r[1].split(/\s*,\s*/).map(function(x) { return parseInt(x); });
			} else { /* html name */
				cached = [0, 0, 0];
			}

			this._cache[str] = cached;
		}

		return cached.slice();
	},

	/**
	 * Add two or more colors
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @returns {number[]}
	 */
	add: function(color1, color2) {
		var result = color1.slice();
		for (var i=0;i<3;i++) {
			for (var j=1;j<arguments.length;j++) {
				result[i] += arguments[j][i];
			}
		}
		return result;
	},

	/**
	 * Add two or more colors, MODIFIES FIRST ARGUMENT
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @returns {number[]}
	 */
	add_: function(color1, color2) {
		for (var i=0;i<3;i++) {
			for (var j=1;j<arguments.length;j++) {
				color1[i] += arguments[j][i];
			}
		}
		return color1;
	},

	/**
	 * Multiply (mix) two or more colors
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @returns {number[]}
	 */
	multiply: function(color1, color2) {
		var result = color1.slice();
		for (var i=0;i<3;i++) {
			for (var j=1;j<arguments.length;j++) {
				result[i] *= arguments[j][i] / 255;
			}
			result[i] = Math.round(result[i]);
		}
		return result;
	},

	/**
	 * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @returns {number[]}
	 */
	multiply_: function(color1, color2) {
		for (var i=0;i<3;i++) {
			for (var j=1;j<arguments.length;j++) {
				color1[i] *= arguments[j][i] / 255;
			}
			color1[i] = Math.round(color1[i]);
		}
		return color1;
	},

	/**
	 * Interpolate (blend) two colors with a given factor
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @param {float} [factor=0.5] 0..1
	 * @returns {number[]}
	 */
	interpolate: function(color1, color2, factor) {
		if (arguments.length < 3) { factor = 0.5; }
		var result = color1.slice();
		for (var i=0;i<3;i++) {
			result[i] = Math.round(result[i] + factor*(color2[i]-color1[i]));
		}
		return result;
	},

	/**
	 * Interpolate (blend) two colors with a given factor in HSL mode
	 * @param {number[]} color1
	 * @param {number[]} color2
	 * @param {float} [factor=0.5] 0..1
	 * @returns {number[]}
	 */
	interpolateHSL: function(color1, color2, factor) {
		if (arguments.length < 3) { factor = 0.5; }
		var hsl1 = this.rgb2hsl(color1);
		var hsl2 = this.rgb2hsl(color2);
		for (var i=0;i<3;i++) {
			hsl1[i] += factor*(hsl2[i]-hsl1[i]);
		}
		return this.hsl2rgb(hsl1);
	},

	/**
	 * Create a new random color based on this one
	 * @param {number[]} color
	 * @param {number[]} diff Set of standard deviations
	 * @returns {number[]}
	 */
	randomize: function(color, diff) {
		if (!(diff instanceof Array)) { diff = ROT.RNG.getNormal(0, diff); }
		var result = color.slice();
		for (var i=0;i<3;i++) {
			result[i] += (diff instanceof Array ? Math.round(ROT.RNG.getNormal(0, diff[i])) : diff);
		}
		return result;
	},

	/**
	 * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.
	 * @param {number[]} color
	 * @returns {number[]}
	 */
	rgb2hsl: function(color) {
		var r = color[0]/255;
		var g = color[1]/255;
		var b = color[2]/255;

		var max = Math.max(r, g, b), min = Math.min(r, g, b);
		var h, s, l = (max + min) / 2;

		if (max == min) {
			h = s = 0; // achromatic
		} else {
			var d = max - min;
			s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));
			switch(max) {
				case r: h = (g - b) / d + (g < b ? 6 : 0); break;
				case g: h = (b - r) / d + 2; break;
				case b: h = (r - g) / d + 4; break;
			}
			h /= 6;
		}

		return [h, s, l];
	},

	/**
	 * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.
	 * @param {number[]} color
	 * @returns {number[]}
	 */
	hsl2rgb: function(color) {
		var l = color[2];

		if (color[1] == 0) {
			l = Math.round(l*255);
			return [l, l, l];
		} else {
			function hue2rgb(p, q, t) {
				if (t < 0) t += 1;
				if (t > 1) t -= 1;
				if (t < 1/6) return p + (q - p) * 6 * t;
				if (t < 1/2) return q;
				if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
				return p;
			}

			var s = color[1];
			var q = (l < 0.5 ? l * (1 + s) : l + s - l * s);
			var p = 2 * l - q;
			var r = hue2rgb(p, q, color[0] + 1/3);
			var g = hue2rgb(p, q, color[0]);
			var b = hue2rgb(p, q, color[0] - 1/3);
			return [Math.round(r*255), Math.round(g*255), Math.round(b*255)];
		}
	},

	toRGB: function(color) {
		return "rgb(" + this._clamp(color[0]) + "," + this._clamp(color[1]) + "," + this._clamp(color[2]) + ")";
	},

	toHex: function(color) {
		var parts = [];
		for (var i=0;i<3;i++) {
			parts.push(this._clamp(color[i]).toString(16).lpad("0", 2));
		}
		return "#" + parts.join("");
	},

	_clamp: function(num) {
		if (num < 0) {
			return 0;
		} else if (num > 255) {
			return 255;
		} else {
			return num;
		}
	},

	_cache: {
		"black": [0,0,0],
		"navy": [0,0,128],
		"darkblue": [0,0,139],
		"mediumblue": [0,0,205],
		"blue": [0,0,255],
		"darkgreen": [0,100,0],
		"green": [0,128,0],
		"teal": [0,128,128],
		"darkcyan": [0,139,139],
		"deepskyblue": [0,191,255],
		"darkturquoise": [0,206,209],
		"mediumspringgreen": [0,250,154],
		"lime": [0,255,0],
		"springgreen": [0,255,127],
		"aqua": [0,255,255],
		"cyan": [0,255,255],
		"midnightblue": [25,25,112],
		"dodgerblue": [30,144,255],
		"forestgreen": [34,139,34],
		"seagreen": [46,139,87],
		"darkslategray": [47,79,79],
		"darkslategrey": [47,79,79],
		"limegreen": [50,205,50],
		"mediumseagreen": [60,179,113],
		"turquoise": [64,224,208],
		"royalblue": [65,105,225],
		"steelblue": [70,130,180],
		"darkslateblue": [72,61,139],
		"mediumturquoise": [72,209,204],
		"indigo": [75,0,130],
		"darkolivegreen": [85,107,47],
		"cadetblue": [95,158,160],
		"cornflowerblue": [100,149,237],
		"mediumaquamarine": [102,205,170],
		"dimgray": [105,105,105],
		"dimgrey": [105,105,105],
		"slateblue": [106,90,205],
		"olivedrab": [107,142,35],
		"slategray": [112,128,144],
		"slategrey": [112,128,144],
		"lightslategray": [119,136,153],
		"lightslategrey": [119,136,153],
		"mediumslateblue": [123,104,238],
		"lawngreen": [124,252,0],
		"chartreuse": [127,255,0],
		"aquamarine": [127,255,212],
		"maroon": [128,0,0],
		"purple": [128,0,128],
		"olive": [128,128,0],
		"gray": [128,128,128],
		"grey": [128,128,128],
		"skyblue": [135,206,235],
		"lightskyblue": [135,206,250],
		"blueviolet": [138,43,226],
		"darkred": [139,0,0],
		"darkmagenta": [139,0,139],
		"saddlebrown": [139,69,19],
		"darkseagreen": [143,188,143],
		"lightgreen": [144,238,144],
		"mediumpurple": [147,112,216],
		"darkviolet": [148,0,211],
		"palegreen": [152,251,152],
		"darkorchid": [153,50,204],
		"yellowgreen": [154,205,50],
		"sienna": [160,82,45],
		"brown": [165,42,42],
		"darkgray": [169,169,169],
		"darkgrey": [169,169,169],
		"lightblue": [173,216,230],
		"greenyellow": [173,255,47],
		"paleturquoise": [175,238,238],
		"lightsteelblue": [176,196,222],
		"powderblue": [176,224,230],
		"firebrick": [178,34,34],
		"darkgoldenrod": [184,134,11],
		"mediumorchid": [186,85,211],
		"rosybrown": [188,143,143],
		"darkkhaki": [189,183,107],
		"silver": [192,192,192],
		"mediumvioletred": [199,21,133],
		"indianred": [205,92,92],
		"peru": [205,133,63],
		"chocolate": [210,105,30],
		"tan": [210,180,140],
		"lightgray": [211,211,211],
		"lightgrey": [211,211,211],
		"palevioletred": [216,112,147],
		"thistle": [216,191,216],
		"orchid": [218,112,214],
		"goldenrod": [218,165,32],
		"crimson": [220,20,60],
		"gainsboro": [220,220,220],
		"plum": [221,160,221],
		"burlywood": [222,184,135],
		"lightcyan": [224,255,255],
		"lavender": [230,230,250],
		"darksalmon": [233,150,122],
		"violet": [238,130,238],
		"palegoldenrod": [238,232,170],
		"lightcoral": [240,128,128],
		"khaki": [240,230,140],
		"aliceblue": [240,248,255],
		"honeydew": [240,255,240],
		"azure": [240,255,255],
		"sandybrown": [244,164,96],
		"wheat": [245,222,179],
		"beige": [245,245,220],
		"whitesmoke": [245,245,245],
		"mintcream": [245,255,250],
		"ghostwhite": [248,248,255],
		"salmon": [250,128,114],
		"antiquewhite": [250,235,215],
		"linen": [250,240,230],
		"lightgoldenrodyellow": [250,250,210],
		"oldlace": [253,245,230],
		"red": [255,0,0],
		"fuchsia": [255,0,255],
		"magenta": [255,0,255],
		"deeppink": [255,20,147],
		"orangered": [255,69,0],
		"tomato": [255,99,71],
		"hotpink": [255,105,180],
		"coral": [255,127,80],
		"darkorange": [255,140,0],
		"lightsalmon": [255,160,122],
		"orange": [255,165,0],
		"lightpink": [255,182,193],
		"pink": [255,192,203],
		"gold": [255,215,0],
		"peachpuff": [255,218,185],
		"navajowhite": [255,222,173],
		"moccasin": [255,228,181],
		"bisque": [255,228,196],
		"mistyrose": [255,228,225],
		"blanchedalmond": [255,235,205],
		"papayawhip": [255,239,213],
		"lavenderblush": [255,240,245],
		"seashell": [255,245,238],
		"cornsilk": [255,248,220],
		"lemonchiffon": [255,250,205],
		"floralwhite": [255,250,240],
		"snow": [255,250,250],
		"yellow": [255,255,0],
		"lightyellow": [255,255,224],
		"ivory": [255,255,240],
		"white": [255,255,255]
	}
}
/**
 * @class Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.
 * @param {function} reflectivityCallback Callback to retrieve cell reflectivity (0..1)
 * @param {object} [options]
 * @param {int} [options.passes=1] Number of passes. 1 equals to simple FOV of all light sources, >1 means a *highly simplified* radiosity-like algorithm.
 * @param {int} [options.emissionThreshold=100] Cells with emissivity > threshold will be treated as light source in the next pass.
 * @param {int} [options.range=10] Max light range
 */
ROT.Lighting = function(reflectivityCallback, options) {
	this._reflectivityCallback = reflectivityCallback;
	this._options = {
		passes: 1,
		emissionThreshold: 100,
		range: 10
	};
	this._fov = null;

	this._lights = {};
	this._reflectivityCache = {};
	this._fovCache = {};

	this.setOptions(options);
}

/**
 * Adjust options at runtime
 * @see ROT.Lighting
 * @param {object} [options]
 */
ROT.Lighting.prototype.setOptions = function(options) {
	for (var p in options) { this._options[p] = options[p]; }
	if (options.range) { this.reset(); }
	return this;
}

/**
 * Set the used Field-Of-View algo
 * @param {ROT.FOV} fov
 */
ROT.Lighting.prototype.setFOV = function(fov) {
	this._fov = fov;
	this._fovCache = {};
	return this;
}

/**
 * Set (or remove) a light source
 * @param {int} x
 * @param {int} y
 * @param {null || string || number[3]} color
 */
ROT.Lighting.prototype.setLight = function(x, y, color) {
	var key = x+","+y;

	if (color) {
		this._lights[key] = (typeof(color) == "string" ? ROT.Color.fromString(color) : color);
	} else {
		delete this._lights[key];
	}
	return this;
}

/**
 * Remove all light sources
 */
ROT.Lighting.prototype.clearLights = function() {
    this._lights = {};
}

/**
 * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.
 */
ROT.Lighting.prototype.reset = function() {
	this._reflectivityCache = {};
	this._fovCache = {};

	return this;
}

/**
 * Compute the lighting
 * @param {function} lightingCallback Will be called with (x, y, color) for every lit cell
 */
ROT.Lighting.prototype.compute = function(lightingCallback) {
	var doneCells = {};
	var emittingCells = {};
	var litCells = {};

	for (var key in this._lights) { /* prepare emitters for first pass */
		var light = this._lights[key];
		if (!(key in emittingCells)) { emittingCells[key] = [0, 0, 0]; }

		ROT.Color.add_(emittingCells[key], light);
	}

	for (var i=0;i<this._options.passes;i++) { /* main loop */
		this._emitLight(emittingCells, litCells, doneCells);
		if (i+1 == this._options.passes) { continue; } /* not for the last pass */
		emittingCells = this._computeEmitters(litCells, doneCells);
	}

	for (var litKey in litCells) { /* let the user know what and how is lit */
		var parts = litKey.split(",");
		var x = parseInt(parts[0]);
		var y = parseInt(parts[1]);
		lightingCallback(x, y, litCells[litKey]);
	}

	return this;
}

/**
 * Compute one iteration from all emitting cells
 * @param {object} emittingCells These emit light
 * @param {object} litCells Add projected light to these
 * @param {object} doneCells These already emitted, forbid them from further calculations
 */
ROT.Lighting.prototype._emitLight = function(emittingCells, litCells, doneCells) {
	for (var key in emittingCells) {
		var parts = key.split(",");
		var x = parseInt(parts[0]);
		var y = parseInt(parts[1]);
		this._emitLightFromCell(x, y, emittingCells[key], litCells);
		doneCells[key] = 1;
	}
	return this;
}

/**
 * Prepare a list of emitters for next pass
 * @param {object} litCells
 * @param {object} doneCells
 * @returns {object}
 */
ROT.Lighting.prototype._computeEmitters = function(litCells, doneCells) {
	var result = {};

	for (var key in litCells) {
		if (key in doneCells) { continue; } /* already emitted */

		var color = litCells[key];

		if (key in this._reflectivityCache) {
			var reflectivity = this._reflectivityCache[key];
		} else {
			var parts = key.split(",");
			var x = parseInt(parts[0]);
			var y = parseInt(parts[1]);
			var reflectivity = this._reflectivityCallback(x, y);
			this._reflectivityCache[key] = reflectivity;
		}

		if (reflectivity == 0) { continue; } /* will not reflect at all */

		/* compute emission color */
		var emission = [];
		var intensity = 0;
		for (var i=0;i<3;i++) {
			var part = Math.round(color[i]*reflectivity);
			emission[i] = part;
			intensity += part;
		}
		if (intensity > this._options.emissionThreshold) { result[key] = emission; }
	}

	return result;
}

/**
 * Compute one iteration from one cell
 * @param {int} x
 * @param {int} y
 * @param {number[]} color
 * @param {object} litCells Cell data to by updated
 */
ROT.Lighting.prototype._emitLightFromCell = function(x, y, color, litCells) {
	var key = x+","+y;
	if (key in this._fovCache) {
		var fov = this._fovCache[key];
	} else {
		var fov = this._updateFOV(x, y);
	}

	for (var fovKey in fov) {
		var formFactor = fov[fovKey];

		if (fovKey in litCells) { /* already lit */
			var result = litCells[fovKey];
		} else { /* newly lit */
			var result = [0, 0, 0];
			litCells[fovKey] = result;
		}

		for (var i=0;i<3;i++) { result[i] += Math.round(color[i]*formFactor); } /* add light color */
	}

	return this;
}

/**
 * Compute FOV ("form factor") for a potential light source at [x,y]
 * @param {int} x
 * @param {int} y
 * @returns {object}
 */
ROT.Lighting.prototype._updateFOV = function(x, y) {
	var key1 = x+","+y;
	var cache = {};
	this._fovCache[key1] = cache;
	var range = this._options.range;
	var cb = function(x, y, r, vis) {
		var key2 = x+","+y;
		var formFactor = vis * (1-r/range);
		if (formFactor == 0) { return; }
		cache[key2] = formFactor;
	}
	this._fov.compute(x, y, range, cb.bind(this));

	return cache;
}
/**
 * @class Abstract pathfinder
 * @param {int} toX Target X coord
 * @param {int} toY Target Y coord
 * @param {function} passableCallback Callback to determine map passability
 * @param {object} [options]
 * @param {int} [options.topology=8]
 */
ROT.Path = function(toX, toY, passableCallback, options) {
	this._toX = toX;
	this._toY = toY;
	this._fromX = null;
	this._fromY = null;
	this._passableCallback = passableCallback;
	this._options = {
		topology: 8
	}
	for (var p in options) { this._options[p] = options[p]; }

	this._dirs = ROT.DIRS[this._options.topology];
	if (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */
		this._dirs = [
			this._dirs[0],
			this._dirs[2],
			this._dirs[4],
			this._dirs[6],
			this._dirs[1],
			this._dirs[3],
			this._dirs[5],
			this._dirs[7]
		]
	}
}

/**
 * Compute a path from a given point
 * @param {int} fromX
 * @param {int} fromY
 * @param {function} callback Will be called for every path item with arguments "x" and "y"
 */
ROT.Path.prototype.compute = function(fromX, fromY, callback) {
}

ROT.Path.prototype._getNeighbors = function(cx, cy) {
	var result = [];
	for (var i=0;i<this._dirs.length;i++) {
		var dir = this._dirs[i];
		var x = cx + dir[0];
		var y = cy + dir[1];
		
		if (!this._passableCallback(x, y)) { continue; }
		result.push([x, y]);
	}
	
	return result;
}
/**
 * @class Simplified Dijkstra's algorithm: all edges have a value of 1
 * @augments ROT.Path
 * @see ROT.Path
 */
ROT.Path.Dijkstra = function(toX, toY, passableCallback, options) {
	ROT.Path.call(this, toX, toY, passableCallback, options);

	this._computed = {};
	this._todo = [];
	this._add(toX, toY, null);
}
ROT.Path.Dijkstra.extend(ROT.Path);

/**
 * Compute a path from a given point
 * @see ROT.Path#compute
 */
ROT.Path.Dijkstra.prototype.compute = function(fromX, fromY, callback) {
	var key = fromX+","+fromY;
	if (!(key in this._computed)) { this._compute(fromX, fromY); }
	if (!(key in this._computed)) { return; }
	
	var item = this._computed[key];
	while (item) {
		callback(item.x, item.y);
		item = item.prev;
	}
}

/**
 * Compute a non-cached value
 */
ROT.Path.Dijkstra.prototype._compute = function(fromX, fromY) {
	while (this._todo.length) {
		var item = this._todo.shift();
		if (item.x == fromX && item.y == fromY) { return; }
		
		var neighbors = this._getNeighbors(item.x, item.y);
		
		for (var i=0;i<neighbors.length;i++) {
			var neighbor = neighbors[i];
			var x = neighbor[0];
			var y = neighbor[1];
			var id = x+","+y;
			if (id in this._computed) { continue; } /* already done */	
			this._add(x, y, item); 
		}
	}
}

ROT.Path.Dijkstra.prototype._add = function(x, y, prev) {
	var obj = {
		x: x,
		y: y,
		prev: prev
	}
	this._computed[x+","+y] = obj;
	this._todo.push(obj);
}
/**
 * @class Simplified A* algorithm: all edges have a value of 1
 * @augments ROT.Path
 * @see ROT.Path
 */
ROT.Path.AStar = function(toX, toY, passableCallback, options) {
	ROT.Path.call(this, toX, toY, passableCallback, options);

	this._todo = [];
	this._done = {};
	this._fromX = null;
	this._fromY = null;
}
ROT.Path.AStar.extend(ROT.Path);

/**
 * Compute a path from a given point
 * @see ROT.Path#compute
 */
ROT.Path.AStar.prototype.compute = function(fromX, fromY, callback) {
	this._todo = [];
	this._done = {};
	this._fromX = fromX;
	this._fromY = fromY;
	this._add(this._toX, this._toY, null);

	while (this._todo.length) {
		var item = this._todo.shift();
		if (item.x == fromX && item.y == fromY) { break; }
		var neighbors = this._getNeighbors(item.x, item.y);

		for (var i=0;i<neighbors.length;i++) {
			var neighbor = neighbors[i];
			var x = neighbor[0];
			var y = neighbor[1];
			var id = x+","+y;
			if (id in this._done) { continue; }
			this._add(x, y, item); 
		}
	}
	
	var item = this._done[fromX+","+fromY];
	if (!item) { return; }
	
	while (item) {
		callback(item.x, item.y);
		item = item.prev;
	}
}

ROT.Path.AStar.prototype._add = function(x, y, prev) {
	var obj = {
		x: x,
		y: y,
		prev: prev,
		g: (prev ? prev.g+1 : 0),
		h: this._distance(x, y)
	}
	this._done[x+","+y] = obj;
	
	/* insert into priority queue */
	
	var f = obj.g + obj.h;
	for (var i=0;i<this._todo.length;i++) {
		var item = this._todo[i];
		if (f < item.g + item.h) {
			this._todo.splice(i, 0, obj);
			return;
		}
	}
	
	this._todo.push(obj);
}

ROT.Path.AStar.prototype._distance = function(x, y) {
	switch (this._options.topology) {
		case 4:
			return (Math.abs(x-this._fromX) + Math.abs(y-this._fromY));
		break;

		case 6:
			var dx = Math.abs(x - this._fromX);
			var dy = Math.abs(y - this._fromY);
			return dy + Math.max(0, (dx-dy)/2);
		break;

		case 8: 
			return Math.max(Math.abs(x-this._fromX), Math.abs(y-this._fromY));
		break;
	}
}
/**
 * @class Terminal backend
 * @private
 */
ROT.Display.Term = function(context) {
	ROT.Display.Backend.call(this, context);
	this._cx = -1;
	this._cy = -1;
	this._lastColor = "";
	this._options = {};
	this._ox = 0;
	this._oy = 0;
	this._termcolor = {};
}
ROT.Display.Term.extend(ROT.Display.Backend);

ROT.Display.Term.prototype.compute = function(options) {
	this._options = options;
	this._ox = Math.floor((process.stdout.columns - options.width) / 2);
	this._oy = Math.floor((process.stdout.rows - options.height) / 2);
	this._termcolor = new ROT.Display.Term[options.termColor.capitalize()](this._context);
	this._context._termcolor = this._termcolor;
}

ROT.Display.Term.prototype.draw = function(data, clearBefore) {
	// determine where to draw what with what colors
	var x = data[0];
	var y = data[1];
	var ch = data[2];
	var fg = data[3];
	var bg = data[4];

	// determine if we need to move the terminal cursor
	var dx = this._ox + x;
	var dy = this._oy + y;
	if (dx < 0 || dx >= process.stdout.columns) { return; }
	if (dy < 0 || dy >= process.stdout.rows) { return; }
	if (dx !== this._cx || dy !== this._cy) {
		process.stdout.write(this._termcolor.positionToAnsi(dx,dy));
		this._cx = dx;
		this._cy = dy;
	}

	// terminals automatically clear, but if we're clearing when we're
	// not otherwise provided with a character, just use a space instead
	if (clearBefore) {
		if (!ch) {
			ch = " ";
		}
	}
		
	// if we're not clearing and not provided with a character, do nothing
	if (!ch) { return; }

	// determine if we need to change colors
	var newColor = this._termcolor.colorToAnsi(fg,bg);
	if (newColor !== this._lastColor) {
		process.stdout.write(newColor);
		this._lastColor = newColor;
	}

	// write the provided symbol to the display
	var chars = [].concat(ch);
	process.stdout.write(chars[0]);

	// update our position, given that we wrote a character
	this._cx++;
	if (this._cx >= process.stdout.columns) {
		this._cx = 0;
		this._cy++;
	}
}

ROT.Display.Term.prototype.computeSize = function(availWidth, availHeight) {
	return [process.stdout.columns, process.stdout.rows];
}

ROT.Display.Term.prototype.computeFontSize = function(availWidth, availHeight) {
	return 12;
}

ROT.Display.Term.prototype.eventToPosition = function(x, y) {
	return [x,y]
}
/**
 * @class Abstract terminal code module
 * @private
 */
ROT.Display.Term.Color = function(context) {
	this._context = context;
}

ROT.Display.Term.Color.prototype.clearToAnsi = function(bg) {
}

ROT.Display.Term.Color.prototype.colorToAnsi = function(fg, bg) {
}

ROT.Display.Term.Color.prototype.positionToAnsi = function(x, y) {
}
/**
 * @class xterm terminal code module
 * @private
 */
ROT.Display.Term.Xterm = function(context) {
	ROT.Display.Term.Color.call(this, context);
}
ROT.Display.Term.Xterm.extend(ROT.Display.Term.Color);

ROT.Display.Term.Xterm.prototype.clearToAnsi = function(bg) {
	return "\x1b[0;48;5;"
		+ this._termcolor(bg)
		+ "m\x1b[2J";
}

ROT.Display.Term.Xterm.prototype.colorToAnsi = function(fg, bg) {
	return "\x1b[0;38;5;"
		+ this._termcolor(fg)
		+ ";48;5;"
		+ this._termcolor(bg)
		+ "m";
}

ROT.Display.Term.Xterm.prototype.positionToAnsi = function(x, y) {
	return "\x1b[" + (y+1) + ";" + (x+1) + "H";
}

ROT.Display.Term.Xterm.prototype._termcolor = function(color) {
	var SRC_COLORS = 256.0;
	var DST_COLORS = 6.0;
	var COLOR_RATIO = DST_COLORS / SRC_COLORS;
	var rgb = ROT.Color.fromString(color);
	var r = Math.floor(rgb[0] * COLOR_RATIO);
	var g = Math.floor(rgb[1] * COLOR_RATIO);
	var b = Math.floor(rgb[2] * COLOR_RATIO);
	return r*36 + g*6 + b*1 + 16;
}
/**
 * Export to Node.js module
 */
for (var p in ROT) {
	exports[p] = ROT[p];
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/home/seiyria/projects/Roguathia/node_modules/browserify/node_modules/process/browser.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Dungeon.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

var _rogueInitGamestate = require('../../rogue/init/gamestate');

var _rogueInitGamestate2 = _interopRequireDefault(_rogueInitGamestate);

_module3['default'].controller('Dungeon', function ($scope) {

  $scope.currentFloor = 0;

  _rogueInitGamestate2['default'].on('start', function () {
    $scope.world = _rogueInitGamestate2['default'].world;
    $scope.victory = _rogueInitGamestate2['default'].winCondition;
  });

  _rogueInitGamestate2['default'].on('descend', function () {
    $scope.currentFloor = _rogueInitGamestate2['default'].currentFloor;
  });
});

},{"../../rogue/init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Log.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _rogueLibLogger = require('../../rogue/lib/logger');

var _rogueLibLogger2 = _interopRequireDefault(_rogueLibLogger);

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

var _rogueInitGamestate = require('../../rogue/init/gamestate');

var _rogueInitGamestate2 = _interopRequireDefault(_rogueInitGamestate);

var _rogueDisplayMessageHandler = require('../../rogue/display/message-handler');

_module3['default'].controller('Log', function ($scope) {

  $scope.log = [];

  var addMessage = function addMessage(msg, type) {
    if (!type) {
      (0, _rogueLibLogger2['default'])('GameLog', 'Message "' + msg + '" has no type');
    }

    $scope.log.push({ time: new Date(), msg: msg, type: type });

    if ($scope.log.length > 100) {
      $scope.log.shift();
    }
  };

  _rogueInitGamestate2['default'].on('gameover', function () {
    addMessage('Game over! Everyone died.', _rogueDisplayMessageHandler.MessageTypes.META);
  });

  _rogueInitGamestate2['default'].on('log', function (logObj) {
    addMessage(logObj.message, logObj.type);
  });
});

},{"../../rogue/display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../../rogue/init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../rogue/lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Party.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

var _rogueInitGamestate = require('../../rogue/init/gamestate');

var _rogueInitGamestate2 = _interopRequireDefault(_rogueInitGamestate);

_module3['default'].controller('Party', function ($scope, $uibModal) {

  $scope.inventoryOffset = function () {
    return 60 + document.getElementsByClassName('player-block')[0].offsetHeight;
  };

  $scope.openEditWindow = function (player, index) {
    $uibModal.open({
      templateUrl: 'player-edit',
      controller: 'PartyMemberEdit',
      keyboard: false,
      backdrop: 'static',
      resolve: { player: player, index: index }
    });
  };

  _rogueInitGamestate2['default'].on('redraw', function () {
    $scope.players = _rogueInitGamestate2['default'].players;
    $scope.$apply();
  });
});

_module3['default'].controller('PartyMemberEdit', function ($scope, $uibModalInstance, TemplateDataManager, UpgradeDataManager, player, index) {
  $scope.close = $uibModalInstance.close;

  $scope.templateDataManager = TemplateDataManager;
  $scope.upgradeDataManager = UpgradeDataManager;
  $scope.index = index;
  $scope.player = player;

  $scope.genders = [{ key: 'Random', val: undefined }, { key: 'Male', val: 'Male' }, { key: 'Female', val: 'Female' }];

  $scope.aligns = [{ key: 'Random', val: undefined }, { key: 'Eviler', val: -200 }, { key: 'Evil', val: -100 }, { key: 'Neutral', val: 0 }, { key: 'Good', val: 100 }, { key: 'Gooder', val: 200 }];

  $scope.professions = [{ key: 'Random', val: undefined }].concat((0, _lodash2['default'])(UpgradeDataManager.upgrades).filter(function (u) {
    return _lodash2['default'].contains(u, 'Class:');
  }).map(function (u) {
    return u.split(' ')[1];
  }).map(function (u) {
    return { key: u, val: u };
  }).value());

  $scope.races = [{ key: 'Random', val: undefined }].concat((0, _lodash2['default'])(UpgradeDataManager.upgrades).filter(function (u) {
    return _lodash2['default'].contains(u, 'Race:');
  }).map(function (u) {
    return u.split(' ')[1];
  }).map(function (u) {
    return { key: u, val: u };
  }).value());

  $scope.colors = [{ key: 'Default', val: undefined }, { key: 'Red', val: '#f00' }, { key: 'Blue', val: '#00f' }, { key: 'Green', val: '#0f0' }, { key: 'Yellow', val: '#ff0' }, { key: 'Cyan', val: '#0ff' }, { key: 'Magenta', val: '#f0f' }];
});

},{"../../rogue/init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Root.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

var Root =

/* ngInject */
function Root() {
  _classCallCheck(this, Root);
};

_module3['default'].controller('Root', Root);

},{"../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Upgrades.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

var _rogueInitGamestate = require('../../rogue/init/gamestate');

var _rogueInitGamestate2 = _interopRequireDefault(_rogueInitGamestate);

var _rogueInitInit = require('../../rogue/init/init');

var _rogueInitGameupgrades = require('../../rogue/init/gameupgrades');

var _rogueConstantsUpgrades = require('../../rogue/constants/upgrades');

var _rogueConstantsUpgrades2 = _interopRequireDefault(_rogueConstantsUpgrades);

_module3['default'].filter('visibleUpgrades', function (CurrencyDataManager, UpgradeDataManager) {
  return function (upgrades, type) {
    return _lodash2['default'].filter(upgrades, function (upgrade) {
      return upgrade.cost < CurrencyDataManager.currency[type] / 2 && upgrade.currency === type && UpgradeDataManager.canSeeUpgrade(upgrade);
    });
  };
});

_module3['default'].controller('Upgrades', function ($scope, CurrencyDataManager, UpgradeDataManager, TemplateDataManager) {

  $scope.upgrades = _rogueConstantsUpgrades2['default'];
  $scope.upgradeDataManager = UpgradeDataManager;
  $scope.currencyDataManager = CurrencyDataManager;

  var curState = {};

  $scope.buyUpgrade = function (upgrade) {
    if (!UpgradeDataManager.buyUpgrade(upgrade)) return;
    if (upgrade.operate) upgrade.operate(curState);
  };

  var rebuildUpgrades = function rebuildUpgrades() {
    var newState = curState = (0, _rogueInitGameupgrades.NewState)();

    _lodash2['default'].each(UpgradeDataManager.upgrades, function (name) {
      var upgrade = _lodash2['default'].findWhere(_rogueConstantsUpgrades2['default'], { name: name });
      if (upgrade.operate) upgrade.operate(newState);
    });

    newState.templates = TemplateDataManager.templates;

    (0, _rogueInitGameupgrades.SetState)(newState);
  };

  rebuildUpgrades();
  (0, _rogueInitInit.StartGameCycle)();

  _rogueInitGamestate2['default'].on('gameover', function () {
    _lodash2['default'].each(['sp', 'kp', 'vp'], function (key) {
      var add = _rogueInitGamestate2['default'][key + 'Earned'] || 0;
      CurrencyDataManager.addCurrency(key, add);
    });

    rebuildUpgrades();

    $scope.$apply();
  });
});

},{"../../rogue/constants/upgrades":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/upgrades.js","../../rogue/init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../rogue/init/gameupgrades":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gameupgrades.js","../../rogue/init/init":"/home/seiyria/projects/Roguathia/src/js/rogue/init/init.js","../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/directives/fill-height.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

_module3['default'].directive('fillHeight', function ($window, $parse) {
  return {
    scope: {
      scrollBottom: '='
    },
    link: function link(scope, element, attrs) {
      var setSize = function setSize() {
        element[0].style.height = $window.innerHeight - ($parse(attrs.offset)(scope) || 0) + 'px';
      };

      setSize();

      angular.element($window).bind('resize', setSize);

      scope.$watch(function () {
        return attrs.offset;
      }, setSize);

      if (scope.scrollBottom) {
        scope.$watchCollection('scrollBottom', function (newValue) {
          if (!newValue) return;
          element[0].scrollTop = element[0].scrollHeight;
        });
      }
    }
  };
});

},{"../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/directives/tabs/log-tab.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _module2 = require('../../module');

var _module3 = _interopRequireDefault(_module2);

_module3['default'].directive('log', function () {
  return {
    controller: 'Log',
    restrict: 'E',
    templateUrl: 'log-tab'
  };
});

},{"../../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/init.js":[function(require,module,exports){
'use strict';

require('./controllers/Root');

require('./controllers/Party');

require('./controllers/Log');

require('./controllers/Dungeon');

require('./controllers/Upgrades');

require('./services/UpgradeDataManager');

require('./services/CurrencyDataManager');

require('./services/TemplateDataManager');

require('./directives/tabs/log-tab');

require('./directives/fill-height');

},{"./controllers/Dungeon":"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Dungeon.js","./controllers/Log":"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Log.js","./controllers/Party":"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Party.js","./controllers/Root":"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Root.js","./controllers/Upgrades":"/home/seiyria/projects/Roguathia/src/js/angular/controllers/Upgrades.js","./directives/fill-height":"/home/seiyria/projects/Roguathia/src/js/angular/directives/fill-height.js","./directives/tabs/log-tab":"/home/seiyria/projects/Roguathia/src/js/angular/directives/tabs/log-tab.js","./services/CurrencyDataManager":"/home/seiyria/projects/Roguathia/src/js/angular/services/CurrencyDataManager.js","./services/TemplateDataManager":"/home/seiyria/projects/Roguathia/src/js/angular/services/TemplateDataManager.js","./services/UpgradeDataManager":"/home/seiyria/projects/Roguathia/src/js/angular/services/UpgradeDataManager.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/module.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _module = angular.module('Roguathia', ['ui.bootstrap', 'ngStorage']);

_module.run(["$rootScope", function ($rootScope) {
  return $rootScope._ = _lodash2['default'];
}]);

exports['default'] = _module;
module.exports = exports['default'];

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/services/CurrencyDataManager.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

_module3['default'].service('CurrencyDataManager', function ($localStorage) {

  if (!$localStorage.currency) {
    $localStorage.currency = { sp: 0, kp: 0, vp: 0 };
  }

  var currency = $localStorage.currency;

  var addCurrency = function addCurrency(key, val) {
    currency[key] += val;
    $localStorage.currency = currency;
  };

  var hasCurrency = function hasCurrency(key, val) {
    return currency[key] >= val;
  };

  var useCurrency = function useCurrency(key, val) {
    if (!hasCurrency(key, val)) return;
    addCurrency(key, -val);
  };

  return {
    addCurrency: addCurrency,
    hasCurrency: hasCurrency,
    useCurrency: useCurrency,
    currency: currency
  };
});

},{"../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/services/TemplateDataManager.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

_module3['default'].service('TemplateDataManager', function ($localStorage) {

  if (!$localStorage.templates) {
    $localStorage.templates = [];
  }

  var templates = $localStorage.templates;

  return {
    templates: templates
  };
});

},{"../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js"}],"/home/seiyria/projects/Roguathia/src/js/angular/services/UpgradeDataManager.js":[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _module2 = require('../module');

var _module3 = _interopRequireDefault(_module2);

_module3['default'].service('UpgradeDataManager', function (CurrencyDataManager, $localStorage) {

  if (!$localStorage.upgrades) {
    $localStorage.upgrades = [];
  }

  var upgrades = $localStorage.upgrades;

  var _hasUpgrade = function _hasUpgrade(upgradeName) {
    return _lodash2['default'].contains(upgrades, upgradeName);
  };
  var hasUpgrade = function hasUpgrade(upgrade) {
    return _hasUpgrade(upgrade.name);
  };

  var hasUpgradeReq = function hasUpgradeReq(upgrade) {
    return upgrade.req ? _hasUpgrade(upgrade.req) : true;
  };

  var buyUpgrade = function buyUpgrade(upgrade) {
    if (!CurrencyDataManager.hasCurrency(upgrade.currency, upgrade.cost)) return;
    if (!hasUpgradeReq(upgrade)) return;
    CurrencyDataManager.useCurrency(upgrade.currency, upgrade.cost);
    upgrades.push(upgrade.name);
    $localStorage.upgrades = upgrades;
  };

  var canSeeUpgrade = function canSeeUpgrade(upgrade) {
    return !hasUpgrade(upgrade) && hasUpgradeReq(upgrade);
  };

  return {
    buyUpgrade: buyUpgrade,
    hasUpgrade: hasUpgrade,
    _hasUpgrade: _hasUpgrade,
    canSeeUpgrade: canSeeUpgrade,
    upgrades: upgrades
  };
});

},{"../module":"/home/seiyria/projects/Roguathia/src/js/angular/module.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/init.js":[function(require,module,exports){
'use strict';

require('./angular/init');

},{"./angular/init":"/home/seiyria/projects/Roguathia/src/js/angular/init.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/conducts.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

var conducts = [
// breakable conducts
{ check: function check(player) {
    return !player.brokenConduct.stubborn;
  }, affirmMessage: 'You never changed equipment.' }, { check: function check(player) {
    return !player.brokenConduct.wieldedWeapon;
  }, affirmMessage: 'You never hit with a wielded weapon.' }, { check: function check(player) {
    return !player.brokenConduct.pacifist;
  }, affirmMessage: 'You %were a pacifist.' }, { check: function check(player) {
    return !player.brokenConduct.nudist;
  }, affirmMessage: 'You never equipped armor.' }, { check: function check(player) {
    return !player.brokenConduct.celibate;
  }, affirmMessage: 'You %were celibate.' }, { check: function check(player) {
    return player.brokenConduct.lifeSave;
  }, affirmMessage: 'Your life %was saved.' },

// traits
{ check: function check(player) {
    return player.hasTrait('Infravision');
  }, affirmMessage: 'You %had infravision.' }, { check: function check(player) {
    return player.hasTrait('Protection');
  }, affirmMessage: 'You %had protection.' }, { check: function check(player) {
    return player.hasTrait('Clairvoyance');
  }, affirmMessage: 'You %had clairvoyance.' }, { check: function check(player) {
    return player.hasTrait('Warning');
  }, affirmMessage: 'You %were warned.' }, { check: function check(player) {
    return player.hasTrait('Telepathy');
  }, affirmMessage: 'You %were telepathic.' }, { check: function check(player) {
    return player.hasTrait('Stealth');
  }, affirmMessage: 'You %were stealthy.' }, { check: function check(player) {
    return player.hasTrait('Invisible');
  }, affirmMessage: 'You %were invisible.' }, { check: function check(player) {
    return player.hasTrait('SeeInvisible');
  }, affirmMessage: 'You %could see invisible.' }, { check: function check(player) {
    return player.getSpeed() > _settings2['default'].game.baseSpeed;
  }, affirmMessage: 'You %were fast.' }, { check: function check(player) {
    return player.getSpeed() < _settings2['default'].game.baseSpeed;
  }, affirmMessage: 'You %were slow.' }, { check: function check(player) {
    return player.hasTrait('PoisonResistance');
  }, affirmMessage: 'You %were poison resistant.' }, { check: function check(player) {
    return player.hasTrait('ShockResistance');
  }, affirmMessage: 'You %were shock resistant.' }, { check: function check(player) {
    return player.hasTrait('FireResistance');
  }, affirmMessage: 'You %were fire resistant.' }, { check: function check(player) {
    return player.hasTrait('AcidResistance');
  }, affirmMessage: 'You %were acid resistant.' }, { check: function check(player) {
    return player.hasTrait('IceResistance');
  }, affirmMessage: 'You %were ice resistant.' },

// statuses
{ check: function check(player) {
    return player.hasBehavior('Stunned');
  }, affirmMessage: 'You %were stunned.' }, { check: function check(player) {
    return player.hasBehavior('Poisoned');
  }, affirmMessage: 'You %were poisoned.' }, { check: function check(player) {
    return player.hasBehavior('Seduced');
  }, affirmMessage: 'You %were seduced.' },

// alignment
{ check: function check(player) {
    return player.getAlign() === 0;
  }, affirmMessage: 'You %were neutral.' }, { check: function check(player) {
    return player.getAlign() < 0;
  }, affirmMessage: 'You %were evil.' }, { check: function check(player) {
    return player.getAlign() > 0;
  }, affirmMessage: 'You %were good.' },

// you probably always see this
{ check: function check(player) {
    return player.hp.atMin();
  }, affirmMessage: 'You died.' }];

exports['default'] = function (player) {
  var finalConduct = [];

  var tenses = [{ split: '%could', past: 'could', now: 'can' }, { split: '%were', past: 'were', now: 'are' }, { split: '%was', past: 'was', now: 'will be' }, { split: '%had', past: 'had', now: 'have' }];

  var adjustMessage = function adjustMessage(msg) {
    return _lodash2['default'].reduce(tenses, function (prev, obj) {
      return prev.split(obj.split).join(player.hp.atMin() ? obj.past : obj.now);
    }, msg);
  };
  var addMessage = function addMessage(msg) {
    return finalConduct.push(adjustMessage(msg));
  };

  _lodash2['default'].each(conducts, function (conduct) {
    if (conduct.check(player)) {
      addMessage(conduct.affirmMessage);
    } else if (conduct.rejectMessage) {
      addMessage(conduct.rejectMessage);
    }
  });

  return _lodash2['default'].sortBy(finalConduct);
};

module.exports = exports['default'];

},{"./settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var rarity = function rarity(_rarity) {
  return function (target) {
    return target.__defineGetter__('rarity', function () {
      return _rarity;
    }), target;
  };
};
exports.rarity = rarity;
var material = function material(_material) {
  return function (target) {
    return target.prototype.material = _material, target;
  };
};
exports.material = material;
var twoHanded = function twoHanded(target) {
  return target.prototype.slotsTaken = 2, target;
};
exports.twoHanded = twoHanded;
var ranged = function ranged(range) {
  return function (target) {
    return target.prototype.range = _lodash2['default'].extend({ numShots: 1, damageBoost: '0d0', ammo: [] }, range), target;
  };
};
exports.ranged = ranged;

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/factions.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = {
  MONSTER: 'Monster',
  PLAYER: 'Player',

  MAGIC: 'Magic',

  ALL: 'all'
};
module.exports = exports['default'];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/faketypes.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Ring = ['pearl', 'iron', 'twisted', 'steel', 'wire', 'engagement', 'shiny', 'bronze', 'brass', 'copper', 'silver', 'gold', 'wooden', 'granite', 'opal', 'clay', 'coral', 'black onyx', 'moonstone', 'tiger eye', 'jade', 'agate', 'topaz', 'sapphire', 'ruby', 'diamond', 'ivory', 'emerald'];

exports.Ring = Ring;
var Potion = ['ruby', 'dark green', 'purple-red', 'smoky', 'brown', 'pink', 'cyan', 'puce', 'cloudy', 'fizzy', 'orange', 'sky blue', 'milky', 'effervescent', 'dark', 'yellow', 'brilliant blue', 'swirly', 'black', 'white', 'emerald', 'magenta', 'bubbly', 'golden', 'murky'];
exports.Potion = Potion;

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Entities = {
  Elements: {
    Water: 'blue',
    Fire: 'red',
    Shock: 'green',
    Ice: 'lightblue'
  },
  Tiers: {
    Basic: 'gray',
    Weak: 'brown',
    Inadequate: 'orange',
    Moderate: 'yellow',
    Adequate: 'red',
    Strong: '',
    Powerful: '',
    Difficult: '',
    Nightmarish: ''
  },
  Colors: {
    Black: 'gray', // it would be impossible to see if it were really black
    Yellow: 'yellow',
    Green: 'green',
    Brown: 'brown',
    Red: 'red',
    Blue: 'blue'
  }
};

exports.Entities = Entities;
var Items = {
  Gold: 'gold'
};

exports.Items = Items;
var Tiles = {
  Door: 'gold',
  Fountain: '#00f',
  Sink: '#d3d3ff',
  Throne: 'yellow'
};

exports.Tiles = Tiles;
var Special = {
  Selyk: '#f0f'
};
exports.Special = Special;

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Entities = {
  Player: '@',

  Ant: 'a',
  Canine: 'd',
  Demon: '&',
  Elemental: 'E',
  Gnome: 'G',
  Humanoid: 'h',
  Jelly: 'j',
  Kobold: 'k',
  Lizard: ':',
  Mystical: 'x',
  Nymph: 'n',
  Orc: 'o',
  Pudding: 'P',
  Rat: 'r',
  Snake: 'S',
  Spore: 'e'
};

exports.Entities = Entities;
var Items = {
  Body: '[',
  Cloak: '[',
  Comestible: '%',
  Feet: '[',
  Gem: '*',
  Gold: '$',
  Hands: ')',
  Head: '[',
  Neck: '"',
  Potion: '!',
  Ring: '=',
  Scroll: '?',
  Spellbook: '+',
  Tool: '(',
  Wand: '/',
  Wrist: '['
};

exports.Items = Items;
var Tiles = {
  Altar: '_',
  Corridor: '#',
  DoorClosed: '+',
  DoorOpenHorizontal: '-',
  DoorOpenVertical: '|',
  Floor: '.',
  Fountain: '{',
  Sink: '#',
  StairsDown: '>',
  StairsUp: '<',
  Throne: '\\',
  WallHorizontal: '-',
  WallVertical: '|'
};
exports.Tiles = Tiles;

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var materials = {
  Unknown: 0,
  Cloth: 1, // can burn, rot
  Leather: 2, // can burn, rot
  Iron: 3, // can rust, corrode
  Mithril: 4,
  Copper: 5, // can corrode
  Glass: 6, // can burn (melt), explode (if potion), shatter
  Dragon: 7,
  Wood: 8, // can burn, rot,
  Food: 9,
  Silver: 10,
  Gold: 11,
  Mineral: 12,
  Plastic: 13, // can burn
  Stone: 14 // can corrode
};

exports['default'] = materials;
var AffectedByFire = function AffectedByFire(item) {
  return _lodash2['default'].contains([materials.Cloth, materials.Leather, materials.Glass, materials.Wood, materials.Plastic], item.material);
};
exports.AffectedByFire = AffectedByFire;
var AffectedByAcid = function AffectedByAcid(item) {
  return _lodash2['default'].contains([materials.Iron, materials.Copper, materials.Stone], item.material);
};
exports.AffectedByAcid = AffectedByAcid;
var AffectedByPoison = function AffectedByPoison(item) {
  return _lodash2['default'].contains([materials.Wood, materials.Cloth, materials.Leather], item.material);
};
exports.AffectedByPoison = AffectedByPoison;
var AffectedByIce = function AffectedByIce(item) {
  return _lodash2['default'].contains([materials.Glass], item.material);
};
exports.AffectedByIce = AffectedByIce;

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/random.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _contentItemsFoods = require('../content/items/foods');

var Foods = _interopRequireWildcard(_contentItemsFoods);

var _contentItemsFeets = require('../content/items/feets');

var Feets = _interopRequireWildcard(_contentItemsFeets);

var _contentItemsHeads = require('../content/items/heads');

var Heads = _interopRequireWildcard(_contentItemsHeads);

var _contentItemsBodys = require('../content/items/bodys');

var Bodys = _interopRequireWildcard(_contentItemsBodys);

var _contentItemsRings = require('../content/items/rings');

var Rings = _interopRequireWildcard(_contentItemsRings);

var _contentItemsNecks = require('../content/items/necks');

var Necks = _interopRequireWildcard(_contentItemsNecks);

var _contentItemsWands = require('../content/items/wands');

var Wands = _interopRequireWildcard(_contentItemsWands);

var _contentItemsWrists = require('../content/items/wrists');

var Wrists = _interopRequireWildcard(_contentItemsWrists);

var _contentItemsCloaks = require('../content/items/cloaks');

var Cloaks = _interopRequireWildcard(_contentItemsCloaks);

var _contentItems_weapons = require('../content/items/_weapons');

var Weapons = _interopRequireWildcard(_contentItems_weapons);

var _contentItemsPotions = require('../content/items/potions');

var Potions = _interopRequireWildcard(_contentItemsPotions);

var _contentItemsSpellbooks = require('../content/items/spellbooks');

var Spellbooks = _interopRequireWildcard(_contentItemsSpellbooks);

var _contentItemsProjectiles = require('../content/items/projectiles');

var Projectiles = _interopRequireWildcard(_contentItemsProjectiles);

var _contentProfessions_all = require('../content/professions/_all');

var Professions = _interopRequireWildcard(_contentProfessions_all);

var _contentRaces_all = require('../content/races/_all');

var Races = _interopRequireWildcard(_contentRaces_all);

var getRandom = function getRandom(from) {
  var exclude = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  return (0, _lodash2['default'])(from).values().filter(function (type) {
    return !_lodash2['default'].contains(exclude, type.name);
  }).sample();
};

var Food = function Food(opts, exclude) {
  return new (getRandom(Foods, exclude))(opts);
};
exports.Food = Food;
var Feet = function Feet(opts, exclude) {
  return new (getRandom(Feets, exclude))(opts);
};
exports.Feet = Feet;
var Head = function Head(opts, exclude) {
  return new (getRandom(Heads, exclude))(opts);
};
exports.Head = Head;
var Body = function Body(opts, exclude) {
  return new (getRandom(Bodys, exclude))(opts);
};
exports.Body = Body;
var Ring = function Ring(opts, exclude) {
  return new (getRandom(Rings, exclude))(opts);
};
exports.Ring = Ring;
var Neck = function Neck(opts, exclude) {
  return new (getRandom(Necks, exclude))(opts);
};
exports.Neck = Neck;
var Wand = function Wand(opts, exclude) {
  return new (getRandom(Wands, exclude))(opts);
};
exports.Wand = Wand;
var Wrist = function Wrist(opts, exclude) {
  return new (getRandom(Wrists, exclude))(opts);
};
exports.Wrist = Wrist;
var Cloak = function Cloak(opts, exclude) {
  return new (getRandom(Cloaks, exclude))(opts);
};
exports.Cloak = Cloak;
var Weapon = function Weapon(opts, exclude) {
  return new (getRandom(Weapons, exclude))(opts);
};
exports.Weapon = Weapon;
var Potion = function Potion(opts, exclude) {
  return new (getRandom(Potions, exclude))(opts);
};
exports.Potion = Potion;
var Spellbook = function Spellbook(opts, exclude) {
  return new (getRandom(Spellbooks, exclude))(opts);
};
exports.Spellbook = Spellbook;
var Projectile = function Projectile(opts, exclude) {
  return new (getRandom(Projectiles, exclude))(opts);
};
exports.Projectile = Projectile;
var Profession = function Profession(opts) {
  var exclude = arguments.length <= 1 || arguments[1] === undefined ? ['Monster', 'Developer'] : arguments[1];
  return new (getRandom(Professions, exclude))(opts);
};
exports.Profession = Profession;
var Race = function Race(opts) {
  var exclude = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  return new (getRandom(Races, exclude))(opts);
};
exports.Race = Race;

},{"../content/items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../content/items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../content/items/cloaks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/cloaks.js","../content/items/feets":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/feets.js","../content/items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../content/items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../content/items/necks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/necks.js","../content/items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../content/items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../content/items/rings":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/rings.js","../content/items/spellbooks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js","../content/items/wands":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wands.js","../content/items/wrists":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js","../content/professions/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/_all.js","../content/races/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = {
  screen: {
    width: 80,
    height: 24
  },
  game: {
    turnDelay: 50,
    killXpDivisor: 5,
    minStatValue: 3,
    alignThreshold: 100,
    baseAC: 10,
    spawnSteps: 100,
    nameLength: 12,

    display: {
      turns: 4,
      log: 50
    },

    defaultStats: {
      monster: {
        str: 8,
        con: 8,
        dex: 8,
        int: 8,
        wis: 8,
        cha: 8
      },

      attributes: {
        ac: 0,
        str: 8,
        con: 8,
        dex: 8,
        int: 8,
        wis: 8,
        cha: 8,
        luk: 0,
        gold: 0,
        level: 1,
        align: 0,
        speed: 100,
        sight: 4,
        sound: 50,
        killXp: '0d0',
        spawnHp: '15d1',
        spawnMp: '0d0',
        regenHp: 20,
        regenMp: 10
      },

      stats: {
        gender: 'Male',
        name: 'Dudley',
        race: 'Human',
        attacks: [],
        behaviors: [],
        profession: 'Developer'
      },

      profession: {
        hp: '0d0',
        mp: '0d0',
        ac: 0,
        str: 0,
        con: 0,
        int: 0,
        dex: 0,
        wis: 0,
        cha: 0,
        luk: 0,
        speed: 0,
        sight: 0,
        spawnSteps: 0,
        addFactions: [],
        addBehaviors: [],
        titles: [],
        attacks: [],
        traits: [],
        skillCaps: {}
      },

      equipmentSlots: {
        hands: 2,
        head: 1,
        body: 1,
        feet: 2,
        wrist: 2,
        cloak: 1,
        neck: 1,
        ring: 2
      },

      race: {
        ac: 0,
        hp: 0,
        mp: 0,
        str: 0,
        con: 0,
        int: 0,
        dex: 0,
        wis: 0,
        cha: 0,
        luk: 0,
        speed: 0,
        sight: 0,
        spawnSteps: 0,
        addFactions: [],
        addBehaviors: [],
        attacks: [],
        traits: [],
        skillBonus: {}
      }
    }
  },
  upgradeParameters: {
    MAX_FEATURE_SPAWN_CHANCE: 10000
  },
  upgradeIncrement: {
    itemsInDungeon: 1,
    itemDropChance: 1,
    altarSpawnChance: 25,
    templeSpawnChance: 5,
    throneSpawnChance: 25,
    throneRoomSpawnChance: 5,
    graveSpawnChance: 25,
    graveyardSpawnChance: 5,
    fountainSpawnChance: 25,
    oracleRoomChance: 5,
    sinkSpawnChance: 25,
    bathroomSpawnChance: 5,
    monsterLimit: 5
  },
  upgrades: {
    itemsInDungeon: 1,
    itemDropChance: 1,
    altarSpawnChance: 0,
    templeSpawnChance: 0,
    throneSpawnChance: 0,
    throneRoomSpawnChance: 0,
    graveSpawnChance: 0,
    graveyardSpawnChance: 0,
    fountainSpawnChance: 0,
    oracleRoomChance: 0,
    sinkSpawnChance: 0,
    bathroomSpawnChance: 0,
    monsterLimit: 10
  },
  upgradesMax: {
    itemDropChance: 75,
    altarSpawnChance: 1000,
    templeSpawnChance: 100,
    throneSpawnChance: 1000,
    throneRoomSpawnChance: 100,
    graveSpawnChance: 1000,
    graveyardSpawnChance: 100,
    fountainSpawnChance: 1000,
    oracleRoomChance: 100,
    sinkSpawnChance: 1000,
    bathroomSpawnChance: 100,
    monsterLimit: 100
  }
};
module.exports = exports['default'];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Unskilled = 0;
exports.Unskilled = Unskilled;
var Basic = 1;
exports.Basic = Basic;
var Competent = 2;
exports.Competent = Competent;
var Skilled = 3;
exports.Skilled = Skilled;
var Expert = 4;
exports.Expert = Expert;
var Master = 5;
exports.Master = Master;
var Grandmaster = 6;
exports.Grandmaster = Grandmaster;
var Legendary = 7;

exports.Legendary = Legendary;
exports['default'] = [{ name: 'Unskilled', max: 0 }, { name: 'Basic', max: 20 }, { name: 'Competent', max: 80 }, { name: 'Skilled', max: 180 }, { name: 'Expert', max: 320 }, { name: 'Master', max: 500 }, { name: 'Grandmaster', max: 750 }, { name: 'Legendary', max: 1000 }];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/upgrades.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _contentProfessions_all = require('../content/professions/_all');

var _contentProfessions_all2 = _interopRequireDefault(_contentProfessions_all);

var _contentRaces_all = require('../content/races/_all');

var _contentRaces_all2 = _interopRequireDefault(_contentRaces_all);

var upgrades = [{ name: 'Rename Tag',
  help: 'Allow for renaming of player characters.',
  cost: 100000,
  currency: 'sp' }, { name: 'Color Tag',
  help: 'Allow for changing of player characters color.',
  cost: 100000,
  currency: 'sp' }];

_lodash2['default'].each(_lodash2['default'].keys(_contentProfessions_all2['default']), function (profession) {
  upgrades.push({ name: 'Random: ' + profession,
    help: 'This class (' + profession + ') will show up randomly.',
    cost: 10000,
    currency: 'sp',
    operate: function operate(upgradeData) {
      return upgradeData.unlocked.profession.push(profession);
    }
  });

  upgrades.push({ name: 'Class: ' + profession,
    help: 'This class (' + profession + ') can be selected for all party members.',
    req: 'Random: ' + profession,
    unlockedProfession: profession,
    cost: 50000,
    currency: 'sp',
    operate: function operate(upgradeData) {
      return upgradeData.selectable.profession.push(profession);
    }
  });
});

_lodash2['default'].each(_lodash2['default'].keys(_contentRaces_all2['default']), function (race) {
  upgrades.push({ name: 'Random: ' + race,
    help: 'This race (' + race + ') will show up randomly.',
    cost: 30000,
    currency: 'sp',
    operate: function operate(upgradeData) {
      return upgradeData.unlocked.race.push(race);
    }
  });

  upgrades.push({ name: 'Race: ' + race,
    help: 'This race (' + race + ') can be selected for all party members.',
    req: 'Random: ' + race,
    unlockedRace: race,
    cost: 80000,
    currency: 'sp',
    operate: function operate(upgradeData) {
      return upgradeData.selectable.race.push(race);
    }
  });
});

for (var i = 0; i < 3; i++) {
  upgrades.push({
    name: 'Bigger Party ' + (i + 1),
    help: 'Add one member to your adventuring party.',
    req: i > 0 ? 'Bigger Party ' + i : null,
    currency: 'sp',
    cost: (i + 2) * 150000,
    operate: function operate(upgradeData) {
      return upgradeData.extra.players++;
    }
  });
}

exports['default'] = upgrades;
module.exports = exports['default'];

},{"../content/professions/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/_all.js","../content/races/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/constants/victories.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _worldgenTiles_all = require('../worldgen/tiles/_all');

var Tiles = _interopRequireWildcard(_worldgenTiles_all);

var _contentItems_special = require('../content/items/_special');

var _contentMonsters_special = require('../content/monsters/_special');

var _worldgenMaptypesAltar = require('../worldgen/maptypes/altar');

var _worldgenMaptypesAltar2 = _interopRequireDefault(_worldgenMaptypesAltar);

var _definitionsMonster = require('../definitions/monster');

var _definitionsMonster2 = _interopRequireDefault(_definitionsMonster);

var Victory = (function () {
  function Victory() {
    _classCallCheck(this, Victory);
  }

  _createClass(Victory, null, [{
    key: 'vp',
    value: function vp() {
      return 5;
    }
  }, {
    key: 'check',
    value: function check() {
      return true;
    }
  }, {
    key: 'shouldTrigger',
    value: function shouldTrigger() {
      return false;
    }
  }, {
    key: 'trigger',
    value: function trigger() {}
  }, {
    key: 'mapAdditions',
    value: function mapAdditions() {}
  }, {
    key: 'mapStairs',
    value: function mapStairs(i) {
      return [Tiles.StairsUp, i !== _initGamestate2['default'].world.depth - 1 ? Tiles.StairsDown : null];
    }
  }, {
    key: 'message',
    get: function get() {
      return 'You survived!';
    }
  }, {
    key: 'description',
    get: function get() {
      return 'Survive!';
    }
  }]);

  return Victory;
})();

var Survival = (function (_Victory) {
  _inherits(Survival, _Victory);

  function Survival() {
    _classCallCheck(this, Survival);

    _get(Object.getPrototypeOf(Survival.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Survival, null, [{
    key: 'vp',
    value: function vp() {
      return _initGamestate2['default'].world.depth;
    }
  }, {
    key: 'requiredTurns',
    value: function requiredTurns() {
      return _initGamestate2['default'].world.depth * 1000;
    }
  }, {
    key: 'check',
    value: function check() {
      return _lodash2['default'].max(_initGamestate2['default'].players, 'currentTurn').currentTurn >= this.requiredTurns();
    }
  }, {
    key: 'message',
    get: function get() {
      return 'You survived ' + this.requiredTurns() + ' turns.';
    }
  }, {
    key: 'description',
    get: function get() {
      return 'Survive for ' + this.requiredTurns() + ' turns.';
    }
  }]);

  return Survival;
})(Victory);

exports.Survival = Survival;

var StoneOfSelykFind = (function (_Victory2) {
  _inherits(StoneOfSelykFind, _Victory2);

  function StoneOfSelykFind() {
    _classCallCheck(this, StoneOfSelykFind);

    _get(Object.getPrototypeOf(StoneOfSelykFind.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(StoneOfSelykFind, null, [{
    key: 'vp',
    value: function vp() {
      return 3 * _initGamestate2['default'].world.depth;
    }
  }, {
    key: 'check',
    value: function check() {
      var found = false;
      _lodash2['default'].each(_initGamestate2['default'].players, function (player) {
        if (player.hasInInventory(_contentItems_special.StoneOfSelyk)) found = true;
      });
      return found;
    }
  }, {
    key: 'shouldTrigger',
    value: function shouldTrigger() {
      return _initGamestate2['default'].world.depth === _initGamestate2['default'].currentFloor + 1;
    }
  }, {
    key: 'trigger',
    value: function trigger() {
      _initGamestate2['default'].world.placeItemAtRandomLocation(new _contentItems_special.StoneOfSelyk(), _initGamestate2['default'].currentFloor);
    }
  }, {
    key: 'message',
    get: function get() {
      return 'You found the Stone of Selyk.';
    }
  }, {
    key: 'description',
    get: function get() {
      return 'Find the Stone of Selyk.';
    }
  }]);

  return StoneOfSelykFind;
})(Victory);

exports.StoneOfSelykFind = StoneOfSelykFind;

var SelykAltar = (function (_Victory3) {
  _inherits(SelykAltar, _Victory3);

  function SelykAltar() {
    _classCallCheck(this, SelykAltar);

    _get(Object.getPrototypeOf(SelykAltar.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SelykAltar, null, [{
    key: 'vp',
    value: function vp() {
      return 10 * _initGamestate2['default'].world.depth;
    }
  }, {
    key: 'check',
    value: function check() {
      var found = false;
      _lodash2['default'].each(_initGamestate2['default'].players, function (player) {
        if (player._ascended) found = true;
      });
      return found;
    }
  }, {
    key: 'mapAdditions',
    value: function mapAdditions() {
      var floor = _initGamestate2['default'].world.depth;
      _initGamestate2['default'].world.setMapAt(_worldgenMaptypesAltar2['default'].generate({ z: floor }), floor);
      return true;
    }
  }, {
    key: 'shouldTrigger',
    value: function shouldTrigger() {
      return _initGamestate2['default'].world.depth - 1 === _initGamestate2['default'].currentFloor + 1;
    }
  }, {
    key: 'trigger',
    value: function trigger() {
      _initGamestate2['default'].world.placeItemAtRandomLocation(new _contentItems_special.SelykCellarKey(), _initGamestate2['default'].currentFloor);
    }
  }, {
    key: 'mapStairs',
    value: function mapStairs(i) {
      return [Tiles.StairsUp, i !== _initGamestate2['default'].world.depth - 1 ? Tiles.StairsDown : Tiles.SelykStairsDown];
    }
  }, {
    key: 'message',
    get: function get() {
      return 'You sacrificed yourself at the altar of Selyk.';
    }
  }, {
    key: 'description',
    get: function get() {
      return 'Reach the altar of Selyk.';
    }
  }]);

  return SelykAltar;
})(Victory);

exports.SelykAltar = SelykAltar;

var KillSelyk = (function (_Victory4) {
  _inherits(KillSelyk, _Victory4);

  function KillSelyk() {
    _classCallCheck(this, KillSelyk);

    _get(Object.getPrototypeOf(KillSelyk.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(KillSelyk, null, [{
    key: 'vp',
    value: function vp() {
      return 20 * _initGamestate2['default'].world.depth;
    }
  }, {
    key: 'check',
    value: function check() {
      var found = false;
      _lodash2['default'].each(_initGamestate2['default'].players, function (player) {
        if (player.conquest.Selyk) found = true;
      });
      return found;
    }
  }, {
    key: 'shouldTrigger',
    value: function shouldTrigger() {
      return _initGamestate2['default'].world.depth === _initGamestate2['default'].currentFloor + 1;
    }
  }, {
    key: 'trigger',
    value: function trigger() {
      _initGamestate2['default'].world.placeEntityAtRandomLocation(new _definitionsMonster2['default'](0, 0, 0, _contentMonsters_special.Selyk.init()), _initGamestate2['default'].currentFloor);
    }
  }, {
    key: 'message',
    get: function get() {
      return 'You killed Selyk.';
    }
  }, {
    key: 'description',
    get: function get() {
      return 'Kill Selyk.';
    }
  }]);

  return KillSelyk;
})(Victory);

exports.KillSelyk = KillSelyk;

},{"../content/items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","../content/monsters/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_special.js","../definitions/monster":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/monster.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../worldgen/maptypes/altar":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/maptypes/altar.js","../worldgen/tiles/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _monsterAttacks = require('./monster-attacks');

var MonsterAttacks = _interopRequireWildcard(_monsterAttacks);

var _physicalAttacks = require('./physical-attacks');

var PhysicalAttacks = _interopRequireWildcard(_physicalAttacks);

var _magicAttacks = require('./magic-attacks');

var MagicAttacks = _interopRequireWildcard(_magicAttacks);

var attacks = {};
var theseAttacks = _lodash2['default'].values(MonsterAttacks).concat(_lodash2['default'].values(PhysicalAttacks)).concat(_lodash2['default'].values(MagicAttacks));

_lodash2['default'].each(theseAttacks, function (attack) {
  var attackFunc = function attackFunc(r, h, d) {
    return new attack(r, h, d);
  };
  attackFunc.real = attack;
  attacks[attack.name] = attackFunc;
});

exports['default'] = attacks;
module.exports = exports['default'];

},{"./magic-attacks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/magic-attacks.js","./monster-attacks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/monster-attacks.js","./physical-attacks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/physical-attacks.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/magic-attacks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsAttack = require('../../definitions/attack');

var Force = (function (_Magic) {
  _inherits(Force, _Magic);

  function Force() {
    _classCallCheck(this, Force);

    _get(Object.getPrototypeOf(Force.prototype), 'constructor', this).apply(this, arguments);
  }

  return Force;
})(_definitionsAttack.Magic);

exports.Force = Force;

},{"../../definitions/attack":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/attack.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/monster-attacks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _definitionsAttack = require('../../definitions/attack');

var Bite = (function (_Attack) {
  _inherits(Bite, _Attack);

  function Bite() {
    _classCallCheck(this, Bite);

    _get(Object.getPrototypeOf(Bite.prototype), 'constructor', this).apply(this, arguments);
  }

  return Bite;
})(_definitionsAttack.Attack);

exports.Bite = Bite;

var Claw = (function (_Attack2) {
  _inherits(Claw, _Attack2);

  function Claw() {
    _classCallCheck(this, Claw);

    _get(Object.getPrototypeOf(Claw.prototype), 'constructor', this).apply(this, arguments);
  }

  return Claw;
})(_definitionsAttack.Attack);

exports.Claw = Claw;

var Touch = (function (_Attack3) {
  _inherits(Touch, _Attack3);

  function Touch() {
    _classCallCheck(this, Touch);

    _get(Object.getPrototypeOf(Touch.prototype), 'constructor', this).apply(this, arguments);
  }

  return Touch;
})(_definitionsAttack.Attack);

exports.Touch = Touch;

var Bearhug = (function (_Attack4) {
  _inherits(Bearhug, _Attack4);

  function Bearhug() {
    _classCallCheck(this, Bearhug);

    _get(Object.getPrototypeOf(Bearhug.prototype), 'constructor', this).apply(this, arguments);
  }

  return Bearhug;
})(_definitionsAttack.Attack);

exports.Bearhug = Bearhug;

var Poison = (function (_Attack5) {
  _inherits(Poison, _Attack5);

  function Poison() {
    _classCallCheck(this, Poison);

    _get(Object.getPrototypeOf(Poison.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Poison, [{
    key: 'hitString',
    value: function hitString(owner, target, damage, extra) {
      var psn = '';
      if (extra && !target.hasTrait('PoisonResistance')) {
        psn = ' ' + target.name + ' got poisoned!';
        target.addUniqueBehavior(Behaviors.Poisoned());
      }
      return owner.name + ' hit ' + target.name + ' for ' + damage + ' damage!' + psn;
    }
  }, {
    key: 'hitCallback',
    value: function hitCallback() {
      return true;
    }
  }]);

  return Poison;
})(_definitionsAttack.Attack);

exports.Poison = Poison;

var ElectricTouch = (function (_Attack6) {
  _inherits(ElectricTouch, _Attack6);

  function ElectricTouch() {
    _classCallCheck(this, ElectricTouch);

    _get(Object.getPrototypeOf(ElectricTouch.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ElectricTouch, [{
    key: 'hitString',
    value: function hitString(owner, target, damage, extra) {
      var zap = '';
      if (extra) {
        zap = ' ' + target.name + ' got zapped!';
        target.addUniqueBehavior(Behaviors.Stunned());
      }
      return owner.name + ' hit ' + target.name + ' for ' + damage + ' damage!' + zap;
    }
  }, {
    key: 'hitCallback',
    value: function hitCallback() {
      return true;
    }
  }]);

  return ElectricTouch;
})(_definitionsAttack.Attack);

exports.ElectricTouch = ElectricTouch;

var Explode = (function (_Attack7) {
  _inherits(Explode, _Attack7);

  function Explode() {
    _classCallCheck(this, Explode);

    _get(Object.getPrototypeOf(Explode.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Explode, [{
    key: 'hitString',
    value: function hitString(owner, target, damage) {
      return owner.name + ' explodes! ' + target.name + ' took ' + damage + ' damage.';
    }
  }, {
    key: 'canHit',
    value: function canHit() {
      return true;
    }
  }, {
    key: 'afterHitCallback',
    value: function afterHitCallback(owner) {
      owner.die(owner);
    }
  }]);

  return Explode;
})(_definitionsAttack.Attack);

exports.Explode = Explode;

var SeductiveTouch = (function (_Attack8) {
  _inherits(SeductiveTouch, _Attack8);

  function SeductiveTouch() {
    _classCallCheck(this, SeductiveTouch);

    _get(Object.getPrototypeOf(SeductiveTouch.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SeductiveTouch, [{
    key: 'hitString',
    value: function hitString(owner, target, damage, extra) {
      var sed = '';
      if (extra) {
        sed = ' ' + target.name + ' is seduced!';
        target.addUniqueBehavior(Behaviors.Seduced());
      }
      return owner.name + ' hit ' + target.name + ' for ' + damage + ' damage!' + sed;
    }
  }, {
    key: 'hitCallback',
    value: function hitCallback() {
      return true;
    }
  }]);

  return SeductiveTouch;
})(_definitionsAttack.Attack);

exports.SeductiveTouch = SeductiveTouch;

var TelepathicBlast = (function (_Attack9) {
  _inherits(TelepathicBlast, _Attack9);

  function TelepathicBlast() {
    _classCallCheck(this, TelepathicBlast);

    _get(Object.getPrototypeOf(TelepathicBlast.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(TelepathicBlast, [{
    key: 'hitString',
    value: function hitString(owner, target, damage) {
      return owner.name + ' got blasted by ' + target.name + '\'s psychic blast for ' + damage + ' damage!';
    }
  }, {
    key: 'hitCallback',
    value: function hitCallback(owner) {
      return owner.hasTrait('Telepathy');
    }
  }]);

  return TelepathicBlast;
})(_definitionsAttack.Attack);

exports.TelepathicBlast = TelepathicBlast;

},{"../../definitions/attack":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/attack.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/physical-attacks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsAttack = require('../../definitions/attack');

var _definitionsGlyph = require('../../definitions/glyph');

var _definitionsGlyph2 = _interopRequireDefault(_definitionsGlyph);

var Bash = (function (_SkilledAttack) {
  _inherits(Bash, _SkilledAttack);

  function Bash() {
    _classCallCheck(this, Bash);

    _get(Object.getPrototypeOf(Bash.prototype), 'constructor', this).apply(this, arguments);
  }

  return Bash;
})(_definitionsAttack.SkilledAttack);

exports.Bash = Bash;

var Ranged = (function (_Reagent) {
  _inherits(Ranged, _Reagent);

  function Ranged() {
    _classCallCheck(this, Ranged);

    _get(Object.getPrototypeOf(Ranged.prototype), 'constructor', this).apply(this, arguments);
  }

  return Ranged;
})(_definitionsAttack.Reagent);

exports.Ranged = Ranged;

var Shot = (function (_SkilledAttack2) {
  _inherits(Shot, _SkilledAttack2);

  function Shot() {
    _classCallCheck(this, Shot);

    _get(Object.getPrototypeOf(Shot.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Shot, [{
    key: 'init',
    value: function init() {
      this.glyph = new _definitionsGlyph2['default'](')', '#00f');
    }
  }]);

  return Shot;
})(_definitionsAttack.SkilledAttack);

exports.Shot = Shot;

var Slash = (function (_SkilledAttack3) {
  _inherits(Slash, _SkilledAttack3);

  function Slash() {
    _classCallCheck(this, Slash);

    _get(Object.getPrototypeOf(Slash.prototype), 'constructor', this).apply(this, arguments);
  }

  return Slash;
})(_definitionsAttack.SkilledAttack);

exports.Slash = Slash;

var Smash = (function (_SkilledAttack4) {
  _inherits(Smash, _SkilledAttack4);

  function Smash() {
    _classCallCheck(this, Smash);

    _get(Object.getPrototypeOf(Smash.prototype), 'constructor', this).apply(this, arguments);
  }

  return Smash;
})(_definitionsAttack.SkilledAttack);

exports.Smash = Smash;

var Stab = (function (_SkilledAttack5) {
  _inherits(Stab, _SkilledAttack5);

  function Stab() {
    _classCallCheck(this, Stab);

    _get(Object.getPrototypeOf(Stab.prototype), 'constructor', this).apply(this, arguments);
  }

  return Stab;
})(_definitionsAttack.SkilledAttack);

exports.Stab = Stab;

var Thrust = (function (_SkilledAttack6) {
  _inherits(Thrust, _SkilledAttack6);

  function Thrust() {
    _classCallCheck(this, Thrust);

    _get(Object.getPrototypeOf(Thrust.prototype), 'constructor', this).apply(this, arguments);
  }

  return Thrust;
})(_definitionsAttack.SkilledAttack);

exports.Thrust = Thrust;

var Unarmed = (function (_SkilledAttack7) {
  _inherits(Unarmed, _SkilledAttack7);

  function Unarmed() {
    _classCallCheck(this, Unarmed);

    _get(Object.getPrototypeOf(Unarmed.prototype), 'constructor', this).apply(this, arguments);
  }

  return Unarmed;
})(_definitionsAttack.SkilledAttack);

exports.Unarmed = Unarmed;

},{"../../definitions/attack":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/attack.js","../../definitions/glyph":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/glyph.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ambient = require('./ambient');

var Ambient = _interopRequireWildcard(_ambient);

var _combat = require('./combat');

var Combat = _interopRequireWildcard(_combat);

var _conditions = require('./conditions');

var Conditions = _interopRequireWildcard(_conditions);

var _death = require('./death');

var Death = _interopRequireWildcard(_death);

var _interactions = require('./interactions');

var Interactions = _interopRequireWildcard(_interactions);

var _regeneration = require('./regeneration');

var Regeneration = _interopRequireWildcard(_regeneration);

var _targetting = require('./targetting');

var Targetting = _interopRequireWildcard(_targetting);

exports['default'] = _lodash2['default'].extend({}, Ambient, Combat, Conditions, Death, Interactions, Regeneration, Targetting);
module.exports = exports['default'];

},{"./ambient":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/ambient.js","./combat":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/combat.js","./conditions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/conditions.js","./death":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/death.js","./interactions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/interactions.js","./regeneration":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/regeneration.js","./targetting":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/targetting.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/ambient.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

/* being stunned sucks */

var EmitsLightBehavior = (function (_Behavior) {
  _inherits(EmitsLightBehavior, _Behavior);

  function EmitsLightBehavior() {
    var color = arguments.length <= 0 || arguments[0] === undefined ? '#fff' : arguments[0];

    _classCallCheck(this, EmitsLightBehavior);

    _get(Object.getPrototypeOf(EmitsLightBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.color = _rotJs2['default'].Color.fromString(color);
  }

  _createClass(EmitsLightBehavior, [{
    key: 'spawn',
    value: function spawn(me) {
      me._lightColor = this.color;
      _initGamestate2['default'].world.addLighting(me);
    }
  }, {
    key: 'die',
    value: function die(me) {
      _initGamestate2['default'].world.removeLighting(me);
    }
  }]);

  return EmitsLightBehavior;
})(_definitionsBehavior2['default']);

var EmitsLight = function EmitsLight(color) {
  return new EmitsLightBehavior(color);
};
exports.EmitsLight = EmitsLight;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/combat.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _displayMessageHandler = require('../../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _worldgenMonsterSpawner = require('../../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var _conditions = require('./conditions');

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

/* monsters can attack with this */

var AttacksBehavior = (function (_Behavior) {
  _inherits(AttacksBehavior, _Behavior);

  function AttacksBehavior() {
    _classCallCheck(this, AttacksBehavior);

    _get(Object.getPrototypeOf(AttacksBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFENSE);
  }

  _createClass(AttacksBehavior, [{
    key: 'act',
    value: function act(me) {
      return !me.tryAttack();
    }
  }]);

  return AttacksBehavior;
})(_definitionsBehavior2['default']);

var Attacks = function Attacks() {
  return new AttacksBehavior();
};

exports.Attacks = Attacks;

var TeleportsWhenHitBehavior = (function (_Behavior2) {
  _inherits(TeleportsWhenHitBehavior, _Behavior2);

  function TeleportsWhenHitBehavior() {
    var percent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];

    _classCallCheck(this, TeleportsWhenHitBehavior);

    _get(Object.getPrototypeOf(TeleportsWhenHitBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.percent = percent;
  }

  _createClass(TeleportsWhenHitBehavior, [{
    key: 'takeDamage',
    value: function takeDamage(me) {
      if (_rotJs2['default'].RNG.getPercentage() > this.percent) return;
      _initGamestate2['default'].world.placeEntityAtRandomLocation(me);
    }
  }]);

  return TeleportsWhenHitBehavior;
})(_definitionsBehavior2['default']);

var TeleportsWhenHit = function TeleportsWhenHit(percent) {
  return new TeleportsWhenHitBehavior(percent);
};

exports.TeleportsWhenHit = TeleportsWhenHit;
/* hitting in melee range will stun you */

var ParalyzesWhenHitBehavior = (function (_Behavior3) {
  _inherits(ParalyzesWhenHitBehavior, _Behavior3);

  function ParalyzesWhenHitBehavior() {
    var percent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];
    var range = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];

    _classCallCheck(this, ParalyzesWhenHitBehavior);

    _get(Object.getPrototypeOf(ParalyzesWhenHitBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.percent = percent;
    this.range = range;
  }

  _createClass(ParalyzesWhenHitBehavior, [{
    key: 'takeDamage',
    value: function takeDamage(me, attacker) {
      if (_rotJs2['default'].RNG.getPercentage() > this.percent || me.distBetween(attacker) > this.range) return;
      var turns = (0, _libDiceRoller2['default'])('1d50 + 50');
      attacker.addUniqueBehavior((0, _conditions.Stunned)(turns));
    }
  }]);

  return ParalyzesWhenHitBehavior;
})(_definitionsBehavior2['default']);

var ParalyzesWhenHit = function ParalyzesWhenHit(percent, range) {
  return new ParalyzesWhenHitBehavior(percent, range);
};

exports.ParalyzesWhenHit = ParalyzesWhenHit;

var StealsBehavior = (function (_Behavior4) {
  _inherits(StealsBehavior, _Behavior4);

  function StealsBehavior() {
    var percent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];

    _classCallCheck(this, StealsBehavior);

    _get(Object.getPrototypeOf(StealsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.percent = percent;
  }

  _createClass(StealsBehavior, [{
    key: 'act',
    value: function act(me) {
      if (_rotJs2['default'].RNG.getPercentage() > this.percent) return;
      var didSteal = false;
      var item = null;
      var entities = _initGamestate2['default'].world.getValidEntitiesInRange(me.x, me.y, me.z, 1, function (ent) {
        return me.canAttack(ent);
      });
      _lodash2['default'].each(entities, function (ent) {
        item = _lodash2['default'].sample(ent.inventory);
        if (!item) return;
        didSteal = ent;
        return false;
      });

      if (didSteal) {
        _displayMessageHandler2['default'].add({ message: me.name + ' stole ' + item.name + ' from ' + didSteal.name + '!', type: _displayMessageHandler.MessageTypes.COMBAT });
        didSteal.removeFromInventory(item);
        me.addToInventory(item);
      }
    }
  }]);

  return StealsBehavior;
})(_definitionsBehavior2['default']);

var Steals = function Steals() {
  return new StealsBehavior();
};

exports.Steals = Steals;

var SplitsWhenHitBehavior = (function (_Behavior5) {
  _inherits(SplitsWhenHitBehavior, _Behavior5);

  function SplitsWhenHitBehavior() {
    var percent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];

    _classCallCheck(this, SplitsWhenHitBehavior);

    _get(Object.getPrototypeOf(SplitsWhenHitBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.percent = percent;
  }

  _createClass(SplitsWhenHitBehavior, [{
    key: 'takeDamage',
    value: function takeDamage(me) {
      if (_rotJs2['default'].RNG.getPercentage() > this.percent || me.hp.atMin()) return;
      var validTiles = _initGamestate2['default'].world.getValidTilesInRange(me.x, me.y, me.z, 1, function (tile) {
        return _initGamestate2['default'].world.isTileEmpty(tile.x, tile.y, tile.z);
      });
      var chosenTile = _lodash2['default'].sample(validTiles);

      if (!chosenTile) return;

      var newSpawn = _worldgenMonsterSpawner2['default'].spawnSingle(me._name, chosenTile);
      if (!newSpawn) return;
      var newHp = Math.floor(me.hp.cur / 2);
      me.hp._set(newHp);
      newSpawn.hp._set(newHp);
    }
  }]);

  return SplitsWhenHitBehavior;
})(_definitionsBehavior2['default']);

var SplitsWhenHit = function SplitsWhenHit(percent) {
  return new SplitsWhenHitBehavior(percent);
};
exports.SplitsWhenHit = SplitsWhenHit;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","./conditions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/conditions.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/conditions.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _displayMessageHandler = require('../../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

/* being stunned sucks */

var StunnedBehavior = (function (_Behavior) {
  _inherits(StunnedBehavior, _Behavior);

  function StunnedBehavior() {
    var numTurns = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

    _classCallCheck(this, StunnedBehavior);

    _get(Object.getPrototypeOf(StunnedBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.STUN);
    this.stunTurns = numTurns;
  }

  _createClass(StunnedBehavior, [{
    key: 'act',
    value: function act(me) {
      if (this.stunTurns <= 0) {
        me.removeBehavior(this);
        _displayMessageHandler2['default'].add({ message: me.name + ' is no longer stunned.', type: _displayMessageHandler.MessageTypes.COMBAT });
        return true;
      }

      _displayMessageHandler2['default'].add({ message: me.name + ' is stunned!', type: _displayMessageHandler.MessageTypes.COMBAT });
      this.stunTurns--;
      return false;
    }
  }]);

  return StunnedBehavior;
})(_definitionsBehavior2['default']);

var Stunned = function Stunned(numTurns) {
  return new StunnedBehavior(numTurns);
};

exports.Stunned = Stunned;
/* being poisoned also sucks */

var PoisonedBehavior = (function (_Behavior2) {
  _inherits(PoisonedBehavior, _Behavior2);

  function PoisonedBehavior() {
    var numTurns = arguments.length <= 0 || arguments[0] === undefined ? 3 : arguments[0];

    _classCallCheck(this, PoisonedBehavior);

    _get(Object.getPrototypeOf(PoisonedBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.poisonTurns = numTurns;
  }

  _createClass(PoisonedBehavior, [{
    key: 'act',
    value: function act(me) {
      if (this.poisonTurns <= 0) {
        me.removeBehavior(this);
        _displayMessageHandler2['default'].add({ message: me.name + ' is no longer poisoned.', type: _displayMessageHandler.MessageTypes.COMBAT });
        return;
      }

      var damage = (0, _libDiceRoller2['default'])('1d4');
      _displayMessageHandler2['default'].add({ message: me.name + ' takes ' + damage + ' poison damage!', type: _displayMessageHandler.MessageTypes.COMBAT });
      this.poisonTurns--;
    }
  }]);

  return PoisonedBehavior;
})(_definitionsBehavior2['default']);

var Poisoned = function Poisoned(numTurns) {
  return new PoisonedBehavior(numTurns);
};

exports.Poisoned = Poisoned;
/* being seduced really sucks */

var SeducedBehavior = (function (_Behavior3) {
  _inherits(SeducedBehavior, _Behavior3);

  function SeducedBehavior() {
    var numTurns = arguments.length <= 0 || arguments[0] === undefined ? 2 : arguments[0];

    _classCallCheck(this, SeducedBehavior);

    _get(Object.getPrototypeOf(SeducedBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.STUN);
    this.stunTurns = numTurns;
  }

  _createClass(SeducedBehavior, [{
    key: 'act',
    value: function act(me) {
      me.breakConduct('celibate');
      if (this.stunTurns <= 0) {
        me.removeBehavior(this);
        _displayMessageHandler2['default'].add({ message: me.name + ' is no longer seduced.', type: _displayMessageHandler.MessageTypes.COMBAT });
        return true;
      }

      this.stunTurns--;
      _displayMessageHandler2['default'].add({ message: me.name + ' is seduced!', type: _displayMessageHandler.MessageTypes.COMBAT });

      var item = (0, _lodash2['default'])(me.equipment).values().flatten().sample();
      if (!item) return false;

      me.unequip(item);
      me.dropItem(item);

      _displayMessageHandler2['default'].add({ message: me.name + ' dropped ' + item.name + '!', type: _displayMessageHandler.MessageTypes.COMBAT });
      return false;
    }
  }]);

  return SeducedBehavior;
})(_definitionsBehavior2['default']);

var Seduced = function Seduced(numTurns) {
  return new SeducedBehavior(numTurns);
};
exports.Seduced = Seduced;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/death.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x7, _x8, _x9) { var _again = true; _function: while (_again) { var object = _x7, property = _x8, receiver = _x9; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x7 = parent; _x8 = property; _x9 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _displayMessageHandler = require('../../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _items_special = require('../items/_special');

/* die after a period of time */

var KillsSelfAfterPeriodOfTimeBehavior = (function (_Behavior) {
  _inherits(KillsSelfAfterPeriodOfTimeBehavior, _Behavior);

  function KillsSelfAfterPeriodOfTimeBehavior() {
    var turns = arguments.length <= 0 || arguments[0] === undefined ? 50 : arguments[0];

    _classCallCheck(this, KillsSelfAfterPeriodOfTimeBehavior);

    _get(Object.getPrototypeOf(KillsSelfAfterPeriodOfTimeBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.turns = turns;
  }

  _createClass(KillsSelfAfterPeriodOfTimeBehavior, [{
    key: 'act',
    value: function act(me) {
      if (this.turns-- > 0) return;
      me.die('time');
    }
  }]);

  return KillsSelfAfterPeriodOfTimeBehavior;
})(_definitionsBehavior2['default']);

var KillsSelfAfterPeriodOfTime = function KillsSelfAfterPeriodOfTime(turns) {
  return new KillsSelfAfterPeriodOfTimeBehavior(turns);
};

exports.KillsSelfAfterPeriodOfTime = KillsSelfAfterPeriodOfTime;
/* drop contents on death */

var DropsItemsBehavior = (function (_Behavior2) {
  _inherits(DropsItemsBehavior, _Behavior2);

  function DropsItemsBehavior() {
    _classCallCheck(this, DropsItemsBehavior);

    _get(Object.getPrototypeOf(DropsItemsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
  }

  _createClass(DropsItemsBehavior, [{
    key: 'die',
    value: function die(me) {
      var equipped = (0, _lodash2['default'])(me.equipment).values().flatten().value();
      _lodash2['default'].each(equipped, function (item) {
        return me.unequip(item);
      });
      _lodash2['default'].each(me.inventory, function (item) {
        me.dropItem(item);
      });
    }
  }]);

  return DropsItemsBehavior;
})(_definitionsBehavior2['default']);

var DropsItems = function DropsItems() {
  return new DropsItemsBehavior();
};

exports.DropsItems = DropsItems;
/* monsters leave a corpse */

var LeavesCorpseBehavior = (function (_Behavior3) {
  _inherits(LeavesCorpseBehavior, _Behavior3);

  function LeavesCorpseBehavior() {
    var dropPercent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];

    _classCallCheck(this, LeavesCorpseBehavior);

    _get(Object.getPrototypeOf(LeavesCorpseBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.dropPercent = dropPercent;
  }

  _createClass(LeavesCorpseBehavior, [{
    key: 'die',
    value: function die(me) {
      if (_rotJs2['default'].RNG.getPercentage() > this.dropPercent) return;
      var corpse = new _items_special.Corpse({ monsterName: me.name, glyph: { fg: me.glyph.fg } });
      _initGamestate2['default'].world.moveItem(corpse, me.x, me.y, me.z);
    }
  }]);

  return LeavesCorpseBehavior;
})(_definitionsBehavior2['default']);

var LeavesCorpse = function LeavesCorpse(percent) {
  return new LeavesCorpseBehavior(percent);
};

exports.LeavesCorpse = LeavesCorpse;
/* some things drop gold */

var DropsGoldBehavior = (function (_Behavior4) {
  _inherits(DropsGoldBehavior, _Behavior4);

  function DropsGoldBehavior(gold) {
    _classCallCheck(this, DropsGoldBehavior);

    _get(Object.getPrototypeOf(DropsGoldBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.goldDrop = gold;
  }

  _createClass(DropsGoldBehavior, [{
    key: 'die',
    value: function die(me) {
      var droppedGold = (0, _libDiceRoller2['default'])(this.goldDrop);
      var goldItem = new _items_special.Gold(droppedGold + me.gold);
      if (goldItem.goldValue === 0) return;
      _initGamestate2['default'].world.moveItem(goldItem, me.x, me.y, me.z);
    }
  }]);

  return DropsGoldBehavior;
})(_definitionsBehavior2['default']);

var DropsGold = function DropsGold(gold) {
  return new DropsGoldBehavior(gold);
};

exports.DropsGold = DropsGold;
/* explodes upon death. can be pretty dangerous */

var ExplodesBehavior = (function (_Behavior5) {
  _inherits(ExplodesBehavior, _Behavior5);

  function ExplodesBehavior() {
    var roll = arguments.length <= 0 || arguments[0] === undefined ? '1d4' : arguments[0];
    var range = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
    var percent = arguments.length <= 2 || arguments[2] === undefined ? 100 : arguments[2];

    _classCallCheck(this, ExplodesBehavior);

    _get(Object.getPrototypeOf(ExplodesBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.DEFER);
    this.roll = roll;
    this.percent = percent;
    this.range = range;
  }

  _createClass(ExplodesBehavior, [{
    key: 'die',
    value: function die(me) {
      var _this = this;

      if (_rotJs2['default'].RNG.getPercentage() > this.percent) {
        _displayMessageHandler2['default'].add({ message: me.name + ' explodes a little bit.', type: _displayMessageHandler.MessageTypes.COMBAT });
        return;
      }
      _displayMessageHandler2['default'].add({ message: me.name + ' violently explodes!', type: _displayMessageHandler.MessageTypes.COMBAT });
      _lodash2['default'].each(_initGamestate2['default'].world.getValidEntitiesInRange(me.x, me.y, me.z, this.range), function (entity) {
        if (me === entity || entity.hp.atMin()) return; // infinite loop prevention
        entity.takeDamage((0, _libDiceRoller2['default'])(_this.roll), me);
      });
    }
  }]);

  return ExplodesBehavior;
})(_definitionsBehavior2['default']);

var Explodes = function Explodes(roll, range, percent) {
  return new ExplodesBehavior(roll, range, percent);
};

exports.Explodes = Explodes;
/* drop contents on death */

var LifeSaveBehavior = (function (_Behavior6) {
  _inherits(LifeSaveBehavior, _Behavior6);

  function LifeSaveBehavior(numUses) {
    _classCallCheck(this, LifeSaveBehavior);

    _get(Object.getPrototypeOf(LifeSaveBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);this.numUses = numUses;
  }

  _createClass(LifeSaveBehavior, [{
    key: 'takeDamage',
    value: function takeDamage(me) {
      if (me.hp.atMin()) {
        me.hp.toMax();
        _displayMessageHandler2['default'].add({ message: me.name + '\'s life was saved!', type: _displayMessageHandler.MessageTypes.COMBAT });
        me.breakConduct('lifeSave');

        if (this.numUses-- <= 0) me.removeBehavior(this);

        if (this._itemRef) {
          this._itemRef.disintegrate(me);
        }
      }
    }
  }]);

  return LifeSaveBehavior;
})(_definitionsBehavior2['default']);

var LifeSave = function LifeSave() {
  var numUses = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
  return new LifeSaveBehavior(numUses);
};
exports.LifeSave = LifeSave;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/interactions.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _displayMessageHandler = require('../../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

/* retrieve items from the ground */

var PickUpItemsBehavior = (function (_Behavior) {
  _inherits(PickUpItemsBehavior, _Behavior);

  function PickUpItemsBehavior() {
    var blacklist = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
    var whitelist = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

    _classCallCheck(this, PickUpItemsBehavior);

    _get(Object.getPrototypeOf(PickUpItemsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.INTERACT);
    this.blacklist = blacklist;
    this.whitelist = whitelist;
  }

  _createClass(PickUpItemsBehavior, [{
    key: 'act',
    value: function act(me) {
      var _this = this;

      var items = _initGamestate2['default'].world.getItemsAt(me.x, me.y, me.z);
      (0, _lodash2['default'])(items).filter(function (item) {
        return !item._canPickUpTurn || item._canPickUpTurn <= me.currentTurn;
      }).each(function (item) {
        if (_this.whitelist.length && !_lodash2['default'].contains(_this.whitelist, item.getType())) return;
        if (_this.blacklist.length && _lodash2['default'].contains(_this.blacklist, item.getType())) return;
        _initGamestate2['default'].world.removeItem(item);
        me.addToInventory(item);
        _displayMessageHandler2['default'].add({ message: me.name + ' picked up ' + item.name + '.', type: _displayMessageHandler.MessageTypes.ITEM });
      }).value();
    }
  }]);

  return PickUpItemsBehavior;
})(_definitionsBehavior2['default']);

var PickUpItems = function PickUpItems(bl, wl) {
  return new PickUpItemsBehavior(bl, wl);
};

exports.PickUpItems = PickUpItems;
/* interacts with everything */

var InteractsBehavior = (function (_Behavior2) {
  _inherits(InteractsBehavior, _Behavior2);

  function InteractsBehavior() {
    _classCallCheck(this, InteractsBehavior);

    _get(Object.getPrototypeOf(InteractsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.INTERACT);
  }

  _createClass(InteractsBehavior, [{
    key: 'act',
    value: function act(me) {
      var tiles = _initGamestate2['default'].world.getAllTilesInRange(me.x, me.y, me.z, 1);

      for (var i = 0; i < tiles.length; i++) {
        var tile = tiles[i];

        if (tile.canInteract && tile.interact && tile.canInteract(me)) {
          var msg = tile.interact(me);
          if (msg) _displayMessageHandler2['default'].add({ message: msg, type: _displayMessageHandler.MessageTypes.DUNGEON });
          return false;
        }
      }

      return true;
    }
  }]);

  return InteractsBehavior;
})(_definitionsBehavior2['default']);

var Interacts = function Interacts() {
  return new InteractsBehavior();
};

exports.Interacts = Interacts;
/* breaks down doors that it finds */

var BreaksDoorsBehavior = (function (_Behavior3) {
  _inherits(BreaksDoorsBehavior, _Behavior3);

  function BreaksDoorsBehavior() {
    _classCallCheck(this, BreaksDoorsBehavior);

    _get(Object.getPrototypeOf(BreaksDoorsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.INTERACT);
  }

  _createClass(BreaksDoorsBehavior, [{
    key: 'act',
    value: function act() {
      return false;
    }
  }]);

  return BreaksDoorsBehavior;
})(_definitionsBehavior2['default']);

var BreaksDoors = function BreaksDoors() {
  return new BreaksDoorsBehavior();
};

exports.BreaksDoors = BreaksDoors;
/* opens doors that it finds */

var OpensDoorsBehavior = (function (_Behavior4) {
  _inherits(OpensDoorsBehavior, _Behavior4);

  function OpensDoorsBehavior() {
    _classCallCheck(this, OpensDoorsBehavior);

    _get(Object.getPrototypeOf(OpensDoorsBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.INTERACT);
  }

  _createClass(OpensDoorsBehavior, [{
    key: 'act',
    value: function act(me) {
      var doors = _initGamestate2['default'].world.getValidTilesInRange(me.x, me.y, me.z, 1, function (tile) {
        return tile.constructor.name === 'Door' && tile.density;
      });
      if (doors.length > 0) {
        var door = doors[0];
        door.interact(me);
        return false;
      }

      return true;
    }
  }]);

  return OpensDoorsBehavior;
})(_definitionsBehavior2['default']);

var OpensDoors = function OpensDoors() {
  return new OpensDoorsBehavior();
};
exports.OpensDoors = OpensDoors;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/regeneration.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var RegeneratesHpBehavior = (function (_Behavior) {
  _inherits(RegeneratesHpBehavior, _Behavior);

  function RegeneratesHpBehavior() {
    var amount = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

    _classCallCheck(this, RegeneratesHpBehavior);

    _get(Object.getPrototypeOf(RegeneratesHpBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.amount = amount;
  }

  _createClass(RegeneratesHpBehavior, [{
    key: 'act',
    value: function act(me) {
      if (me.currentTurn % me.getRegenHp() === 0) me.hp.add(this.amount);
    }
  }]);

  return RegeneratesHpBehavior;
})(_definitionsBehavior2['default']);

var RegeneratesHp = function RegeneratesHp() {
  return new RegeneratesHpBehavior();
};

exports.RegeneratesHp = RegeneratesHp;

var RegeneratesMpBehavior = (function (_Behavior2) {
  _inherits(RegeneratesMpBehavior, _Behavior2);

  function RegeneratesMpBehavior() {
    var amount = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];

    _classCallCheck(this, RegeneratesMpBehavior);

    _get(Object.getPrototypeOf(RegeneratesMpBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
    this.amount = amount;
  }

  _createClass(RegeneratesMpBehavior, [{
    key: 'act',
    value: function act(me) {
      if (me.currentTurn % me.getRegenMp() === 0) me.mp.add(this.amount);
    }
  }]);

  return RegeneratesMpBehavior;
})(_definitionsBehavior2['default']);

var RegeneratesMp = function RegeneratesMp() {
  return new RegeneratesMpBehavior();
};

exports.RegeneratesMp = RegeneratesMp;

var HealsBelowPercentBehavior = (function (_Behavior3) {
  _inherits(HealsBelowPercentBehavior, _Behavior3);

  function HealsBelowPercentBehavior() {
    var percent = arguments.length <= 0 || arguments[0] === undefined ? 50 : arguments[0];

    _classCallCheck(this, HealsBelowPercentBehavior);

    _get(Object.getPrototypeOf(HealsBelowPercentBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.HEAL);
    this.healPercent = percent;
  }

  _createClass(HealsBelowPercentBehavior, [{
    key: 'act',
    value: function act(me) {
      if (me.hp.gtPercent(this.healPercent)) return true;
      var healItems = _lodash2['default'].filter(me.inventory, function (item) {
        return item.healRoll && item.canUse(me);
      });
      if (healItems.length === 0) return true;
      var healItem = _lodash2['default'].sample(healItems);
      healItem.use(me);
      return false;
    }
  }]);

  return HealsBelowPercentBehavior;
})(_definitionsBehavior2['default']);

var HealsBelowPercent = function HealsBelowPercent(percent) {
  return new HealsBelowPercentBehavior(percent);
};
exports.HealsBelowPercent = HealsBelowPercent;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/targetting.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsBehavior = require('../../definitions/behavior');

var _definitionsBehavior2 = _interopRequireDefault(_definitionsBehavior);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var isTargetBad = function isTargetBad(me) {
  return !me.target || me.target && me.target.hp.atMin() || me.target && me.target.z !== me.z;
};

// retarget and find a new player to attack
var targetNewPlayer = function targetNewPlayer(me) {
  if (isTargetBad(me)) {
    me.setTarget((0, _lodash2['default'])(_initGamestate2['default'].players).reject(function (player) {
      return player.hp.atMin();
    }).sample());
  }

  if (!me.target) return false; // they can wait, you may come back

  return true; // successful retarget
};

/* always seeks a target */

var BloodthirstyBehavior = (function (_Behavior) {
  _inherits(BloodthirstyBehavior, _Behavior);

  function BloodthirstyBehavior() {
    _classCallCheck(this, BloodthirstyBehavior);

    _get(Object.getPrototypeOf(BloodthirstyBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.TARGET);
  }

  _createClass(BloodthirstyBehavior, [{
    key: 'act',
    value: function act(me) {
      if (!targetNewPlayer(me)) return;
      me.stepTowards(me.target);
      return false;
    }
  }]);

  return BloodthirstyBehavior;
})(_definitionsBehavior2['default']);

var Bloodthirsty = function Bloodthirsty() {
  return new BloodthirstyBehavior();
};

exports.Bloodthirsty = Bloodthirsty;
/* seeks a target if they're within vision range */

var SeeksTargetInSightBehavior = (function (_Behavior2) {
  _inherits(SeeksTargetInSightBehavior, _Behavior2);

  function SeeksTargetInSightBehavior() {
    _classCallCheck(this, SeeksTargetInSightBehavior);

    _get(Object.getPrototypeOf(SeeksTargetInSightBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.MOVE);
  }

  _createClass(SeeksTargetInSightBehavior, [{
    key: 'act',
    value: function act(me) {
      var possibleTargets = [];

      _initGamestate2['default'].world.fov[me.z].compute(me.x, me.y, me.getSight(), function (x, y) {
        var entity = _initGamestate2['default'].world.getEntity(x, y, me.z);
        if (!entity || !me.canAttack(entity) || !me.canSee(entity)) return;
        possibleTargets.push(entity);
      });

      if (me.target && _lodash2['default'].contains(possibleTargets, me.target)) {
        me.stepTowards(me.target);
      } else if (possibleTargets.length > 0) {
        me.setTarget(_lodash2['default'].sample(possibleTargets));
        me.stepTowards(me.target);
      } else {
        me.stepRandomly();
      }

      return false;
    }
  }]);

  return SeeksTargetInSightBehavior;
})(_definitionsBehavior2['default']);

var SeeksTargetInSight = function SeeksTargetInSight() {
  return new SeeksTargetInSightBehavior();
};

exports.SeeksTargetInSight = SeeksTargetInSight;

var SeeksTargetViaHearingBehavior = (function (_Behavior3) {
  _inherits(SeeksTargetViaHearingBehavior, _Behavior3);

  function SeeksTargetViaHearingBehavior() {
    var range = arguments.length <= 0 || arguments[0] === undefined ? 50 : arguments[0];

    _classCallCheck(this, SeeksTargetViaHearingBehavior);

    _get(Object.getPrototypeOf(SeeksTargetViaHearingBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.MOVE);
    this.range = range;
  }

  _createClass(SeeksTargetViaHearingBehavior, [{
    key: 'act',
    value: function act(me) {
      if (!me.target || isTargetBad(me)) return true;
      me.stepTowards(me.target);
      return false;
    }
  }, {
    key: 'hear',
    value: function hear(me, potentialTarget) {
      var distBetweenTarget = me.distBetween(potentialTarget);
      if (distBetweenTarget > this.range) return;
      if (!me.target) {
        me.setTarget(potentialTarget);
      } else if (distBetweenTarget < me.distBetween(me.target)) {
        me.setTarget(potentialTarget);
      }
    }
  }]);

  return SeeksTargetViaHearingBehavior;
})(_definitionsBehavior2['default']);

var SeeksTargetViaHearing = function SeeksTargetViaHearing(range) {
  return new SeeksTargetViaHearingBehavior(range);
};

exports.SeeksTargetViaHearing = SeeksTargetViaHearing;
/* wanders around aimlessly */

var WandersBehavior = (function (_Behavior4) {
  _inherits(WandersBehavior, _Behavior4);

  function WandersBehavior() {
    _classCallCheck(this, WandersBehavior);

    _get(Object.getPrototypeOf(WandersBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.MOVE);
  }

  _createClass(WandersBehavior, [{
    key: 'act',
    value: function act(me) {
      me.stepRandomly();
      return false;
    }
  }]);

  return WandersBehavior;
})(_definitionsBehavior2['default']);

var Wanders = function Wanders() {
  return new WandersBehavior();
};

exports.Wanders = Wanders;
/* has very loud footsteps. pretty much, only players have or need this */

var AlertsOnStepBehavior = (function (_Behavior5) {
  _inherits(AlertsOnStepBehavior, _Behavior5);

  function AlertsOnStepBehavior() {
    _classCallCheck(this, AlertsOnStepBehavior);

    _get(Object.getPrototypeOf(AlertsOnStepBehavior.prototype), 'constructor', this).call(this, _definitionsBehavior.Priority.ALWAYS);
  }

  _createClass(AlertsOnStepBehavior, [{
    key: 'step',
    value: function step(me) {
      me.alertAllInRange();
    }
  }]);

  return AlertsOnStepBehavior;
})(_definitionsBehavior2['default']);

var AlertsOnStep = function AlertsOnStep() {
  return new AlertsOnStepBehavior();
};
exports.AlertsOnStep = AlertsOnStep;

},{"../../definitions/behavior":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/fountain.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _items_special = require('../items/_special');

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _definitionsEffect = require('../../definitions/effect');

var _definitionsEffect2 = _interopRequireDefault(_definitionsEffect);

var _worldgenMonsterSpawner = require('../../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var FountainEffect = (function (_Effect) {
  _inherits(FountainEffect, _Effect);

  function FountainEffect() {
    _classCallCheck(this, FountainEffect);

    _get(Object.getPrototypeOf(FountainEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  return FountainEffect;
})(_definitionsEffect2['default']);

var NoEffect = (function (_FountainEffect) {
  _inherits(NoEffect, _FountainEffect);

  function NoEffect() {
    _classCallCheck(this, NoEffect);

    _get(Object.getPrototypeOf(NoEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(NoEffect, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' drinks from the fountain, but the tepid water is tasteless.');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 19;
    }
  }]);

  return NoEffect;
})(FountainEffect);

exports.NoEffect = NoEffect;

var DropGold = (function (_FountainEffect2) {
  _inherits(DropGold, _FountainEffect2);

  function DropGold() {
    _classCallCheck(this, DropGold);

    _get(Object.getPrototypeOf(DropGold.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DropGold, null, [{
    key: 'use',
    value: function use(entity) {
      var gold = new _items_special.Gold((0, _libDiceRoller2['default'])('1d1000'));
      _initGamestate2['default'].world.moveItem(gold, entity.x, entity.y, entity.z);
      this.msg(entity, entity.name + ' hears the sound of gold dropping to the ground.');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 8;
    }
  }]);

  return DropGold;
})(FountainEffect);

exports.DropGold = DropGold;

var Contaminated = (function (_FountainEffect3) {
  _inherits(Contaminated, _FountainEffect3);

  function Contaminated() {
    _classCallCheck(this, Contaminated);

    _get(Object.getPrototypeOf(Contaminated.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Contaminated, null, [{
    key: 'use',
    value: function use(entity) {
      var hasPsnRst = entity.hasTrait('PoisonResistance');
      var damageRoll = hasPsnRst ? '1d4' : '1d10';
      var abusesStats = !hasPsnRst;
      var msg = hasPsnRst ? entity.name + ' drank water from a nearby apple farm runoff stream.' : 'Yuck! ' + entity.name + ' drank contaminated water.';
      if (abusesStats) {
        entity.abuse('str', '1d2+1');
        entity.abuse('con', '1d2');
      }

      entity.takeDamage((0, _libDiceRoller2['default'])(damageRoll), { name: 'fountain' });
      this.msg(entity, msg);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Contaminated;
})(FountainEffect);

exports.Contaminated = Contaminated;

var BlurredVision = (function (_FountainEffect4) {
  _inherits(BlurredVision, _FountainEffect4);

  function BlurredVision() {
    _classCallCheck(this, BlurredVision);

    _get(Object.getPrototypeOf(BlurredVision.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BlurredVision, null, [{
    key: 'use',
    value: function use(entity) {
      entity.addTrait(Traits.SeeInvisible({ level: 5 }));
      entity.exercise('wis');
      this.msg(entity, entity.name + ' vision blurs, then returns sharper than before.');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 2;
    }
  }]);

  return BlurredVision;
})(FountainEffect);

exports.BlurredVision = BlurredVision;

var SpawnSnakes = (function (_FountainEffect5) {
  _inherits(SpawnSnakes, _FountainEffect5);

  function SpawnSnakes() {
    _classCallCheck(this, SpawnSnakes);

    _get(Object.getPrototypeOf(SpawnSnakes.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnSnakes, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' drinks from the fountain.');
      this.msg(entity, 'An endless stream of snakes pours out!');
      var spawned = (0, _libDiceRoller2['default'])('1d5 + 1');

      var validTiles = _lodash2['default'].sample(this.getEmptyTilesInRange(entity), spawned);

      for (var i = 0; i < spawned; i++) {
        if (!validTiles[i]) continue;
        _worldgenMonsterSpawner2['default'].spawnSingle('waterMoccasin', validTiles[i]);
      }
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnSnakes;
})(FountainEffect);

exports.SpawnSnakes = SpawnSnakes;

var StrangeFeeling = (function (_FountainEffect6) {
  _inherits(StrangeFeeling, _FountainEffect6);

  function StrangeFeeling() {
    _classCallCheck(this, StrangeFeeling);

    _get(Object.getPrototypeOf(StrangeFeeling.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(StrangeFeeling, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' momentarily feels strange, then it passes.');
      entity.exercise('wis');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 3;
    }
  }]);

  return StrangeFeeling;
})(FountainEffect);

exports.StrangeFeeling = StrangeFeeling;

var CurseItems = (function (_FountainEffect7) {
  _inherits(CurseItems, _FountainEffect7);

  function CurseItems() {
    _classCallCheck(this, CurseItems);

    _get(Object.getPrototypeOf(CurseItems.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(CurseItems, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' drank some bad water!');
      _lodash2['default'].each(entity.inventory, function (item) {
        if (_rotJs2['default'].RNG.getPercentage() > 20) return;
        item.curse();
      });
    }
  }, {
    key: 'probability',
    get: function get() {
      return 2;
    }
  }]);

  return CurseItems;
})(FountainEffect);

exports.CurseItems = CurseItems;

var SpawnDemon = (function (_FountainEffect8) {
  _inherits(SpawnDemon, _FountainEffect8);

  function SpawnDemon() {
    _classCallCheck(this, SpawnDemon);

    _get(Object.getPrototypeOf(SpawnDemon.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnDemon, null, [{
    key: 'use',
    value: function use(entity) {

      var validTile = _lodash2['default'].sample(this.getEmptyTilesInRange(entity));

      if (!validTile) return;
      this.msg(entity, entity.name + ' summons a demon from the water plane!');
      _worldgenMonsterSpawner2['default'].spawnSingle('waterDemon', validTile);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnDemon;
})(FountainEffect);

exports.SpawnDemon = SpawnDemon;

var SpawnNymph = (function (_FountainEffect9) {
  _inherits(SpawnNymph, _FountainEffect9);

  function SpawnNymph() {
    _classCallCheck(this, SpawnNymph);

    _get(Object.getPrototypeOf(SpawnNymph.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnNymph, null, [{
    key: 'use',
    value: function use(entity) {

      var validTile = _lodash2['default'].sample(this.getEmptyTilesInRange(entity));
      if (!validTile) return;

      this.msg(entity, entity.name + ' attracts a water nymph!');
      _worldgenMonsterSpawner2['default'].spawnSingle('waterNymph', validTile);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnNymph;
})(FountainEffect);

exports.SpawnNymph = SpawnNymph;

},{"../../definitions/effect":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/effect.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","../items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/sink-drink.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _definitionsEffect = require('../../definitions/effect');

var _definitionsEffect2 = _interopRequireDefault(_definitionsEffect);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _worldgenMonsterSpawner = require('../../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var _constantsRandom = require('../../constants/random');

var SinkDrinkEffect = (function (_Effect) {
  _inherits(SinkDrinkEffect, _Effect);

  function SinkDrinkEffect() {
    _classCallCheck(this, SinkDrinkEffect);

    _get(Object.getPrototypeOf(SinkDrinkEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  return SinkDrinkEffect;
})(_definitionsEffect2['default']);

var NoEffect = (function (_SinkDrinkEffect) {
  _inherits(NoEffect, _SinkDrinkEffect);

  function NoEffect() {
    _classCallCheck(this, NoEffect);

    _get(Object.getPrototypeOf(NoEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(NoEffect, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' takes a sip of water from the sink.');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 25;
    }
  }]);

  return NoEffect;
})(SinkDrinkEffect);

exports.NoEffect = NoEffect;

var HardWater = (function (_SinkDrinkEffect2) {
  _inherits(HardWater, _SinkDrinkEffect2);

  function HardWater() {
    _classCallCheck(this, HardWater);

    _get(Object.getPrototypeOf(HardWater.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HardWater, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' tastes hard, awful water.');
      entity.gainXp(1);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 20;
    }
  }]);

  return HardWater;
})(SinkDrinkEffect);

exports.HardWater = HardWater;

var HotWater = (function (_SinkDrinkEffect3) {
  _inherits(HotWater, _SinkDrinkEffect3);

  function HotWater() {
    _classCallCheck(this, HotWater);

    _get(Object.getPrototypeOf(HotWater.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HotWater, null, [{
    key: 'use',
    value: function use(entity) {
      var hasFireRst = entity.hasTrait('FireResistance');
      var msg = entity.name + ' took a sip of scalding hot water.';
      if (hasFireRst) {
        msg += ' It was quite tasty.';
      } else {
        var damage = (0, _libDiceRoller2['default'])('1d6');
        entity.takeDamage(damage, { name: 'sink' });
      }

      this.msg(entity, msg);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 5;
    }
  }]);

  return HotWater;
})(SinkDrinkEffect);

exports.HotWater = HotWater;

var SpawnRat = (function (_SinkDrinkEffect4) {
  _inherits(SpawnRat, _SinkDrinkEffect4);

  function SpawnRat() {
    _classCallCheck(this, SpawnRat);

    _get(Object.getPrototypeOf(SpawnRat.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnRat, null, [{
    key: 'use',
    value: function use(entity, sink) {

      var validTile = _lodash2['default'].sample(this.getEmptyTilesInRange(sink));

      if (!validTile) return;
      this.msg(entity, entity.name + ' found a rat in the sink. Ewww!');
      _worldgenMonsterSpawner2['default'].spawnSingle('sewerRat', validTile);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnRat;
})(SinkDrinkEffect);

exports.SpawnRat = SpawnRat;

var SpawnElemental = (function (_SinkDrinkEffect5) {
  _inherits(SpawnElemental, _SinkDrinkEffect5);

  function SpawnElemental() {
    _classCallCheck(this, SpawnElemental);

    _get(Object.getPrototypeOf(SpawnElemental.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnElemental, null, [{
    key: 'use',
    value: function use(entity, sink) {

      var validTile = _lodash2['default'].sample(this.getEmptyTilesInRange(sink));

      if (!validTile) return;
      this.msg(entity, entity.name + ' caused the water to think for itself!');
      _worldgenMonsterSpawner2['default'].spawnSingle('waterElemental', validTile);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnElemental;
})(SinkDrinkEffect);

exports.SpawnElemental = SpawnElemental;

var RingGen = (function (_SinkDrinkEffect6) {
  _inherits(RingGen, _SinkDrinkEffect6);

  function RingGen() {
    _classCallCheck(this, RingGen);

    _get(Object.getPrototypeOf(RingGen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingGen, null, [{
    key: 'use',
    value: function use(entity, sink) {
      if (sink._gotRing) {
        this.msg(entity, entity.name + ' sees murky water in the sink.');
        return;
      }
      sink._gotRing = true;
      entity.exercise('wis');
      var ring = (0, _constantsRandom.Ring)({ bucName: 'uncursed' });
      _initGamestate2['default'].world.moveItem(ring, entity.x, entity.y, entity.z);
      this.msg(entity, entity.name + ' found a ring in the sink!');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return RingGen;
})(SinkDrinkEffect);

exports.RingGen = RingGen;

var PotionDrink = (function (_SinkDrinkEffect7) {
  _inherits(PotionDrink, _SinkDrinkEffect7);

  function PotionDrink() {
    _classCallCheck(this, PotionDrink);

    _get(Object.getPrototypeOf(PotionDrink.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(PotionDrink, null, [{
    key: 'use',
    value: function use(entity) {
      var potion = (0, _constantsRandom.Potion)({ bucName: 'uncursed' });
      this.msg(entity, entity.name + ' sees ' + potion.color + ' water flowing in the sink!');
      potion.use(entity);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return PotionDrink;
})(SinkDrinkEffect);

exports.PotionDrink = PotionDrink;

},{"../../constants/random":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/random.js","../../definitions/effect":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/effect.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/sink-kick.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _definitionsEffect = require('../../definitions/effect');

var _definitionsEffect2 = _interopRequireDefault(_definitionsEffect);

var _constantsRandom = require('../../constants/random');

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _worldgenMonsterSpawner = require('../../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var SinkKickEffect = (function (_Effect) {
  _inherits(SinkKickEffect, _Effect);

  function SinkKickEffect() {
    _classCallCheck(this, SinkKickEffect);

    _get(Object.getPrototypeOf(SinkKickEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  return SinkKickEffect;
})(_definitionsEffect2['default']);

var BasicEffect = (function (_SinkKickEffect) {
  _inherits(BasicEffect, _SinkKickEffect);

  function BasicEffect() {
    _classCallCheck(this, BasicEffect);

    _get(Object.getPrototypeOf(BasicEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BasicEffect, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' kicks the sink and it vibrates nosily.');
      entity.alertAllInRange(50);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 7;
    }
  }]);

  return BasicEffect;
})(SinkKickEffect);

exports.BasicEffect = BasicEffect;

var RingGen = (function (_SinkKickEffect2) {
  _inherits(RingGen, _SinkKickEffect2);

  function RingGen() {
    _classCallCheck(this, RingGen);

    _get(Object.getPrototypeOf(RingGen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingGen, null, [{
    key: 'use',
    value: function use(entity, sink) {
      if (sink._gotRing) {
        this.msg(entity, entity.name + ' kicked murky water out of the sink.');
        return;
      }
      sink._gotRing = true;
      entity.exercise('wis');
      entity.exercise('dex');
      var ring = (0, _constantsRandom.Ring)({ bucName: 'uncursed' });
      _initGamestate2['default'].world.moveItem(ring, entity.x, entity.y, entity.z);
      this.msg(entity, entity.name + ' found a ring shining in the murky goop!');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 3;
    }
  }]);

  return RingGen;
})(SinkKickEffect);

exports.RingGen = RingGen;

var BadKick = (function (_SinkKickEffect3) {
  _inherits(BadKick, _SinkKickEffect3);

  function BadKick() {
    _classCallCheck(this, BadKick);

    _get(Object.getPrototypeOf(BadKick.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BadKick, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' fumbled while kicking the sink.');
      entity.alertAllInRange(50);
      entity.abuse('dex');
      entity.abuse('wis');
      var damage = (0, _libDiceRoller2['default'])('1d5');
      entity.takeDamage(damage, { name: 'sink' });
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return BadKick;
})(SinkKickEffect);

exports.BadKick = BadKick;

var SpawnsPudding = (function (_SinkKickEffect4) {
  _inherits(SpawnsPudding, _SinkKickEffect4);

  function SpawnsPudding() {
    _classCallCheck(this, SpawnsPudding);

    _get(Object.getPrototypeOf(SpawnsPudding.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnsPudding, null, [{
    key: 'use',
    value: function use(entity, sink) {
      var validTile = _lodash2['default'].sample(this.getEmptyTilesInRange(sink));

      if (!validTile) return;
      this.msg(entity, entity.name + ' caused black ooze to rise out of the sink!');
      _worldgenMonsterSpawner2['default'].spawnSingle('blackPudding', validTile);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnsPudding;
})(SinkKickEffect);

exports.SpawnsPudding = SpawnsPudding;

},{"../../constants/random":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/random.js","../../definitions/effect":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/effect.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/throne.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _definitionsEffect = require('../../definitions/effect');

var _definitionsEffect2 = _interopRequireDefault(_definitionsEffect);

var _worldgenMonsterSpawner = require('../../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var ThroneEffect = (function (_Effect) {
  _inherits(ThroneEffect, _Effect);

  function ThroneEffect() {
    _classCallCheck(this, ThroneEffect);

    _get(Object.getPrototypeOf(ThroneEffect.prototype), 'constructor', this).apply(this, arguments);
  }

  return ThroneEffect;
})(_definitionsEffect2['default']);

var Identify = (function (_ThroneEffect) {
  _inherits(Identify, _ThroneEffect);

  function Identify() {
    _classCallCheck(this, Identify);

    _get(Object.getPrototypeOf(Identify.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Identify, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' was granted insight!');
      _lodash2['default'].each(entity.inventory, function (item) {
        if (_rotJs2['default'].RNG.getPercentage() <= 20) return;
        item.identify();
      });
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Identify;
})(ThroneEffect);

exports.Identify = Identify;

var HealthGainBonus = (function (_ThroneEffect2) {
  _inherits(HealthGainBonus, _ThroneEffect2);

  function HealthGainBonus() {
    _classCallCheck(this, HealthGainBonus);

    _get(Object.getPrototypeOf(HealthGainBonus.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HealthGainBonus, null, [{
    key: 'use',
    value: function use(entity) {
      var hpGained = (0, _libDiceRoller2['default'])('1d10');
      this.msg(entity, entity.name + ' feels much, much better!');
      entity.hp.max += hpGained;
      entity.hp.toMax();
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return HealthGainBonus;
})(ThroneEffect);

exports.HealthGainBonus = HealthGainBonus;

var Ouch = (function (_ThroneEffect3) {
  _inherits(Ouch, _ThroneEffect3);

  function Ouch() {
    _classCallCheck(this, Ouch);

    _get(Object.getPrototypeOf(Ouch.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Ouch, null, [{
    key: 'use',
    value: function use(entity) {
      var hpLost = (0, _libDiceRoller2['default'])('1d10');
      var statLost = (0, _libDiceRoller2['default'])('1d4 + 2');
      var stat = _lodash2['default'].sample(['con', 'dex', 'int', 'wis', 'str', 'cha', 'luk']);
      this.msg(entity, entity.name + ' feels a painful surge!');
      entity.takeDamage(hpLost, { name: 'throne' });
      entity[stat] -= statLost;
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Ouch;
})(ThroneEffect);

exports.Ouch = Ouch;

var Shocking = (function (_ThroneEffect4) {
  _inherits(Shocking, _ThroneEffect4);

  function Shocking() {
    _classCallCheck(this, Shocking);

    _get(Object.getPrototypeOf(Shocking.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Shocking, null, [{
    key: 'use',
    value: function use(entity) {
      var hasShkRst = entity.hasTrait('ShockResistance');
      var damageRoll = hasShkRst ? '1d6' : '1d30';

      entity.abuse('con', '1d1');
      entity.takeDamage((0, _libDiceRoller2['default'])(damageRoll), { name: 'throne' });
      this.msg(entity, entity.name + ' was viciously shocked!');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Shocking;
})(ThroneEffect);

exports.Shocking = Shocking;

var Clarity = (function (_ThroneEffect5) {
  _inherits(Clarity, _ThroneEffect5);

  function Clarity() {
    _classCallCheck(this, Clarity);

    _get(Object.getPrototypeOf(Clarity.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Clarity, null, [{
    key: 'use',
    value: function use(entity) {
      if (entity.hasTrait('SeeInvisible')) {
        this.msg(entity, entity.name + ' has a strange sensation, then it passes.');
        return;
      }
      entity.addTrait(Traits.SeeInvisible({ level: 5 }));
      this.msg(entity, entity.name + ' has a moment of clarity.');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Clarity;
})(ThroneEffect);

exports.Clarity = Clarity;

var LoseThatGold = (function (_ThroneEffect6) {
  _inherits(LoseThatGold, _ThroneEffect6);

  function LoseThatGold() {
    _classCallCheck(this, LoseThatGold);

    _get(Object.getPrototypeOf(LoseThatGold.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LoseThatGold, null, [{
    key: 'use',
    value: function use(entity) {
      if (entity.gold === 0) {
        this.msg(entity, entity.name + ' has a strange sensation, then it passes.');
        return;
      }

      entity.gold = 0;
      this.msg(entity, entity.name + ' lost a lotta gold!');
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return LoseThatGold;
})(ThroneEffect);

exports.LoseThatGold = LoseThatGold;

var RandomTeleport = (function (_ThroneEffect7) {
  _inherits(RandomTeleport, _ThroneEffect7);

  function RandomTeleport() {
    _classCallCheck(this, RandomTeleport);

    _get(Object.getPrototypeOf(RandomTeleport.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RandomTeleport, null, [{
    key: 'use',
    value: function use(entity) {
      this.msg(entity, entity.name + ' feels a wrenching sensation!');
      _initGamestate2['default'].world.placeEntityAtRandomLocation(entity);
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return RandomTeleport;
})(ThroneEffect);

exports.RandomTeleport = RandomTeleport;

var SpawnCreatures = (function (_ThroneEffect8) {
  _inherits(SpawnCreatures, _ThroneEffect8);

  function SpawnCreatures() {
    _classCallCheck(this, SpawnCreatures);

    _get(Object.getPrototypeOf(SpawnCreatures.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SpawnCreatures, null, [{
    key: 'use',
    value: function use(entity) {

      var monsters = ['kobold', 'gnome', 'goblin', 'hobgoblin', 'orc'];

      this.msg(entity, entity.name + ' summoned a throne room audience!');
      var spawned = (0, _libDiceRoller2['default'])('1d10');

      var validTiles = _lodash2['default'].sample(this.getEmptyTilesInRange(entity, 5), spawned);

      for (var i = 0; i < spawned; i++) {
        if (!validTiles[i]) continue;
        _worldgenMonsterSpawner2['default'].spawnSingle(_lodash2['default'].sample(monsters), validTiles[i]);
      }
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return SpawnCreatures;
})(ThroneEffect);

exports.SpawnCreatures = SpawnCreatures;

},{"../../definitions/effect":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/effect.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/flavor/names.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = ['Edrix', 'Orfane', 'Odisatije', 'Sefakybeh', 'Erdyinja', 'Eninunagi', 'Efesu', 'Wetef', 'Areyekuwe', 'Uvecusof', 'Veseci', 'Lulalona', 'Ivelet', 'Ucal', 'Wartberg', 'Devew', 'Sose', 'Ophix', 'Talon', 'Nunit', 'Meper', 'Tegavad', 'Sonja', 'Esali', 'Taxire', 'Xanelel', 'Enhailor', 'Sujeb', 'Elahioa', 'Annalie', 'Oivoi', 'Tidiyiwi', 'Elahica', 'Erioalin', 'Fidiv', 'Feropit', 'Nolid', 'Illiwanu', 'Itixas', 'Deverilian', 'Canub', 'Welby', 'Bolmixfon', 'Dextra', 'Vixgen', 'Dutuyaxe', 'Lenazodog', 'Woden', 'Darwin', 'Dontdie', 'Luth', 'Adab', 'Yuped', 'Nediru', 'Gorypegas', 'Anut', 'Eventine', 'Mythe', 'Avojindi', 'Odufin', 'Kiley', 'Irebeq', 'Tegono', 'Azdan', 'Oompha', 'Rokoser', 'Ihoxeqati', 'Ohiwudeh', 'Lexonycor', 'Ecor', 'Ebarad', 'Ritova', 'Nenaty', 'Diptusoroy', 'Dudley', 'Marvin', 'Ben', 'Tenaya', 'Robert', 'Izchak', 'Rab', 'Blizer', 'Raymond', 'Kyle', 'Erich', 'Austin', 'Skralg', 'Rodney'];
module.exports = exports['default'];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var _constantsDecorators = require('../../constants/decorators');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var Gold = (function (_Special) {
  _inherits(Gold, _Special);

  function Gold(num) {
    _classCallCheck(this, _Gold);

    var opts = {
      glyph: { key: _constantsGlyphs.Items.Gold, fg: _constantsGlyphColors.Items.Gold }
    };
    _get(Object.getPrototypeOf(_Gold.prototype), 'constructor', this).call(this, opts);
    this.goldValue = num;
    this.name = this.goldValue + ' gold';
  }

  var _Gold = Gold;
  Gold = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Gold)(Gold) || Gold;
  return Gold;
})(_definitionsEquipment.Special);

exports.Gold = Gold;

var Corpse = (function (_Comestible) {
  _inherits(Corpse, _Comestible);

  function Corpse() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? { monsterName: 'unknown' } : arguments[0];

    _classCallCheck(this, Corpse);

    _get(Object.getPrototypeOf(Corpse.prototype), 'constructor', this).call(this, opts);
    this.name = 'corpse of ' + opts.monsterName;
  }

  return Corpse;
})(_definitionsEquipment.Comestible);

exports.Corpse = Corpse;

var StoneOfSelyk = (function (_Gem) {
  _inherits(StoneOfSelyk, _Gem);

  function StoneOfSelyk() {
    _classCallCheck(this, StoneOfSelyk);

    _get(Object.getPrototypeOf(StoneOfSelyk.prototype), 'constructor', this).call(this, { glyph: { fg: _constantsGlyphColors.Special.Selyk } });
    this.name = 'Stone of Selyk';
  }

  return StoneOfSelyk;
})(_definitionsEquipment.Gem);

exports.StoneOfSelyk = StoneOfSelyk;

var SelykCellarKey = (function (_Tool) {
  _inherits(SelykCellarKey, _Tool);

  function SelykCellarKey() {
    _classCallCheck(this, SelykCellarKey);

    _get(Object.getPrototypeOf(SelykCellarKey.prototype), 'constructor', this).call(this, { glyph: { fg: _constantsGlyphColors.Special.Selyk } });
    this.name = 'Selyk\'s Cellar Key';
  }

  return SelykCellarKey;
})(_definitionsEquipment.Tool);

exports.SelykCellarKey = SelykCellarKey;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _weaponsAxes = require('./weapons/axes');

var Axes = _interopRequireWildcard(_weaponsAxes);

var _weaponsBows = require('./weapons/bows');

var Bows = _interopRequireWildcard(_weaponsBows);

var _weaponsDaggers = require('./weapons/daggers');

var Daggers = _interopRequireWildcard(_weaponsDaggers);

var _weaponsMaces = require('./weapons/maces');

var Maces = _interopRequireWildcard(_weaponsMaces);

var _weaponsShortswords = require('./weapons/shortswords');

var ShortSwords = _interopRequireWildcard(_weaponsShortswords);

var _weaponsSpears = require('./weapons/spears');

var Spears = _interopRequireWildcard(_weaponsSpears);

var _weaponsStaves = require('./weapons/staves');

var Staves = _interopRequireWildcard(_weaponsStaves);

var _weaponsLongswords = require('./weapons/longswords');

var Swords = _interopRequireWildcard(_weaponsLongswords);

exports['default'] = _lodash2['default'].extend({}, Axes, Bows, Daggers, Maces, ShortSwords, Spears, Staves, Swords);
module.exports = exports['default'];

},{"./weapons/axes":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/axes.js","./weapons/bows":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/bows.js","./weapons/daggers":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/daggers.js","./weapons/longswords":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/longswords.js","./weapons/maces":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/maces.js","./weapons/shortswords":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/shortswords.js","./weapons/spears":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/spears.js","./weapons/staves":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/staves.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _libDefaultCalculations = require('../../lib/default-calculations');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var TShirt = (function (_Body) {
  _inherits(TShirt, _Body);

  function TShirt() {
    _classCallCheck(this, _TShirt);

    _get(Object.getPrototypeOf(_TShirt.prototype), 'constructor', this).apply(this, arguments);
  }

  var _TShirt = TShirt;
  TShirt = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(TShirt) || TShirt;
  TShirt = (0, _constantsDecorators.rarity)(100)(TShirt) || TShirt;
  return TShirt;
})(_definitionsEquipment.Body);

exports.TShirt = TShirt;

var Robe = (function (_Body2) {
  _inherits(Robe, _Body2);

  function Robe() {
    _classCallCheck(this, _Robe);

    _get(Object.getPrototypeOf(_Robe.prototype), 'constructor', this).apply(this, arguments);
  }

  var _Robe = Robe;
  Robe = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Robe) || Robe;
  Robe = (0, _constantsDecorators.rarity)(50)(Robe) || Robe;
  return Robe;
})(_definitionsEquipment.Body);

exports.Robe = Robe;

var LeatherJacket = (function (_Body3) {
  _inherits(LeatherJacket, _Body3);

  function LeatherJacket() {
    _classCallCheck(this, _LeatherJacket);

    _get(Object.getPrototypeOf(_LeatherJacket.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LeatherJacket, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _LeatherJacket = LeatherJacket;
  LeatherJacket = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(LeatherJacket) || LeatherJacket;
  LeatherJacket = (0, _constantsDecorators.rarity)(75)(LeatherJacket) || LeatherJacket;
  return LeatherJacket;
})(_definitionsEquipment.Body);

exports.LeatherJacket = LeatherJacket;

var OrcishRingMail = (function (_Body4) {
  _inherits(OrcishRingMail, _Body4);

  function OrcishRingMail() {
    _classCallCheck(this, _OrcishRingMail);

    _get(Object.getPrototypeOf(_OrcishRingMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(OrcishRingMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _OrcishRingMail = OrcishRingMail;
  OrcishRingMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(OrcishRingMail) || OrcishRingMail;
  OrcishRingMail = (0, _constantsDecorators.rarity)(65)(OrcishRingMail) || OrcishRingMail;
  return OrcishRingMail;
})(_definitionsEquipment.Body);

exports.OrcishRingMail = OrcishRingMail;

var StuddedLeatherArmor = (function (_Body5) {
  _inherits(StuddedLeatherArmor, _Body5);

  function StuddedLeatherArmor() {
    _classCallCheck(this, _StuddedLeatherArmor);

    _get(Object.getPrototypeOf(_StuddedLeatherArmor.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(StuddedLeatherArmor, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 3);
    }
  }]);

  var _StuddedLeatherArmor = StuddedLeatherArmor;
  StuddedLeatherArmor = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(StuddedLeatherArmor) || StuddedLeatherArmor;
  StuddedLeatherArmor = (0, _constantsDecorators.rarity)(55)(StuddedLeatherArmor) || StuddedLeatherArmor;
  return StuddedLeatherArmor;
})(_definitionsEquipment.Body);

exports.StuddedLeatherArmor = StuddedLeatherArmor;

var RingMail = (function (_Body6) {
  _inherits(RingMail, _Body6);

  function RingMail() {
    _classCallCheck(this, _RingMail);

    _get(Object.getPrototypeOf(_RingMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 3);
    }
  }]);

  var _RingMail = RingMail;
  RingMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(RingMail) || RingMail;
  RingMail = (0, _constantsDecorators.rarity)(55)(RingMail) || RingMail;
  return RingMail;
})(_definitionsEquipment.Body);

exports.RingMail = RingMail;

var DragonScales = (function (_Body7) {
  _inherits(DragonScales, _Body7);

  function DragonScales() {
    _classCallCheck(this, _DragonScales);

    _get(Object.getPrototypeOf(_DragonScales.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DragonScales, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 3);
    }
  }]);

  var _DragonScales = DragonScales;
  DragonScales = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Dragon)(DragonScales) || DragonScales;
  DragonScales = (0, _constantsDecorators.rarity)(1)(DragonScales) || DragonScales;
  return DragonScales;
})(_definitionsEquipment.Body);

exports.DragonScales = DragonScales;

var OrcishChainMail = (function (_Body8) {
  _inherits(OrcishChainMail, _Body8);

  function OrcishChainMail() {
    _classCallCheck(this, _OrcishChainMail);

    _get(Object.getPrototypeOf(_OrcishChainMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(OrcishChainMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 4);
    }
  }]);

  var _OrcishChainMail = OrcishChainMail;
  OrcishChainMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(OrcishChainMail) || OrcishChainMail;
  OrcishChainMail = (0, _constantsDecorators.rarity)(45)(OrcishChainMail) || OrcishChainMail;
  return OrcishChainMail;
})(_definitionsEquipment.Body);

exports.OrcishChainMail = OrcishChainMail;

var ScaleMail = (function (_Body9) {
  _inherits(ScaleMail, _Body9);

  function ScaleMail() {
    _classCallCheck(this, _ScaleMail);

    _get(Object.getPrototypeOf(_ScaleMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ScaleMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 4);
    }
  }]);

  var _ScaleMail = ScaleMail;
  ScaleMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(ScaleMail) || ScaleMail;
  ScaleMail = (0, _constantsDecorators.rarity)(45)(ScaleMail) || ScaleMail;
  return ScaleMail;
})(_definitionsEquipment.Body);

exports.ScaleMail = ScaleMail;

var ChainMail = (function (_Body10) {
  _inherits(ChainMail, _Body10);

  function ChainMail() {
    _classCallCheck(this, _ChainMail);

    _get(Object.getPrototypeOf(_ChainMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ChainMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 5);
    }
  }]);

  var _ChainMail = ChainMail;
  ChainMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(ChainMail) || ChainMail;
  ChainMail = (0, _constantsDecorators.rarity)(25)(ChainMail) || ChainMail;
  return ChainMail;
})(_definitionsEquipment.Body);

exports.ChainMail = ChainMail;

var ElvenMithrilCoat = (function (_Body11) {
  _inherits(ElvenMithrilCoat, _Body11);

  function ElvenMithrilCoat() {
    _classCallCheck(this, _ElvenMithrilCoat);

    _get(Object.getPrototypeOf(_ElvenMithrilCoat.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ElvenMithrilCoat, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 5);
    }
  }]);

  var _ElvenMithrilCoat = ElvenMithrilCoat;
  ElvenMithrilCoat = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Mithril)(ElvenMithrilCoat) || ElvenMithrilCoat;
  ElvenMithrilCoat = (0, _constantsDecorators.rarity)(25)(ElvenMithrilCoat) || ElvenMithrilCoat;
  return ElvenMithrilCoat;
})(_definitionsEquipment.Body);

exports.ElvenMithrilCoat = ElvenMithrilCoat;

var SplintMail = (function (_Body12) {
  _inherits(SplintMail, _Body12);

  function SplintMail() {
    _classCallCheck(this, _SplintMail);

    _get(Object.getPrototypeOf(_SplintMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SplintMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 6);
    }
  }]);

  var _SplintMail = SplintMail;
  SplintMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(SplintMail) || SplintMail;
  SplintMail = (0, _constantsDecorators.rarity)(15)(SplintMail) || SplintMail;
  return SplintMail;
})(_definitionsEquipment.Body);

exports.SplintMail = SplintMail;

var BandedMail = (function (_Body13) {
  _inherits(BandedMail, _Body13);

  function BandedMail() {
    _classCallCheck(this, _BandedMail);

    _get(Object.getPrototypeOf(_BandedMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BandedMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 6);
    }
  }]);

  var _BandedMail = BandedMail;
  BandedMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(BandedMail) || BandedMail;
  BandedMail = (0, _constantsDecorators.rarity)(15)(BandedMail) || BandedMail;
  return BandedMail;
})(_definitionsEquipment.Body);

exports.BandedMail = BandedMail;

var DwarvenMithrilCoat = (function (_Body14) {
  _inherits(DwarvenMithrilCoat, _Body14);

  function DwarvenMithrilCoat() {
    _classCallCheck(this, _DwarvenMithrilCoat);

    _get(Object.getPrototypeOf(_DwarvenMithrilCoat.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DwarvenMithrilCoat, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 6);
    }
  }]);

  var _DwarvenMithrilCoat = DwarvenMithrilCoat;
  DwarvenMithrilCoat = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Mithril)(DwarvenMithrilCoat) || DwarvenMithrilCoat;
  DwarvenMithrilCoat = (0, _constantsDecorators.rarity)(15)(DwarvenMithrilCoat) || DwarvenMithrilCoat;
  return DwarvenMithrilCoat;
})(_definitionsEquipment.Body);

exports.DwarvenMithrilCoat = DwarvenMithrilCoat;

var BronzePlateMail = (function (_Body15) {
  _inherits(BronzePlateMail, _Body15);

  function BronzePlateMail() {
    _classCallCheck(this, _BronzePlateMail);

    _get(Object.getPrototypeOf(_BronzePlateMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BronzePlateMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 6);
    }
  }]);

  var _BronzePlateMail = BronzePlateMail;
  BronzePlateMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(BronzePlateMail) || BronzePlateMail;
  BronzePlateMail = (0, _constantsDecorators.rarity)(15)(BronzePlateMail) || BronzePlateMail;
  return BronzePlateMail;
})(_definitionsEquipment.Body);

exports.BronzePlateMail = BronzePlateMail;

var PlateMail = (function (_Body16) {
  _inherits(PlateMail, _Body16);

  function PlateMail() {
    _classCallCheck(this, _PlateMail);

    _get(Object.getPrototypeOf(_PlateMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(PlateMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 7);
    }
  }]);

  var _PlateMail = PlateMail;
  PlateMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(PlateMail) || PlateMail;
  PlateMail = (0, _constantsDecorators.rarity)(5)(PlateMail) || PlateMail;
  return PlateMail;
})(_definitionsEquipment.Body);

exports.PlateMail = PlateMail;

var CrystalPlateMail = (function (_Body17) {
  _inherits(CrystalPlateMail, _Body17);

  function CrystalPlateMail() {
    _classCallCheck(this, _CrystalPlateMail);

    _get(Object.getPrototypeOf(_CrystalPlateMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(CrystalPlateMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 7);
    }
  }]);

  var _CrystalPlateMail = CrystalPlateMail;
  CrystalPlateMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Glass)(CrystalPlateMail) || CrystalPlateMail;
  CrystalPlateMail = (0, _constantsDecorators.rarity)(5)(CrystalPlateMail) || CrystalPlateMail;
  return CrystalPlateMail;
})(_definitionsEquipment.Body);

exports.CrystalPlateMail = CrystalPlateMail;

var DragonScaleMail = (function (_Body18) {
  _inherits(DragonScaleMail, _Body18);

  function DragonScaleMail() {
    _classCallCheck(this, _DragonScaleMail);

    _get(Object.getPrototypeOf(_DragonScaleMail.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DragonScaleMail, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 9);
    }
  }]);

  var _DragonScaleMail = DragonScaleMail;
  DragonScaleMail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Dragon)(DragonScaleMail) || DragonScaleMail;
  DragonScaleMail = (0, _constantsDecorators.rarity)(1)(DragonScaleMail) || DragonScaleMail;
  return DragonScaleMail;
})(_definitionsEquipment.Body);

exports.DragonScaleMail = DragonScaleMail;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/default-calculations":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/cloaks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _libDefaultCalculations = require('../../lib/default-calculations');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var OrdinaryCloak = (function (_Cloak) {
  _inherits(OrdinaryCloak, _Cloak);

  function OrdinaryCloak() {
    _classCallCheck(this, _OrdinaryCloak);

    _get(Object.getPrototypeOf(_OrdinaryCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  var _OrdinaryCloak = OrdinaryCloak;
  OrdinaryCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(OrdinaryCloak) || OrdinaryCloak;
  OrdinaryCloak = (0, _constantsDecorators.rarity)(50)(OrdinaryCloak) || OrdinaryCloak;
  return OrdinaryCloak;
})(_definitionsEquipment.Cloak);

exports.OrdinaryCloak = OrdinaryCloak;

var MummyWrapping = (function (_Cloak2) {
  _inherits(MummyWrapping, _Cloak2);

  function MummyWrapping() {
    _classCallCheck(this, _MummyWrapping);

    _get(Object.getPrototypeOf(_MummyWrapping.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(MummyWrapping, [{
    key: 'Invisible',
    value: function Invisible() {
      return -1;
    }
  }]);

  var _MummyWrapping = MummyWrapping;
  MummyWrapping = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(MummyWrapping) || MummyWrapping;
  MummyWrapping = (0, _constantsDecorators.rarity)(10)(MummyWrapping) || MummyWrapping;
  return MummyWrapping;
})(_definitionsEquipment.Cloak);

exports.MummyWrapping = MummyWrapping;

var OrcishCloak = (function (_Cloak3) {
  _inherits(OrcishCloak, _Cloak3);

  function OrcishCloak() {
    _classCallCheck(this, _OrcishCloak);

    _get(Object.getPrototypeOf(_OrcishCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  var _OrcishCloak = OrcishCloak;
  OrcishCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(OrcishCloak) || OrcishCloak;
  OrcishCloak = (0, _constantsDecorators.rarity)(20)(OrcishCloak) || OrcishCloak;
  return OrcishCloak;
})(_definitionsEquipment.Cloak);

exports.OrcishCloak = OrcishCloak;

var DwarvenCloak = (function (_Cloak4) {
  _inherits(DwarvenCloak, _Cloak4);

  function DwarvenCloak() {
    _classCallCheck(this, _DwarvenCloak);

    _get(Object.getPrototypeOf(_DwarvenCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  var _DwarvenCloak = DwarvenCloak;
  DwarvenCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(DwarvenCloak) || DwarvenCloak;
  DwarvenCloak = (0, _constantsDecorators.rarity)(20)(DwarvenCloak) || DwarvenCloak;
  return DwarvenCloak;
})(_definitionsEquipment.Cloak);

exports.DwarvenCloak = DwarvenCloak;

var LeatherCloak = (function (_Cloak5) {
  _inherits(LeatherCloak, _Cloak5);

  function LeatherCloak() {
    _classCallCheck(this, _LeatherCloak);

    _get(Object.getPrototypeOf(_LeatherCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LeatherCloak, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 1);
    }
  }]);

  var _LeatherCloak = LeatherCloak;
  LeatherCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(LeatherCloak) || LeatherCloak;
  LeatherCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(LeatherCloak) || LeatherCloak;
  LeatherCloak = (0, _constantsDecorators.rarity)(2)(LeatherCloak) || LeatherCloak;
  return LeatherCloak;
})(_definitionsEquipment.Cloak);

exports.LeatherCloak = LeatherCloak;

var AlchemySmock = (function (_Cloak6) {
  _inherits(AlchemySmock, _Cloak6);

  function AlchemySmock() {
    _classCallCheck(this, _AlchemySmock);

    _get(Object.getPrototypeOf(_AlchemySmock.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AlchemySmock, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 1);
    }
  }, {
    key: 'PoisonResistance',
    value: function PoisonResistance() {
      return 1;
    }
  }, {
    key: 'AcidResistance',
    value: function AcidResistance() {
      return 1;
    }
  }]);

  var _AlchemySmock = AlchemySmock;
  AlchemySmock = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(AlchemySmock) || AlchemySmock;
  AlchemySmock = (0, _constantsDecorators.rarity)(1)(AlchemySmock) || AlchemySmock;
  return AlchemySmock;
})(_definitionsEquipment.Cloak);

exports.AlchemySmock = AlchemySmock;

var InvisibilityCloak = (function (_Cloak7) {
  _inherits(InvisibilityCloak, _Cloak7);

  function InvisibilityCloak() {
    _classCallCheck(this, _InvisibilityCloak);

    _get(Object.getPrototypeOf(_InvisibilityCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(InvisibilityCloak, [{
    key: 'Invisible',
    value: function Invisible() {
      return 1;
    }
  }]);

  var _InvisibilityCloak = InvisibilityCloak;
  InvisibilityCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(InvisibilityCloak) || InvisibilityCloak;
  InvisibilityCloak = (0, _constantsDecorators.rarity)(1)(InvisibilityCloak) || InvisibilityCloak;
  return InvisibilityCloak;
})(_definitionsEquipment.Cloak);

exports.InvisibilityCloak = InvisibilityCloak;

var ElvenCloak = (function (_Cloak8) {
  _inherits(ElvenCloak, _Cloak8);

  function ElvenCloak() {
    _classCallCheck(this, _ElvenCloak);

    _get(Object.getPrototypeOf(_ElvenCloak.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ElvenCloak, [{
    key: 'Stealth',
    value: function Stealth() {
      return this.buc * 10;
    }
  }]);

  var _ElvenCloak = ElvenCloak;
  ElvenCloak = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(ElvenCloak) || ElvenCloak;
  ElvenCloak = (0, _constantsDecorators.rarity)(1)(ElvenCloak) || ElvenCloak;
  return ElvenCloak;
})(_definitionsEquipment.Cloak);

exports.ElvenCloak = ElvenCloak;

var Robe = (function (_Cloak9) {
  _inherits(Robe, _Cloak9);

  function Robe() {
    _classCallCheck(this, _Robe);

    _get(Object.getPrototypeOf(_Robe.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Robe, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _Robe = Robe;
  Robe = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Robe) || Robe;
  Robe = (0, _constantsDecorators.rarity)(1)(Robe) || Robe;
  return Robe;
})(_definitionsEquipment.Cloak);

exports.Robe = Robe;

var CloakOfProtection = (function (_Cloak10) {
  _inherits(CloakOfProtection, _Cloak10);

  function CloakOfProtection() {
    _classCallCheck(this, _CloakOfProtection);

    _get(Object.getPrototypeOf(_CloakOfProtection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(CloakOfProtection, [{
    key: 'Protection',
    value: function Protection() {
      return this.buc * -2;
    }
  }]);

  var _CloakOfProtection = CloakOfProtection;
  CloakOfProtection = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(CloakOfProtection) || CloakOfProtection;
  CloakOfProtection = (0, _constantsDecorators.rarity)(5)(CloakOfProtection) || CloakOfProtection;
  return CloakOfProtection;
})(_definitionsEquipment.Cloak);

exports.CloakOfProtection = CloakOfProtection;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/default-calculations":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/feets.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _libDefaultCalculations = require('../../lib/default-calculations');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var SimpleBoots = (function (_Feet) {
  _inherits(SimpleBoots, _Feet);

  function SimpleBoots() {
    _classCallCheck(this, _SimpleBoots);

    _get(Object.getPrototypeOf(_SimpleBoots.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SimpleBoots, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _SimpleBoots = SimpleBoots;
  SimpleBoots = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(SimpleBoots) || SimpleBoots;
  SimpleBoots = (0, _constantsDecorators.rarity)(50)(SimpleBoots) || SimpleBoots;
  return SimpleBoots;
})(_definitionsEquipment.Feet);

exports.SimpleBoots = SimpleBoots;

var ElvenBoots = (function (_Feet2) {
  _inherits(ElvenBoots, _Feet2);

  function ElvenBoots() {
    _classCallCheck(this, _ElvenBoots);

    _get(Object.getPrototypeOf(_ElvenBoots.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ElvenBoots, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }, {
    key: 'Stealth',
    value: function Stealth() {
      return this.buc * 15;
    }
  }]);

  var _ElvenBoots = ElvenBoots;
  ElvenBoots = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(ElvenBoots) || ElvenBoots;
  ElvenBoots = (0, _constantsDecorators.rarity)(2)(ElvenBoots) || ElvenBoots;
  return ElvenBoots;
})(_definitionsEquipment.Feet);

exports.ElvenBoots = ElvenBoots;

var HermesSandals = (function (_Feet3) {
  _inherits(HermesSandals, _Feet3);

  function HermesSandals() {
    _classCallCheck(this, _HermesSandals);

    _get(Object.getPrototypeOf(_HermesSandals.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HermesSandals, [{
    key: 'Haste',
    value: function Haste() {
      return this.buc * 50;
    }
  }]);

  var _HermesSandals = HermesSandals;
  HermesSandals = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(HermesSandals) || HermesSandals;
  HermesSandals = (0, _constantsDecorators.rarity)(3)(HermesSandals) || HermesSandals;
  return HermesSandals;
})(_definitionsEquipment.Feet);

exports.HermesSandals = HermesSandals;

var HighBoots = (function (_Feet4) {
  _inherits(HighBoots, _Feet4);

  function HighBoots() {
    _classCallCheck(this, _HighBoots);

    _get(Object.getPrototypeOf(_HighBoots.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HighBoots, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _HighBoots = HighBoots;
  HighBoots = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(HighBoots) || HighBoots;
  HighBoots = (0, _constantsDecorators.rarity)(10)(HighBoots) || HighBoots;
  return HighBoots;
})(_definitionsEquipment.Feet);

exports.HighBoots = HighBoots;

var IronBoots = (function (_Feet5) {
  _inherits(IronBoots, _Feet5);

  function IronBoots() {
    _classCallCheck(this, _IronBoots);

    _get(Object.getPrototypeOf(_IronBoots.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(IronBoots, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _IronBoots = IronBoots;
  IronBoots = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(IronBoots) || IronBoots;
  IronBoots = (0, _constantsDecorators.rarity)(5)(IronBoots) || IronBoots;
  return IronBoots;
})(_definitionsEquipment.Feet);

exports.IronBoots = IronBoots;

var BootsOfProtection = (function (_Feet6) {
  _inherits(BootsOfProtection, _Feet6);

  function BootsOfProtection() {
    _classCallCheck(this, _BootsOfProtection);

    _get(Object.getPrototypeOf(_BootsOfProtection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(BootsOfProtection, [{
    key: 'Protection',
    value: function Protection() {
      return this.buc * -2;
    }
  }]);

  var _BootsOfProtection = BootsOfProtection;
  BootsOfProtection = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(BootsOfProtection) || BootsOfProtection;
  BootsOfProtection = (0, _constantsDecorators.rarity)(5)(BootsOfProtection) || BootsOfProtection;
  return BootsOfProtection;
})(_definitionsEquipment.Feet);

exports.BootsOfProtection = BootsOfProtection;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/default-calculations":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _constantsDecorators = require('../../constants/decorators');

var Ration = (function (_Comestible) {
  _inherits(Ration, _Comestible);

  function Ration(opts) {
    _classCallCheck(this, _Ration);

    _get(Object.getPrototypeOf(_Ration.prototype), 'constructor', this).call(this, opts);
    this.name = 'ration';
  }

  var _Ration = Ration;
  Ration = (0, _constantsDecorators.rarity)(50)(Ration) || Ration;
  return Ration;
})(_definitionsEquipment.Comestible);

exports.Ration = Ration;

var Apple = (function (_Comestible2) {
  _inherits(Apple, _Comestible2);

  function Apple(opts) {
    _classCallCheck(this, _Apple);

    _get(Object.getPrototypeOf(_Apple.prototype), 'constructor', this).call(this, opts);
    this.name = 'apple';
  }

  var _Apple = Apple;
  Apple = (0, _constantsDecorators.rarity)(75)(Apple) || Apple;
  return Apple;
})(_definitionsEquipment.Comestible);

exports.Apple = Apple;

var Carrot = (function (_Comestible3) {
  _inherits(Carrot, _Comestible3);

  function Carrot(opts) {
    _classCallCheck(this, _Carrot);

    _get(Object.getPrototypeOf(_Carrot.prototype), 'constructor', this).call(this, opts);
    this.name = 'carrot';
  }

  var _Carrot = Carrot;
  Carrot = (0, _constantsDecorators.rarity)(75)(Carrot) || Carrot;
  return Carrot;
})(_definitionsEquipment.Comestible);

exports.Carrot = Carrot;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _libDefaultCalculations = require('../../lib/default-calculations');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var OrdinaryHat = (function (_Head) {
  _inherits(OrdinaryHat, _Head);

  function OrdinaryHat() {
    _classCallCheck(this, _OrdinaryHat);

    _get(Object.getPrototypeOf(_OrdinaryHat.prototype), 'constructor', this).apply(this, arguments);
  }

  var _OrdinaryHat = OrdinaryHat;
  OrdinaryHat = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(OrdinaryHat) || OrdinaryHat;
  OrdinaryHat = (0, _constantsDecorators.rarity)(50)(OrdinaryHat) || OrdinaryHat;
  return OrdinaryHat;
})(_definitionsEquipment.Head);

exports.OrdinaryHat = OrdinaryHat;

var Fedora = (function (_Head2) {
  _inherits(Fedora, _Head2);

  function Fedora() {
    _classCallCheck(this, _Fedora);

    _get(Object.getPrototypeOf(_Fedora.prototype), 'constructor', this).apply(this, arguments);
  }

  var _Fedora = Fedora;
  Fedora = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Fedora) || Fedora;
  Fedora = (0, _constantsDecorators.rarity)(1)(Fedora) || Fedora;
  return Fedora;
})(_definitionsEquipment.Head);

exports.Fedora = Fedora;

var NightGoggles = (function (_Head3) {
  _inherits(NightGoggles, _Head3);

  function NightGoggles() {
    _classCallCheck(this, _NightGoggles);

    _get(Object.getPrototypeOf(_NightGoggles.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(NightGoggles, [{
    key: 'Infravision',
    value: function Infravision() {
      return this.buc;
    }
  }]);

  var _NightGoggles = NightGoggles;
  NightGoggles = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(NightGoggles) || NightGoggles;
  NightGoggles = (0, _constantsDecorators.rarity)(2)(NightGoggles) || NightGoggles;
  return NightGoggles;
})(_definitionsEquipment.Head);

exports.NightGoggles = NightGoggles;

var DunceCap = (function (_Head4) {
  _inherits(DunceCap, _Head4);

  _createClass(DunceCap, [{
    key: 'int',
    value: function int() {
      return -5;
    }
  }, {
    key: 'wis',
    value: function wis() {
      return -5;
    }
  }]);

  function DunceCap() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _DunceCap);

    opts.bucName = 'cursed'; // always starts cursed
    _get(Object.getPrototypeOf(_DunceCap.prototype), 'constructor', this).call(this, opts);
  }

  var _DunceCap = DunceCap;
  DunceCap = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(DunceCap) || DunceCap;
  DunceCap = (0, _constantsDecorators.rarity)(2)(DunceCap) || DunceCap;
  return DunceCap;
})(_definitionsEquipment.Head);

exports.DunceCap = DunceCap;

var Cornuthaum = (function (_Head5) {
  _inherits(Cornuthaum, _Head5);

  function Cornuthaum() {
    _classCallCheck(this, _Cornuthaum);

    _get(Object.getPrototypeOf(_Cornuthaum.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Cornuthaum, [{
    key: 'Clairvoyance',
    value: function Clairvoyance() {
      return 5;
    }
  }]);

  var _Cornuthaum = Cornuthaum;
  Cornuthaum = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Cornuthaum) || Cornuthaum;
  Cornuthaum = (0, _constantsDecorators.rarity)(2)(Cornuthaum) || Cornuthaum;
  return Cornuthaum;
})(_definitionsEquipment.Head);

exports.Cornuthaum = Cornuthaum;

var OrcishHelm = (function (_Head6) {
  _inherits(OrcishHelm, _Head6);

  function OrcishHelm() {
    _classCallCheck(this, _OrcishHelm);

    _get(Object.getPrototypeOf(_OrcishHelm.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(OrcishHelm, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _OrcishHelm = OrcishHelm;
  OrcishHelm = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(OrcishHelm) || OrcishHelm;
  OrcishHelm = (0, _constantsDecorators.rarity)(15)(OrcishHelm) || OrcishHelm;
  return OrcishHelm;
})(_definitionsEquipment.Head);

exports.OrcishHelm = OrcishHelm;

var Helm = (function (_Head7) {
  _inherits(Helm, _Head7);

  function Helm() {
    _classCallCheck(this, _Helm);

    _get(Object.getPrototypeOf(_Helm.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Helm, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _Helm = Helm;
  Helm = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Helm) || Helm;
  Helm = (0, _constantsDecorators.rarity)(15)(Helm) || Helm;
  return Helm;
})(_definitionsEquipment.Head);

exports.Helm = Helm;

var DentedPot = (function (_Head8) {
  _inherits(DentedPot, _Head8);

  function DentedPot() {
    _classCallCheck(this, _DentedPot);

    _get(Object.getPrototypeOf(_DentedPot.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DentedPot, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _DentedPot = DentedPot;
  DentedPot = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(DentedPot) || DentedPot;
  DentedPot = (0, _constantsDecorators.rarity)(35)(DentedPot) || DentedPot;
  return DentedPot;
})(_definitionsEquipment.Head);

exports.DentedPot = DentedPot;

var ElvenLeatherHelm = (function (_Head9) {
  _inherits(ElvenLeatherHelm, _Head9);

  function ElvenLeatherHelm() {
    _classCallCheck(this, _ElvenLeatherHelm);

    _get(Object.getPrototypeOf(_ElvenLeatherHelm.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ElvenLeatherHelm, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _ElvenLeatherHelm = ElvenLeatherHelm;
  ElvenLeatherHelm = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(ElvenLeatherHelm) || ElvenLeatherHelm;
  ElvenLeatherHelm = (0, _constantsDecorators.rarity)(15)(ElvenLeatherHelm) || ElvenLeatherHelm;
  return ElvenLeatherHelm;
})(_definitionsEquipment.Head);

exports.ElvenLeatherHelm = ElvenLeatherHelm;

var HelmOfBrilliance = (function (_Head10) {
  _inherits(HelmOfBrilliance, _Head10);

  function HelmOfBrilliance() {
    _classCallCheck(this, _HelmOfBrilliance);

    _get(Object.getPrototypeOf(_HelmOfBrilliance.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HelmOfBrilliance, [{
    key: 'int',
    value: function int() {
      return 3;
    }
  }, {
    key: 'wis',
    value: function wis() {
      return 3;
    }
  }, {
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _HelmOfBrilliance = HelmOfBrilliance;
  HelmOfBrilliance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(HelmOfBrilliance) || HelmOfBrilliance;
  HelmOfBrilliance = (0, _constantsDecorators.rarity)(3)(HelmOfBrilliance) || HelmOfBrilliance;
  return HelmOfBrilliance;
})(_definitionsEquipment.Head);

exports.HelmOfBrilliance = HelmOfBrilliance;

var HelmOfTelepathy = (function (_Head11) {
  _inherits(HelmOfTelepathy, _Head11);

  function HelmOfTelepathy() {
    _classCallCheck(this, _HelmOfTelepathy);

    _get(Object.getPrototypeOf(_HelmOfTelepathy.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HelmOfTelepathy, [{
    key: 'Telepathy',
    value: function Telepathy() {
      return 20;
    }
  }]);

  var _HelmOfTelepathy = HelmOfTelepathy;
  HelmOfTelepathy = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(HelmOfTelepathy) || HelmOfTelepathy;
  HelmOfTelepathy = (0, _constantsDecorators.rarity)(2)(HelmOfTelepathy) || HelmOfTelepathy;
  return HelmOfTelepathy;
})(_definitionsEquipment.Head);

exports.HelmOfTelepathy = HelmOfTelepathy;

var DwarvenIronHelm = (function (_Head12) {
  _inherits(DwarvenIronHelm, _Head12);

  function DwarvenIronHelm() {
    _classCallCheck(this, _DwarvenIronHelm);

    _get(Object.getPrototypeOf(_DwarvenIronHelm.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DwarvenIronHelm, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this, 2);
    }
  }]);

  var _DwarvenIronHelm = DwarvenIronHelm;
  DwarvenIronHelm = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(DwarvenIronHelm) || DwarvenIronHelm;
  DwarvenIronHelm = (0, _constantsDecorators.rarity)(10)(DwarvenIronHelm) || DwarvenIronHelm;
  return DwarvenIronHelm;
})(_definitionsEquipment.Head);

exports.DwarvenIronHelm = DwarvenIronHelm;

var HelmOfProtection = (function (_Head13) {
  _inherits(HelmOfProtection, _Head13);

  function HelmOfProtection() {
    _classCallCheck(this, _HelmOfProtection);

    _get(Object.getPrototypeOf(_HelmOfProtection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HelmOfProtection, [{
    key: 'Protection',
    value: function Protection() {
      return this.buc * -2;
    }
  }]);

  var _HelmOfProtection = HelmOfProtection;
  HelmOfProtection = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(HelmOfProtection) || HelmOfProtection;
  HelmOfProtection = (0, _constantsDecorators.rarity)(5)(HelmOfProtection) || HelmOfProtection;
  return HelmOfProtection;
})(_definitionsEquipment.Head);

exports.HelmOfProtection = HelmOfProtection;
// so hipster

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/default-calculations":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/necks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _constantsDecorators = require('../../constants/decorators');

var Necklace = (function (_Neck) {
  _inherits(Necklace, _Neck);

  function Necklace() {
    _classCallCheck(this, _Necklace);

    _get(Object.getPrototypeOf(_Necklace.prototype), 'constructor', this).apply(this, arguments);
  }

  var _Necklace = Necklace;
  Necklace = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Necklace) || Necklace;
  Necklace = (0, _constantsDecorators.rarity)(50)(Necklace) || Necklace;
  return Necklace;
})(_definitionsEquipment.Neck);

exports.Necklace = Necklace;

var AmuletOfProtection = (function (_Neck2) {
  _inherits(AmuletOfProtection, _Neck2);

  function AmuletOfProtection() {
    _classCallCheck(this, _AmuletOfProtection);

    _get(Object.getPrototypeOf(_AmuletOfProtection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AmuletOfProtection, [{
    key: 'Protection',
    value: function Protection() {
      return this.buc * -2;
    }
  }]);

  var _AmuletOfProtection = AmuletOfProtection;
  AmuletOfProtection = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(AmuletOfProtection) || AmuletOfProtection;
  AmuletOfProtection = (0, _constantsDecorators.rarity)(5)(AmuletOfProtection) || AmuletOfProtection;
  return AmuletOfProtection;
})(_definitionsEquipment.Neck);

exports.AmuletOfProtection = AmuletOfProtection;

var AmuletOfTelepathy = (function (_Neck3) {
  _inherits(AmuletOfTelepathy, _Neck3);

  function AmuletOfTelepathy() {
    _classCallCheck(this, _AmuletOfTelepathy);

    _get(Object.getPrototypeOf(_AmuletOfTelepathy.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AmuletOfTelepathy, [{
    key: 'Telepathy',
    value: function Telepathy() {
      return 20;
    }
  }]);

  var _AmuletOfTelepathy = AmuletOfTelepathy;
  AmuletOfTelepathy = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(AmuletOfTelepathy) || AmuletOfTelepathy;
  AmuletOfTelepathy = (0, _constantsDecorators.rarity)(1)(AmuletOfTelepathy) || AmuletOfTelepathy;
  return AmuletOfTelepathy;
})(_definitionsEquipment.Neck);

exports.AmuletOfTelepathy = AmuletOfTelepathy;

var AmuletOfStrangulation = (function (_Neck4) {
  _inherits(AmuletOfStrangulation, _Neck4);

  function AmuletOfStrangulation() {
    _classCallCheck(this, _AmuletOfStrangulation);

    _get(Object.getPrototypeOf(_AmuletOfStrangulation.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AmuletOfStrangulation, [{
    key: 'equip',
    value: function equip(player) {
      player.die({ name: 'amulet of strangulation' });
    }
  }]);

  var _AmuletOfStrangulation = AmuletOfStrangulation;
  AmuletOfStrangulation = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(AmuletOfStrangulation) || AmuletOfStrangulation;
  AmuletOfStrangulation = (0, _constantsDecorators.rarity)(1)(AmuletOfStrangulation) || AmuletOfStrangulation;
  return AmuletOfStrangulation;
})(_definitionsEquipment.Neck);

exports.AmuletOfStrangulation = AmuletOfStrangulation;

var AmuletOfLifeSaving = (function (_Neck5) {
  _inherits(AmuletOfLifeSaving, _Neck5);

  function AmuletOfLifeSaving() {
    _classCallCheck(this, _AmuletOfLifeSaving);

    _get(Object.getPrototypeOf(_AmuletOfLifeSaving.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AmuletOfLifeSaving, [{
    key: 'equip',
    value: function equip(player) {
      this._behavior = Behaviors.LifeSave();
      this._behavior._itemRef = this;
      player.addUniqueBehavior(this._behavior);
    }
  }, {
    key: 'unequip',
    value: function unequip(player) {
      player.removeBehavior(this._behavior);
    }
  }]);

  var _AmuletOfLifeSaving = AmuletOfLifeSaving;
  AmuletOfLifeSaving = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(AmuletOfLifeSaving) || AmuletOfLifeSaving;
  AmuletOfLifeSaving = (0, _constantsDecorators.rarity)(1)(AmuletOfLifeSaving) || AmuletOfLifeSaving;
  return AmuletOfLifeSaving;
})(_definitionsEquipment.Neck);

exports.AmuletOfLifeSaving = AmuletOfLifeSaving;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _definitionsEquipment = require('../../definitions/equipment');

var _constantsDecorators = require('../../constants/decorators');

var Healing = (function (_Potion) {
  _inherits(Healing, _Potion);

  function Healing() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Healing);

    _lodash2['default'].extend(opts, { charges: '1d1', healRoll: '4d4', autoRemove: true });
    _get(Object.getPrototypeOf(_Healing.prototype), 'constructor', this).call(this, opts);
  }

  _createClass(Healing, [{
    key: 'use',
    value: function use(entity) {
      var healVal = (0, _libDiceRoller2['default'])(this.healRoll);
      _get(Object.getPrototypeOf(_Healing.prototype), 'use', this).call(this, entity, { healVal: healVal, messageFinish: 'regained ' + healVal + ' health' });
    }
  }]);

  var _Healing = Healing;
  Healing = (0, _constantsDecorators.rarity)(50)(Healing) || Healing;
  return Healing;
})(_definitionsEquipment.Potion);

exports.Healing = Healing;

var ExtraHealing = (function (_Potion2) {
  _inherits(ExtraHealing, _Potion2);

  function ExtraHealing() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ExtraHealing);

    _lodash2['default'].extend(opts, { charges: '1d1', healRoll: '8d4', autoRemove: true });
    _get(Object.getPrototypeOf(_ExtraHealing.prototype), 'constructor', this).call(this, opts);
  }

  _createClass(ExtraHealing, [{
    key: 'use',
    value: function use(entity) {
      var healVal = (0, _libDiceRoller2['default'])(this.healRoll);
      _get(Object.getPrototypeOf(_ExtraHealing.prototype), 'use', this).call(this, entity, { healVal: healVal, messageFinish: 'regained ' + healVal + ' health' });
    }
  }]);

  var _ExtraHealing = ExtraHealing;
  ExtraHealing = (0, _constantsDecorators.rarity)(5)(ExtraHealing) || ExtraHealing;
  return ExtraHealing;
})(_definitionsEquipment.Potion);

exports.ExtraHealing = ExtraHealing;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x11, _x12, _x13) { var _again = true; _function: while (_again) { var object = _x11, property = _x12, receiver = _x13; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x11 = parent; _x12 = property; _x13 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../definitions/equipment');

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var Dart = (function (_Weapon) {
  _inherits(Dart, _Weapon);

  function Dart() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Dart);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '2d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d3', toHit: '0d0', range: 3 })]
    });
    _get(Object.getPrototypeOf(_Dart.prototype), 'constructor', this).call(this, opts);
  }

  var _Dart = Dart;
  Dart = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Dart) || Dart;
  Dart = (0, _constantsDecorators.rarity)(50)(Dart) || Dart;
  return Dart;
})(_definitionsEquipment.Weapon);

exports.Dart = Dart;

var Rock = (function (_Weapon2) {
  _inherits(Rock, _Weapon2);

  function Rock() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Rock);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '2d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d3', toHit: '0d0', range: 9 })]
    });
    _get(Object.getPrototypeOf(_Rock.prototype), 'constructor', this).call(this, opts);
  }

  var _Rock = Rock;
  Rock = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Stone)(Rock) || Rock;
  Rock = (0, _constantsDecorators.rarity)(50)(Rock) || Rock;
  return Rock;
})(_definitionsEquipment.Weapon);

exports.Rock = Rock;

var FlintStone = (function (_Weapon3) {
  _inherits(FlintStone, _Weapon3);

  function FlintStone() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _FlintStone);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '2d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d6', toHit: '0d0', range: 4 })]
    });
    _get(Object.getPrototypeOf(_FlintStone.prototype), 'constructor', this).call(this, opts);
  }

  var _FlintStone = FlintStone;
  FlintStone = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Stone)(FlintStone) || FlintStone;
  FlintStone = (0, _constantsDecorators.rarity)(25)(FlintStone) || FlintStone;
  return FlintStone;
})(_definitionsEquipment.Weapon);

exports.FlintStone = FlintStone;

var Javelin = (function (_Weapon4) {
  _inherits(Javelin, _Weapon4);

  function Javelin() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Javelin);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '1d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d6', range: 9 })]
    });
    _get(Object.getPrototypeOf(_Javelin.prototype), 'constructor', this).call(this, opts);
  }

  var _Javelin = Javelin;
  Javelin = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Javelin) || Javelin;
  Javelin = (0, _constantsDecorators.rarity)(10)(Javelin) || Javelin;
  return Javelin;
})(_definitionsEquipment.Weapon);

exports.Javelin = Javelin;

var Shuriken = (function (_Weapon5) {
  _inherits(Shuriken, _Weapon5);

  function Shuriken() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Shuriken);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '5d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d8', range: 15 })]
    });
    _get(Object.getPrototypeOf(_Shuriken.prototype), 'constructor', this).call(this, opts);
  }

  var _Shuriken = Shuriken;
  Shuriken = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Shuriken) || Shuriken;
  Shuriken = (0, _constantsDecorators.rarity)(5)(Shuriken) || Shuriken;
  return Shuriken;
})(_definitionsEquipment.Weapon);

exports.Shuriken = Shuriken;

var Stiletto = (function (_Weapon6) {
  _inherits(Stiletto, _Weapon6);

  function Stiletto() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Stiletto);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '4d4',
      glyph: { key: ')', fg: '#00f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d4', toHit: '0d0', range: 4 })]
    });
    _get(Object.getPrototypeOf(_Stiletto.prototype), 'constructor', this).call(this, opts);
  }

  var _Stiletto = Stiletto;
  Stiletto = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Stiletto) || Stiletto;
  Stiletto = (0, _constantsDecorators.rarity)(5)(Stiletto) || Stiletto;
  return Stiletto;
})(_definitionsEquipment.Weapon);

exports.Stiletto = Stiletto;

var OrcishArrow = (function (_Weapon7) {
  _inherits(OrcishArrow, _Weapon7);

  function OrcishArrow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _OrcishArrow);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '1d4',
      glyph: { key: ')', fg: '#f0f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d5', toHit: '0d0', range: 5 })]
    });
    _get(Object.getPrototypeOf(_OrcishArrow.prototype), 'constructor', this).call(this, opts);
  }

  var _OrcishArrow = OrcishArrow;
  OrcishArrow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(OrcishArrow) || OrcishArrow;
  OrcishArrow = (0, _constantsDecorators.rarity)(25)(OrcishArrow) || OrcishArrow;
  return OrcishArrow;
})(_definitionsEquipment.Weapon);

exports.OrcishArrow = OrcishArrow;

var Arrow = (function (_Weapon8) {
  _inherits(Arrow, _Weapon8);

  function Arrow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Arrow);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '1d4',
      glyph: { key: ')', fg: '#f0f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d6', toHit: '0d0', range: 6 })]
    });
    _get(Object.getPrototypeOf(_Arrow.prototype), 'constructor', this).call(this, opts);
  }

  var _Arrow = Arrow;
  Arrow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Arrow) || Arrow;
  Arrow = (0, _constantsDecorators.rarity)(20)(Arrow) || Arrow;
  return Arrow;
})(_definitionsEquipment.Weapon);

exports.Arrow = Arrow;

var ElvenArrow = (function (_Weapon9) {
  _inherits(ElvenArrow, _Weapon9);

  function ElvenArrow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvenArrow);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '2d4',
      glyph: { key: ')', fg: '#f0f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d8', toHit: '1d1', range: 7 })]
    });
    _get(Object.getPrototypeOf(_ElvenArrow.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvenArrow = ElvenArrow;
  ElvenArrow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(ElvenArrow) || ElvenArrow;
  ElvenArrow = (0, _constantsDecorators.rarity)(15)(ElvenArrow) || ElvenArrow;
  return ElvenArrow;
})(_definitionsEquipment.Weapon);

exports.ElvenArrow = ElvenArrow;

var Bolt = (function (_Weapon10) {
  _inherits(Bolt, _Weapon10);

  function Bolt() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Bolt);

    _lodash2['default'].extend(opts, {
      autoRemove: true,
      charges: '1d4',
      glyph: { key: ')', fg: '#f0f' },
      attacks: [_attacks_all2['default'].Shot({ roll: '1d8', toHit: '0d0', range: 4 })]
    });
    _get(Object.getPrototypeOf(_Bolt.prototype), 'constructor', this).call(this, opts);
  }

  var _Bolt = Bolt;
  Bolt = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Bolt) || Bolt;
  Bolt = (0, _constantsDecorators.rarity)(25)(Bolt) || Bolt;
  return Bolt;
})(_definitionsEquipment.Weapon);

exports.Bolt = Bolt;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/rings.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

// region Attribute Rings

var RingOfStrength = (function (_Ring) {
  _inherits(RingOfStrength, _Ring);

  function RingOfStrength() {
    _classCallCheck(this, _RingOfStrength);

    _get(Object.getPrototypeOf(_RingOfStrength.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfStrength, [{
    key: 'str',
    value: function str() {
      return this.buc;
    }
  }]);

  var _RingOfStrength = RingOfStrength;
  RingOfStrength = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(RingOfStrength) || RingOfStrength;
  RingOfStrength = (0, _constantsDecorators.rarity)(15)(RingOfStrength) || RingOfStrength;
  return RingOfStrength;
})(_definitionsEquipment.Ring);

exports.RingOfStrength = RingOfStrength;

var RingOfConstitution = (function (_Ring2) {
  _inherits(RingOfConstitution, _Ring2);

  function RingOfConstitution() {
    _classCallCheck(this, _RingOfConstitution);

    _get(Object.getPrototypeOf(_RingOfConstitution.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfConstitution, [{
    key: 'con',
    value: function con() {
      return this.buc;
    }
  }]);

  var _RingOfConstitution = RingOfConstitution;
  RingOfConstitution = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfConstitution) || RingOfConstitution;
  RingOfConstitution = (0, _constantsDecorators.rarity)(5)(RingOfConstitution) || RingOfConstitution;
  return RingOfConstitution;
})(_definitionsEquipment.Ring);

exports.RingOfConstitution = RingOfConstitution;

var RingOfDexterity = (function (_Ring3) {
  _inherits(RingOfDexterity, _Ring3);

  function RingOfDexterity() {
    _classCallCheck(this, _RingOfDexterity);

    _get(Object.getPrototypeOf(_RingOfDexterity.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfDexterity, [{
    key: 'dex',
    value: function dex() {
      return this.buc;
    }
  }]);

  var _RingOfDexterity = RingOfDexterity;
  RingOfDexterity = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfDexterity) || RingOfDexterity;
  RingOfDexterity = (0, _constantsDecorators.rarity)(15)(RingOfDexterity) || RingOfDexterity;
  return RingOfDexterity;
})(_definitionsEquipment.Ring);

exports.RingOfDexterity = RingOfDexterity;

var RingOfIntelligence = (function (_Ring4) {
  _inherits(RingOfIntelligence, _Ring4);

  function RingOfIntelligence() {
    _classCallCheck(this, _RingOfIntelligence);

    _get(Object.getPrototypeOf(_RingOfIntelligence.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfIntelligence, [{
    key: 'int',
    value: function int() {
      return this.buc;
    }
  }]);

  var _RingOfIntelligence = RingOfIntelligence;
  RingOfIntelligence = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfIntelligence) || RingOfIntelligence;
  RingOfIntelligence = (0, _constantsDecorators.rarity)(20)(RingOfIntelligence) || RingOfIntelligence;
  return RingOfIntelligence;
})(_definitionsEquipment.Ring);

exports.RingOfIntelligence = RingOfIntelligence;

var RingOfWisdom = (function (_Ring5) {
  _inherits(RingOfWisdom, _Ring5);

  function RingOfWisdom() {
    _classCallCheck(this, _RingOfWisdom);

    _get(Object.getPrototypeOf(_RingOfWisdom.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfWisdom, [{
    key: 'wis',
    value: function wis() {
      return this.buc;
    }
  }]);

  var _RingOfWisdom = RingOfWisdom;
  RingOfWisdom = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfWisdom) || RingOfWisdom;
  RingOfWisdom = (0, _constantsDecorators.rarity)(25)(RingOfWisdom) || RingOfWisdom;
  return RingOfWisdom;
})(_definitionsEquipment.Ring);

exports.RingOfWisdom = RingOfWisdom;

var RingOfAdornment = (function (_Ring6) {
  _inherits(RingOfAdornment, _Ring6);

  function RingOfAdornment() {
    _classCallCheck(this, _RingOfAdornment);

    _get(Object.getPrototypeOf(_RingOfAdornment.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfAdornment, [{
    key: 'cha',
    value: function cha() {
      return this.buc;
    }
  }]);

  var _RingOfAdornment = RingOfAdornment;
  RingOfAdornment = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Gold)(RingOfAdornment) || RingOfAdornment;
  RingOfAdornment = (0, _constantsDecorators.rarity)(2)(RingOfAdornment) || RingOfAdornment;
  return RingOfAdornment;
})(_definitionsEquipment.Ring);

exports.RingOfAdornment = RingOfAdornment;

var RingOfLuck = (function (_Ring7) {
  _inherits(RingOfLuck, _Ring7);

  function RingOfLuck() {
    _classCallCheck(this, _RingOfLuck);

    _get(Object.getPrototypeOf(_RingOfLuck.prototype), 'constructor', this).apply(this, arguments);
  }

  // endregion

  // region Trait Rings

  _createClass(RingOfLuck, [{
    key: 'luk',
    value: function luk() {
      return this.buc;
    }
  }]);

  var _RingOfLuck = RingOfLuck;
  RingOfLuck = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfLuck) || RingOfLuck;
  RingOfLuck = (0, _constantsDecorators.rarity)(1)(RingOfLuck) || RingOfLuck;
  return RingOfLuck;
})(_definitionsEquipment.Ring);

exports.RingOfLuck = RingOfLuck;

var RingOfProtection = (function (_Ring8) {
  _inherits(RingOfProtection, _Ring8);

  function RingOfProtection() {
    _classCallCheck(this, _RingOfProtection);

    _get(Object.getPrototypeOf(_RingOfProtection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfProtection, [{
    key: 'Protection',
    value: function Protection() {
      return this.buc;
    }
  }]);

  var _RingOfProtection = RingOfProtection;
  RingOfProtection = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfProtection) || RingOfProtection;
  RingOfProtection = (0, _constantsDecorators.rarity)(5)(RingOfProtection) || RingOfProtection;
  return RingOfProtection;
})(_definitionsEquipment.Ring);

exports.RingOfProtection = RingOfProtection;

var RingOfHaste = (function (_Ring9) {
  _inherits(RingOfHaste, _Ring9);

  function RingOfHaste() {
    _classCallCheck(this, _RingOfHaste);

    _get(Object.getPrototypeOf(_RingOfHaste.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfHaste, [{
    key: 'Haste',
    value: function Haste() {
      return this.buc * 25;
    }
  }]);

  var _RingOfHaste = RingOfHaste;
  RingOfHaste = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfHaste) || RingOfHaste;
  RingOfHaste = (0, _constantsDecorators.rarity)(4)(RingOfHaste) || RingOfHaste;
  return RingOfHaste;
})(_definitionsEquipment.Ring);

exports.RingOfHaste = RingOfHaste;

var RingOfSight = (function (_Ring10) {
  _inherits(RingOfSight, _Ring10);

  function RingOfSight() {
    _classCallCheck(this, _RingOfSight);

    _get(Object.getPrototypeOf(_RingOfSight.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfSight, [{
    key: 'Infravision',
    value: function Infravision() {
      return this.buc;
    }
  }]);

  var _RingOfSight = RingOfSight;
  RingOfSight = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfSight) || RingOfSight;
  RingOfSight = (0, _constantsDecorators.rarity)(1)(RingOfSight) || RingOfSight;
  return RingOfSight;
})(_definitionsEquipment.Ring);

exports.RingOfSight = RingOfSight;

var RingOfAccuracy = (function (_Ring11) {
  _inherits(RingOfAccuracy, _Ring11);

  function RingOfAccuracy() {
    _classCallCheck(this, _RingOfAccuracy);

    _get(Object.getPrototypeOf(_RingOfAccuracy.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfAccuracy, [{
    key: 'toHit',
    value: function toHit() {
      return '0d0 +' + this.buc;
    }
  }]);

  var _RingOfAccuracy = RingOfAccuracy;
  RingOfAccuracy = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfAccuracy) || RingOfAccuracy;
  RingOfAccuracy = (0, _constantsDecorators.rarity)(25)(RingOfAccuracy) || RingOfAccuracy;
  return RingOfAccuracy;
})(_definitionsEquipment.Ring);

exports.RingOfAccuracy = RingOfAccuracy;

var RingOfBonusDamage = (function (_Ring12) {
  _inherits(RingOfBonusDamage, _Ring12);

  function RingOfBonusDamage() {
    _classCallCheck(this, _RingOfBonusDamage);

    _get(Object.getPrototypeOf(_RingOfBonusDamage.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfBonusDamage, [{
    key: 'bonusDamage',
    value: function bonusDamage() {
      return '0d0 +' + this.buc;
    }
  }]);

  var _RingOfBonusDamage = RingOfBonusDamage;
  RingOfBonusDamage = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfBonusDamage) || RingOfBonusDamage;
  RingOfBonusDamage = (0, _constantsDecorators.rarity)(15)(RingOfBonusDamage) || RingOfBonusDamage;
  return RingOfBonusDamage;
})(_definitionsEquipment.Ring);

exports.RingOfBonusDamage = RingOfBonusDamage;

var RingOfStealth = (function (_Ring13) {
  _inherits(RingOfStealth, _Ring13);

  function RingOfStealth() {
    _classCallCheck(this, _RingOfStealth);

    _get(Object.getPrototypeOf(_RingOfStealth.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfStealth, [{
    key: 'Stealth',
    value: function Stealth() {
      return this.buc * 10;
    }
  }]);

  var _RingOfStealth = RingOfStealth;
  RingOfStealth = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(RingOfStealth) || RingOfStealth;
  RingOfStealth = (0, _constantsDecorators.rarity)(1)(RingOfStealth) || RingOfStealth;
  return RingOfStealth;
})(_definitionsEquipment.Ring);

exports.RingOfStealth = RingOfStealth;

var RingOfInvisibility = (function (_Ring14) {
  _inherits(RingOfInvisibility, _Ring14);

  function RingOfInvisibility() {
    _classCallCheck(this, _RingOfInvisibility);

    _get(Object.getPrototypeOf(_RingOfInvisibility.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfInvisibility, [{
    key: 'Invisible',
    value: function Invisible() {
      return this.buc;
    }
  }]);

  var _RingOfInvisibility = RingOfInvisibility;
  RingOfInvisibility = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(RingOfInvisibility) || RingOfInvisibility;
  RingOfInvisibility = (0, _constantsDecorators.rarity)(1)(RingOfInvisibility) || RingOfInvisibility;
  return RingOfInvisibility;
})(_definitionsEquipment.Ring);

exports.RingOfInvisibility = RingOfInvisibility;

var RingOfSeeInvisible = (function (_Ring15) {
  _inherits(RingOfSeeInvisible, _Ring15);

  function RingOfSeeInvisible() {
    _classCallCheck(this, _RingOfSeeInvisible);

    _get(Object.getPrototypeOf(_RingOfSeeInvisible.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfSeeInvisible, [{
    key: 'SeeInvisible',
    value: function SeeInvisible() {
      return this.buc;
    }
  }]);

  var _RingOfSeeInvisible = RingOfSeeInvisible;
  RingOfSeeInvisible = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(RingOfSeeInvisible) || RingOfSeeInvisible;
  RingOfSeeInvisible = (0, _constantsDecorators.rarity)(1)(RingOfSeeInvisible) || RingOfSeeInvisible;
  return RingOfSeeInvisible;
})(_definitionsEquipment.Ring);

exports.RingOfSeeInvisible = RingOfSeeInvisible;

var RingOfWarning = (function (_Ring16) {
  _inherits(RingOfWarning, _Ring16);

  function RingOfWarning() {
    _classCallCheck(this, _RingOfWarning);

    _get(Object.getPrototypeOf(_RingOfWarning.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfWarning, [{
    key: 'Warning',
    value: function Warning() {
      return this.buc * 10;
    }
  }]);

  var _RingOfWarning = RingOfWarning;
  RingOfWarning = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(RingOfWarning) || RingOfWarning;
  RingOfWarning = (0, _constantsDecorators.rarity)(1)(RingOfWarning) || RingOfWarning;
  return RingOfWarning;
})(_definitionsEquipment.Ring);

exports.RingOfWarning = RingOfWarning;

var RingOfRegeneration = (function (_Ring17) {
  _inherits(RingOfRegeneration, _Ring17);

  function RingOfRegeneration() {
    _classCallCheck(this, _RingOfRegeneration);

    _get(Object.getPrototypeOf(_RingOfRegeneration.prototype), 'constructor', this).apply(this, arguments);
  }

  // endregion

  // region Resistance Rings

  _createClass(RingOfRegeneration, [{
    key: 'hpRegen',
    value: function hpRegen() {
      return -3 * this.buc;
    }
  }, {
    key: 'mpRegen',
    value: function mpRegen() {
      return -3 * this.buc;
    }
  }]);

  var _RingOfRegeneration = RingOfRegeneration;
  RingOfRegeneration = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(RingOfRegeneration) || RingOfRegeneration;
  RingOfRegeneration = (0, _constantsDecorators.rarity)(1)(RingOfRegeneration) || RingOfRegeneration;
  return RingOfRegeneration;
})(_definitionsEquipment.Ring);

exports.RingOfRegeneration = RingOfRegeneration;

var RingOfPoisonResistance = (function (_Ring18) {
  _inherits(RingOfPoisonResistance, _Ring18);

  function RingOfPoisonResistance() {
    _classCallCheck(this, _RingOfPoisonResistance);

    _get(Object.getPrototypeOf(_RingOfPoisonResistance.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfPoisonResistance, [{
    key: 'PoisonResistance',
    value: function PoisonResistance() {
      return this.buc;
    }
  }]);

  var _RingOfPoisonResistance = RingOfPoisonResistance;
  RingOfPoisonResistance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(RingOfPoisonResistance) || RingOfPoisonResistance;
  RingOfPoisonResistance = (0, _constantsDecorators.rarity)(5)(RingOfPoisonResistance) || RingOfPoisonResistance;
  return RingOfPoisonResistance;
})(_definitionsEquipment.Ring);

exports.RingOfPoisonResistance = RingOfPoisonResistance;

var RingOfShockResistance = (function (_Ring19) {
  _inherits(RingOfShockResistance, _Ring19);

  function RingOfShockResistance() {
    _classCallCheck(this, _RingOfShockResistance);

    _get(Object.getPrototypeOf(_RingOfShockResistance.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfShockResistance, [{
    key: 'ShockResistance',
    value: function ShockResistance() {
      return this.buc;
    }
  }]);

  var _RingOfShockResistance = RingOfShockResistance;
  RingOfShockResistance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(RingOfShockResistance) || RingOfShockResistance;
  RingOfShockResistance = (0, _constantsDecorators.rarity)(5)(RingOfShockResistance) || RingOfShockResistance;
  return RingOfShockResistance;
})(_definitionsEquipment.Ring);

exports.RingOfShockResistance = RingOfShockResistance;

var RingOfAcidResistance = (function (_Ring20) {
  _inherits(RingOfAcidResistance, _Ring20);

  function RingOfAcidResistance() {
    _classCallCheck(this, _RingOfAcidResistance);

    _get(Object.getPrototypeOf(_RingOfAcidResistance.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfAcidResistance, [{
    key: 'AcidResistance',
    value: function AcidResistance() {
      return this.buc;
    }
  }]);

  var _RingOfAcidResistance = RingOfAcidResistance;
  RingOfAcidResistance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(RingOfAcidResistance) || RingOfAcidResistance;
  RingOfAcidResistance = (0, _constantsDecorators.rarity)(5)(RingOfAcidResistance) || RingOfAcidResistance;
  return RingOfAcidResistance;
})(_definitionsEquipment.Ring);

exports.RingOfAcidResistance = RingOfAcidResistance;

var RingOfFireResistance = (function (_Ring21) {
  _inherits(RingOfFireResistance, _Ring21);

  function RingOfFireResistance() {
    _classCallCheck(this, _RingOfFireResistance);

    _get(Object.getPrototypeOf(_RingOfFireResistance.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RingOfFireResistance, [{
    key: 'FireResistance',
    value: function FireResistance() {
      return this.buc;
    }
  }]);

  var _RingOfFireResistance = RingOfFireResistance;
  RingOfFireResistance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(RingOfFireResistance) || RingOfFireResistance;
  RingOfFireResistance = (0, _constantsDecorators.rarity)(5)(RingOfFireResistance) || RingOfFireResistance;
  return RingOfFireResistance;
})(_definitionsEquipment.Ring);

exports.RingOfFireResistance = RingOfFireResistance;

var RingOfIceResistance = (function (_Ring22) {
  _inherits(RingOfIceResistance, _Ring22);

  function RingOfIceResistance() {
    _classCallCheck(this, _RingOfIceResistance);

    _get(Object.getPrototypeOf(_RingOfIceResistance.prototype), 'constructor', this).apply(this, arguments);
  }

  // endregion

  _createClass(RingOfIceResistance, [{
    key: 'IceResistance',
    value: function IceResistance() {
      return this.buc;
    }
  }]);

  var _RingOfIceResistance = RingOfIceResistance;
  RingOfIceResistance = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Glass)(RingOfIceResistance) || RingOfIceResistance;
  RingOfIceResistance = (0, _constantsDecorators.rarity)(5)(RingOfIceResistance) || RingOfIceResistance;
  return RingOfIceResistance;
})(_definitionsEquipment.Ring);

exports.RingOfIceResistance = RingOfIceResistance;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../definitions/equipment');

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsDecorators = require('../../constants/decorators');

var ForceBolt = (function (_Spellbook) {
  _inherits(ForceBolt, _Spellbook);

  function ForceBolt() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ForceBolt);

    _lodash2['default'].extend(opts, {
      manaCost: 2,
      attacks: [_attacks_all2['default'].Force({ roll: '2d6', range: 4 })]
    });
    _get(Object.getPrototypeOf(_ForceBolt.prototype), 'constructor', this).call(this, opts);
  }

  var _ForceBolt = ForceBolt;
  ForceBolt = (0, _constantsDecorators.rarity)(25)(ForceBolt) || ForceBolt;
  return ForceBolt;
})(_definitionsEquipment.Spellbook);

exports.ForceBolt = ForceBolt;

var CureSelf = (function (_Spellbook2) {
  _inherits(CureSelf, _Spellbook2);

  function CureSelf() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _CureSelf);

    _lodash2['default'].extend(opts, {
      manaCost: 10,
      healRoll: '3d6'
    });
    _get(Object.getPrototypeOf(_CureSelf.prototype), 'constructor', this).call(this, opts);
  }

  var _CureSelf = CureSelf;
  CureSelf = (0, _constantsDecorators.rarity)(0)(CureSelf) || CureSelf;
  return CureSelf;
})(_definitionsEquipment.Spellbook);

exports.CureSelf = CureSelf;

var ExtraCureSelf = (function (_Spellbook3) {
  _inherits(ExtraCureSelf, _Spellbook3);

  function ExtraCureSelf() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ExtraCureSelf);

    _lodash2['default'].extend(opts, {
      manaCost: 25,
      healRoll: '6d6'
    });
    _get(Object.getPrototypeOf(_ExtraCureSelf.prototype), 'constructor', this).call(this, opts);
  }

  var _ExtraCureSelf = ExtraCureSelf;
  ExtraCureSelf = (0, _constantsDecorators.rarity)(0)(ExtraCureSelf) || ExtraCureSelf;
  return ExtraCureSelf;
})(_definitionsEquipment.Spellbook);

exports.ExtraCureSelf = ExtraCureSelf;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wands.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../definitions/equipment');

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsDecorators = require('../../constants/decorators');

var WandOfStriking = (function (_Wand) {
  _inherits(WandOfStriking, _Wand);

  function WandOfStriking() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _WandOfStriking);

    _lodash2['default'].extend(opts, {
      charges: '2d5',
      attacks: [_attacks_all2['default'].Force({ roll: '2d6', range: 4 })]
    });
    _get(Object.getPrototypeOf(_WandOfStriking.prototype), 'constructor', this).call(this, opts);
  }

  var _WandOfStriking = WandOfStriking;
  WandOfStriking = (0, _constantsDecorators.rarity)(25)(WandOfStriking) || WandOfStriking;
  return WandOfStriking;
})(_definitionsEquipment.Wand);

exports.WandOfStriking = WandOfStriking;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/axes.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var Axe = (function (_Hands) {
  _inherits(Axe, _Hands);

  function Axe() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Axe);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Axe.prototype), 'constructor', this).call(this, opts);
  }

  var _Axe = Axe;
  Axe = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Axe) || Axe;
  Axe = (0, _constantsDecorators.rarity)(10)(Axe) || Axe;
  return Axe;
})(_definitionsEquipment.Hands);

exports.Axe = Axe;

var BattleAxe = (function (_Hands2) {
  _inherits(BattleAxe, _Hands2);

  function BattleAxe() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _BattleAxe);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d8 + 1d4' })]
    });
    _get(Object.getPrototypeOf(_BattleAxe.prototype), 'constructor', this).call(this, opts);
  }

  var _BattleAxe = BattleAxe;
  BattleAxe = (0, _constantsDecorators.twoHanded)(BattleAxe) || BattleAxe;
  BattleAxe = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(BattleAxe) || BattleAxe;
  BattleAxe = (0, _constantsDecorators.rarity)(3)(BattleAxe) || BattleAxe;
  return BattleAxe;
})(_definitionsEquipment.Hands);

exports.BattleAxe = BattleAxe;

var DwarvishMattock = (function (_Hands3) {
  _inherits(DwarvishMattock, _Hands3);

  function DwarvishMattock() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _DwarvishMattock);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d12 + 1d4' })]
    });
    _get(Object.getPrototypeOf(_DwarvishMattock.prototype), 'constructor', this).call(this, opts);
  }

  var _DwarvishMattock = DwarvishMattock;
  DwarvishMattock = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(DwarvishMattock) || DwarvishMattock;
  DwarvishMattock = (0, _constantsDecorators.rarity)(1)(DwarvishMattock) || DwarvishMattock;
  return DwarvishMattock;
})(_definitionsEquipment.Hands);

exports.DwarvishMattock = DwarvishMattock;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/bows.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var allArrows = ['orcisharrow', 'arrow', 'elvenarrow'];

var OrcishBow = (function (_Hands) {
  _inherits(OrcishBow, _Hands);

  function OrcishBow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _OrcishBow);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#f00' },
      attacks: [_attacks_all2['default'].Ranged({ roll: '1d1' })] // if it can't shoot arrows, it'll bash for 1d1
    });
    _get(Object.getPrototypeOf(_OrcishBow.prototype), 'constructor', this).call(this, opts);
  }

  var _OrcishBow = OrcishBow;
  OrcishBow = (0, _constantsDecorators.ranged)({ ammo: allArrows, damageBoost: '1d1' })(OrcishBow) || OrcishBow;
  OrcishBow = (0, _constantsDecorators.twoHanded)(OrcishBow) || OrcishBow;
  OrcishBow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(OrcishBow) || OrcishBow;
  OrcishBow = (0, _constantsDecorators.rarity)(35)(OrcishBow) || OrcishBow;
  return OrcishBow;
})(_definitionsEquipment.Hands);

exports.OrcishBow = OrcishBow;

var Sling = (function (_Hands2) {
  _inherits(Sling, _Hands2);

  function Sling() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Sling);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#f00' },
      attacks: [_attacks_all2['default'].Ranged({ roll: '1d1' })] // if it can't shoot arrows, it'll bash for 1d2
    });
    _get(Object.getPrototypeOf(_Sling.prototype), 'constructor', this).call(this, opts);
  }

  var _Sling = Sling;
  Sling = (0, _constantsDecorators.ranged)({ ammo: ['rock', 'flint stone'], damageBoost: '1d2' })(Sling) || Sling;
  Sling = (0, _constantsDecorators.twoHanded)(Sling) || Sling;
  Sling = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Sling) || Sling;
  Sling = (0, _constantsDecorators.rarity)(25)(Sling) || Sling;
  return Sling;
})(_definitionsEquipment.Hands);

exports.Sling = Sling;

var Bow = (function (_Hands3) {
  _inherits(Bow, _Hands3);

  function Bow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Bow);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#f00' },
      attacks: [_attacks_all2['default'].Ranged({ roll: '1d2' })] // if it can't shoot arrows, it'll bash for 1d2
    });
    _get(Object.getPrototypeOf(_Bow.prototype), 'constructor', this).call(this, opts);
  }

  var _Bow = Bow;
  Bow = (0, _constantsDecorators.ranged)({ ammo: allArrows, damageBoost: '1d2' })(Bow) || Bow;
  Bow = (0, _constantsDecorators.twoHanded)(Bow) || Bow;
  Bow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Bow) || Bow;
  Bow = (0, _constantsDecorators.rarity)(25)(Bow) || Bow;
  return Bow;
})(_definitionsEquipment.Hands);

exports.Bow = Bow;

var ElvenBow = (function (_Hands4) {
  _inherits(ElvenBow, _Hands4);

  function ElvenBow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvenBow);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#f00' },
      attacks: [_attacks_all2['default'].Ranged({ roll: '1d3' })] // if it can't shoot arrows, it'll bash for 1d3
    });
    _get(Object.getPrototypeOf(_ElvenBow.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvenBow = ElvenBow;
  ElvenBow = (0, _constantsDecorators.ranged)({ ammo: allArrows, damageBoost: '1d3' })(ElvenBow) || ElvenBow;
  ElvenBow = (0, _constantsDecorators.twoHanded)(ElvenBow) || ElvenBow;
  ElvenBow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(ElvenBow) || ElvenBow;
  ElvenBow = (0, _constantsDecorators.rarity)(15)(ElvenBow) || ElvenBow;
  return ElvenBow;
})(_definitionsEquipment.Hands);

exports.ElvenBow = ElvenBow;

var Crossbow = (function (_Hands5) {
  _inherits(Crossbow, _Hands5);

  function Crossbow() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Crossbow);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#f00' },
      attacks: [_attacks_all2['default'].Ranged({ roll: '1d2' })] // if it can't shoot arrows, it'll bash for 1d2
    });
    _get(Object.getPrototypeOf(_Crossbow.prototype), 'constructor', this).call(this, opts);
  }

  var _Crossbow = Crossbow;
  Crossbow = (0, _constantsDecorators.ranged)({ ammo: ['bolt'], damageBoost: '1d3' })(Crossbow) || Crossbow;
  Crossbow = (0, _constantsDecorators.twoHanded)(Crossbow) || Crossbow;
  Crossbow = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Crossbow) || Crossbow;
  Crossbow = (0, _constantsDecorators.rarity)(25)(Crossbow) || Crossbow;
  return Crossbow;
})(_definitionsEquipment.Hands);

exports.Crossbow = Crossbow;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/daggers.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x7, _x8, _x9) { var _again = true; _function: while (_again) { var object = _x7, property = _x8, receiver = _x9; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x7 = parent; _x8 = property; _x9 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var OrcishDagger = (function (_Hands) {
  _inherits(OrcishDagger, _Hands);

  function OrcishDagger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _OrcishDagger);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d3' })]
    });
    _get(Object.getPrototypeOf(_OrcishDagger.prototype), 'constructor', this).call(this, opts);
  }

  var _OrcishDagger = OrcishDagger;
  OrcishDagger = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(OrcishDagger) || OrcishDagger;
  OrcishDagger = (0, _constantsDecorators.rarity)(35)(OrcishDagger) || OrcishDagger;
  return OrcishDagger;
})(_definitionsEquipment.Hands);

exports.OrcishDagger = OrcishDagger;

var Dagger = (function (_Hands2) {
  _inherits(Dagger, _Hands2);

  function Dagger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Dagger);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d4' })]
    });
    _get(Object.getPrototypeOf(_Dagger.prototype), 'constructor', this).call(this, opts);
  }

  var _Dagger = Dagger;
  Dagger = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Dagger) || Dagger;
  Dagger = (0, _constantsDecorators.rarity)(25)(Dagger) || Dagger;
  return Dagger;
})(_definitionsEquipment.Hands);

exports.Dagger = Dagger;

var Scalpel = (function (_Hands3) {
  _inherits(Scalpel, _Hands3);

  function Scalpel() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Scalpel);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d3' })]
    });
    _get(Object.getPrototypeOf(_Scalpel.prototype), 'constructor', this).call(this, opts);
  }

  var _Scalpel = Scalpel;
  Scalpel = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Scalpel) || Scalpel;
  Scalpel = (0, _constantsDecorators.rarity)(25)(Scalpel) || Scalpel;
  return Scalpel;
})(_definitionsEquipment.Hands);

exports.Scalpel = Scalpel;

var SilverDagger = (function (_Hands4) {
  _inherits(SilverDagger, _Hands4);

  function SilverDagger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _SilverDagger);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d5' })]
    });
    _get(Object.getPrototypeOf(_SilverDagger.prototype), 'constructor', this).call(this, opts);
  }

  var _SilverDagger = SilverDagger;
  SilverDagger = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Silver)(SilverDagger) || SilverDagger;
  SilverDagger = (0, _constantsDecorators.rarity)(15)(SilverDagger) || SilverDagger;
  return SilverDagger;
})(_definitionsEquipment.Hands);

exports.SilverDagger = SilverDagger;

var ElvenDagger = (function (_Hands5) {
  _inherits(ElvenDagger, _Hands5);

  function ElvenDagger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvenDagger);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d7' })]
    });
    _get(Object.getPrototypeOf(_ElvenDagger.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvenDagger = ElvenDagger;
  ElvenDagger = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(ElvenDagger) || ElvenDagger;
  ElvenDagger = (0, _constantsDecorators.rarity)(15)(ElvenDagger) || ElvenDagger;
  return ElvenDagger;
})(_definitionsEquipment.Hands);

exports.ElvenDagger = ElvenDagger;

var Crysknife = (function (_Hands6) {
  _inherits(Crysknife, _Hands6);

  function Crysknife() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Crysknife);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d10' })]
    });
    _get(Object.getPrototypeOf(_Crysknife.prototype), 'constructor', this).call(this, opts);
  }

  var _Crysknife = Crysknife;
  Crysknife = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Mineral)(Crysknife) || Crysknife;
  Crysknife = (0, _constantsDecorators.rarity)(5)(Crysknife) || Crysknife;
  return Crysknife;
})(_definitionsEquipment.Hands);

exports.Crysknife = Crysknife;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/longswords.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x9, _x10, _x11) { var _again = true; _function: while (_again) { var object = _x9, property = _x10, receiver = _x11; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x9 = parent; _x10 = property; _x11 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var Longsword = (function (_Hands) {
  _inherits(Longsword, _Hands);

  function Longsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Longsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d8' })]
    });
    _get(Object.getPrototypeOf(_Longsword.prototype), 'constructor', this).call(this, opts);
  }

  var _Longsword = Longsword;
  Longsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Longsword) || Longsword;
  Longsword = (0, _constantsDecorators.rarity)(25)(Longsword) || Longsword;
  return Longsword;
})(_definitionsEquipment.Hands);

exports.Longsword = Longsword;

var Katana = (function (_Hands2) {
  _inherits(Katana, _Hands2);

  function Katana() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Katana);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d10' })]
    });
    _get(Object.getPrototypeOf(_Katana.prototype), 'constructor', this).call(this, opts);
  }

  var _Katana = Katana;
  Katana = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Katana) || Katana;
  Katana = (0, _constantsDecorators.rarity)(15)(Katana) || Katana;
  return Katana;
})(_definitionsEquipment.Hands);

exports.Katana = Katana;

var Broadsword = (function (_Hands3) {
  _inherits(Broadsword, _Hands3);

  function Broadsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Broadsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '2d4' })]
    });
    _get(Object.getPrototypeOf(_Broadsword.prototype), 'constructor', this).call(this, opts);
  }

  var _Broadsword = Broadsword;
  Broadsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Broadsword) || Broadsword;
  Broadsword = (0, _constantsDecorators.rarity)(20)(Broadsword) || Broadsword;
  return Broadsword;
})(_definitionsEquipment.Hands);

exports.Broadsword = Broadsword;

var ElvenBroadsword = (function (_Hands4) {
  _inherits(ElvenBroadsword, _Hands4);

  function ElvenBroadsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvenBroadsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d6 + 1d4' })]
    });
    _get(Object.getPrototypeOf(_ElvenBroadsword.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvenBroadsword = ElvenBroadsword;
  ElvenBroadsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(ElvenBroadsword) || ElvenBroadsword;
  ElvenBroadsword = (0, _constantsDecorators.rarity)(5)(ElvenBroadsword) || ElvenBroadsword;
  return ElvenBroadsword;
})(_definitionsEquipment.Hands);

exports.ElvenBroadsword = ElvenBroadsword;

var SilverSaber = (function (_Hands5) {
  _inherits(SilverSaber, _Hands5);

  function SilverSaber() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _SilverSaber);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d8', toHit: '1d4' })]
    });
    _get(Object.getPrototypeOf(_SilverSaber.prototype), 'constructor', this).call(this, opts);
  }

  var _SilverSaber = SilverSaber;
  SilverSaber = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Silver)(SilverSaber) || SilverSaber;
  SilverSaber = (0, _constantsDecorators.rarity)(1)(SilverSaber) || SilverSaber;
  return SilverSaber;
})(_definitionsEquipment.Hands);

exports.SilverSaber = SilverSaber;

var Scimitar = (function (_Hands6) {
  _inherits(Scimitar, _Hands6);

  function Scimitar() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Scimitar);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d8', toHit: '1d4' })]
    });
    _get(Object.getPrototypeOf(_Scimitar.prototype), 'constructor', this).call(this, opts);
  }

  var _Scimitar = Scimitar;
  Scimitar = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Scimitar) || Scimitar;
  Scimitar = (0, _constantsDecorators.rarity)(5)(Scimitar) || Scimitar;
  return Scimitar;
})(_definitionsEquipment.Hands);

exports.Scimitar = Scimitar;

var Greatsword = (function (_Hands7) {
  _inherits(Greatsword, _Hands7);

  function Greatsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Greatsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d12' })]
    });
    _get(Object.getPrototypeOf(_Greatsword.prototype), 'constructor', this).call(this, opts);
  }

  var _Greatsword = Greatsword;
  Greatsword = (0, _constantsDecorators.twoHanded)(Greatsword) || Greatsword;
  Greatsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Greatsword) || Greatsword;
  Greatsword = (0, _constantsDecorators.rarity)(15)(Greatsword) || Greatsword;
  return Greatsword;
})(_definitionsEquipment.Hands);

exports.Greatsword = Greatsword;

var Tsurugi = (function (_Hands8) {
  _inherits(Tsurugi, _Hands8);

  function Tsurugi() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Tsurugi);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d16' })]
    });
    _get(Object.getPrototypeOf(_Tsurugi.prototype), 'constructor', this).call(this, opts);
  }

  var _Tsurugi = Tsurugi;
  Tsurugi = (0, _constantsDecorators.twoHanded)(Tsurugi) || Tsurugi;
  Tsurugi = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Tsurugi) || Tsurugi;
  Tsurugi = (0, _constantsDecorators.rarity)(1)(Tsurugi) || Tsurugi;
  return Tsurugi;
})(_definitionsEquipment.Hands);

exports.Tsurugi = Tsurugi;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/maces.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x9, _x10, _x11) { var _again = true; _function: while (_again) { var object = _x9, property = _x10, receiver = _x11; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x9 = parent; _x10 = property; _x11 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var Bullwhip = (function (_Hands) {
  _inherits(Bullwhip, _Hands);

  function Bullwhip() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Bullwhip);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d3' })]
    });
    _get(Object.getPrototypeOf(_Bullwhip.prototype), 'constructor', this).call(this, opts);
  }

  var _Bullwhip = Bullwhip;
  Bullwhip = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(Bullwhip) || Bullwhip;
  Bullwhip = (0, _constantsDecorators.rarity)(25)(Bullwhip) || Bullwhip;
  return Bullwhip;
})(_definitionsEquipment.Hands);

exports.Bullwhip = Bullwhip;

var GardenHose = (function (_Hands2) {
  _inherits(GardenHose, _Hands2);

  function GardenHose() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _GardenHose);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d2' })]
    });
    _get(Object.getPrototypeOf(_GardenHose.prototype), 'constructor', this).call(this, opts);
  }

  var _GardenHose = GardenHose;
  GardenHose = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Plastic)(GardenHose) || GardenHose;
  GardenHose = (0, _constantsDecorators.rarity)(15)(GardenHose) || GardenHose;
  return GardenHose;
})(_definitionsEquipment.Hands);

exports.GardenHose = GardenHose;

var Club = (function (_Hands3) {
  _inherits(Club, _Hands3);

  function Club() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Club);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Club.prototype), 'constructor', this).call(this, opts);
  }

  var _Club = Club;
  Club = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Club) || Club;
  Club = (0, _constantsDecorators.rarity)(25)(Club) || Club;
  return Club;
})(_definitionsEquipment.Hands);

exports.Club = Club;

var Aklys = (function (_Hands4) {
  _inherits(Aklys, _Hands4);

  function Aklys() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Aklys);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Aklys.prototype), 'constructor', this).call(this, opts);
  }

  var _Aklys = Aklys;
  Aklys = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Aklys) || Aklys;
  Aklys = (0, _constantsDecorators.rarity)(25)(Aklys) || Aklys;
  return Aklys;
})(_definitionsEquipment.Hands);

exports.Aklys = Aklys;

var Mace = (function (_Hands5) {
  _inherits(Mace, _Hands5);

  function Mace() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Mace);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d6 + 1' })]
    });
    _get(Object.getPrototypeOf(_Mace.prototype), 'constructor', this).call(this, opts);
  }

  var _Mace = Mace;
  Mace = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Mace) || Mace;
  Mace = (0, _constantsDecorators.rarity)(20)(Mace) || Mace;
  return Mace;
})(_definitionsEquipment.Hands);

exports.Mace = Mace;

var Flail = (function (_Hands6) {
  _inherits(Flail, _Hands6);

  function Flail() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Flail);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '1d6 + 2', toHit: '1d2' }), _attacks_all2['default'].Stab({ roll: '1d2' })]
    });
    _get(Object.getPrototypeOf(_Flail.prototype), 'constructor', this).call(this, opts);
  }

  var _Flail = Flail;
  Flail = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Flail) || Flail;
  Flail = (0, _constantsDecorators.rarity)(5)(Flail) || Flail;
  return Flail;
})(_definitionsEquipment.Hands);

exports.Flail = Flail;

var Morningstar = (function (_Hands7) {
  _inherits(Morningstar, _Hands7);

  function Morningstar() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Morningstar);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '2d4' })]
    });
    _get(Object.getPrototypeOf(_Morningstar.prototype), 'constructor', this).call(this, opts);
  }

  var _Morningstar = Morningstar;
  Morningstar = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Morningstar) || Morningstar;
  Morningstar = (0, _constantsDecorators.rarity)(15)(Morningstar) || Morningstar;
  return Morningstar;
})(_definitionsEquipment.Hands);

exports.Morningstar = Morningstar;

var Warhammer = (function (_Hands8) {
  _inherits(Warhammer, _Hands8);

  function Warhammer() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Warhammer);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Smash({ roll: '2d14' })]
    });
    _get(Object.getPrototypeOf(_Warhammer.prototype), 'constructor', this).call(this, opts);
  }

  var _Warhammer = Warhammer;
  Warhammer = (0, _constantsDecorators.twoHanded)(Warhammer) || Warhammer;
  Warhammer = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Warhammer) || Warhammer;
  Warhammer = (0, _constantsDecorators.rarity)(1)(Warhammer) || Warhammer;
  return Warhammer;
})(_definitionsEquipment.Hands);

exports.Warhammer = Warhammer;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/shortswords.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x5, _x6, _x7) { var _again = true; _function: while (_again) { var object = _x5, property = _x6, receiver = _x7; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x5 = parent; _x6 = property; _x7 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var OrcishShortSword = (function (_Hands) {
  _inherits(OrcishShortSword, _Hands);

  function OrcishShortSword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _OrcishShortSword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d5' })]
    });
    _get(Object.getPrototypeOf(_OrcishShortSword.prototype), 'constructor', this).call(this, opts);
  }

  var _OrcishShortSword = OrcishShortSword;
  OrcishShortSword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Copper)(OrcishShortSword) || OrcishShortSword;
  OrcishShortSword = (0, _constantsDecorators.rarity)(25)(OrcishShortSword) || OrcishShortSword;
  return OrcishShortSword;
})(_definitionsEquipment.Hands);

exports.OrcishShortSword = OrcishShortSword;

var Shortsword = (function (_Hands2) {
  _inherits(Shortsword, _Hands2);

  function Shortsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Shortsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Shortsword.prototype), 'constructor', this).call(this, opts);
  }

  var _Shortsword = Shortsword;
  Shortsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Shortsword) || Shortsword;
  Shortsword = (0, _constantsDecorators.rarity)(25)(Shortsword) || Shortsword;
  return Shortsword;
})(_definitionsEquipment.Hands);

exports.Shortsword = Shortsword;

var DwarvenShortsword = (function (_Hands3) {
  _inherits(DwarvenShortsword, _Hands3);

  function DwarvenShortsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _DwarvenShortsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d7' })]
    });
    _get(Object.getPrototypeOf(_DwarvenShortsword.prototype), 'constructor', this).call(this, opts);
  }

  var _DwarvenShortsword = DwarvenShortsword;
  DwarvenShortsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(DwarvenShortsword) || DwarvenShortsword;
  DwarvenShortsword = (0, _constantsDecorators.rarity)(15)(DwarvenShortsword) || DwarvenShortsword;
  return DwarvenShortsword;
})(_definitionsEquipment.Hands);

exports.DwarvenShortsword = DwarvenShortsword;

var ElvishShortsword = (function (_Hands4) {
  _inherits(ElvishShortsword, _Hands4);

  function ElvishShortsword() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvishShortsword);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Slash({ roll: '1d8' })]
    });
    _get(Object.getPrototypeOf(_ElvishShortsword.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvishShortsword = ElvishShortsword;
  ElvishShortsword = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(ElvishShortsword) || ElvishShortsword;
  ElvishShortsword = (0, _constantsDecorators.rarity)(5)(ElvishShortsword) || ElvishShortsword;
  return ElvishShortsword;
})(_definitionsEquipment.Hands);

exports.ElvishShortsword = ElvishShortsword;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/spears.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var OrcishSpear = (function (_Hands) {
  _inherits(OrcishSpear, _Hands);

  function OrcishSpear() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _OrcishSpear);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#ccc' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d5' })]
    });
    _get(Object.getPrototypeOf(_OrcishSpear.prototype), 'constructor', this).call(this, opts);
  }

  var _OrcishSpear = OrcishSpear;
  OrcishSpear = (0, _constantsDecorators.twoHanded)(OrcishSpear) || OrcishSpear;
  OrcishSpear = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(OrcishSpear) || OrcishSpear;
  OrcishSpear = (0, _constantsDecorators.rarity)(35)(OrcishSpear) || OrcishSpear;
  return OrcishSpear;
})(_definitionsEquipment.Hands);

exports.OrcishSpear = OrcishSpear;

var Spear = (function (_Hands2) {
  _inherits(Spear, _Hands2);

  function Spear() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Spear);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Spear.prototype), 'constructor', this).call(this, opts);
  }

  var _Spear = Spear;
  Spear = (0, _constantsDecorators.twoHanded)(Spear) || Spear;
  Spear = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Spear) || Spear;
  Spear = (0, _constantsDecorators.rarity)(25)(Spear) || Spear;
  return Spear;
})(_definitionsEquipment.Hands);

exports.Spear = Spear;

var DwarvenSpear = (function (_Hands3) {
  _inherits(DwarvenSpear, _Hands3);

  function DwarvenSpear() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _DwarvenSpear);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d7' })]
    });
    _get(Object.getPrototypeOf(_DwarvenSpear.prototype), 'constructor', this).call(this, opts);
  }

  var _DwarvenSpear = DwarvenSpear;
  DwarvenSpear = (0, _constantsDecorators.twoHanded)(DwarvenSpear) || DwarvenSpear;
  DwarvenSpear = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(DwarvenSpear) || DwarvenSpear;
  DwarvenSpear = (0, _constantsDecorators.rarity)(15)(DwarvenSpear) || DwarvenSpear;
  return DwarvenSpear;
})(_definitionsEquipment.Hands);

exports.DwarvenSpear = DwarvenSpear;

var ElvishSpear = (function (_Hands4) {
  _inherits(ElvishSpear, _Hands4);

  function ElvishSpear() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _ElvishSpear);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '1d8' })]
    });
    _get(Object.getPrototypeOf(_ElvishSpear.prototype), 'constructor', this).call(this, opts);
  }

  var _ElvishSpear = ElvishSpear;
  ElvishSpear = (0, _constantsDecorators.twoHanded)(ElvishSpear) || ElvishSpear;
  ElvishSpear = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(ElvishSpear) || ElvishSpear;
  ElvishSpear = (0, _constantsDecorators.rarity)(5)(ElvishSpear) || ElvishSpear;
  return ElvishSpear;
})(_definitionsEquipment.Hands);

exports.ElvishSpear = ElvishSpear;

var Trident = (function (_Hands5) {
  _inherits(Trident, _Hands5);

  function Trident() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Trident);

    _lodash2['default'].extend(opts, {
      glyph: { fg: 'teal' },
      attacks: [_attacks_all2['default'].Stab({ roll: '2d6 + 1' })]
    });
    _get(Object.getPrototypeOf(_Trident.prototype), 'constructor', this).call(this, opts);
  }

  _createClass(Trident, [{
    key: 'LizardBane',
    value: function LizardBane() {
      return 2;
    }
  }, {
    key: 'LizardFury',
    value: function LizardFury() {
      return 1;
    }
  }]);

  var _Trident = Trident;
  Trident = (0, _constantsDecorators.twoHanded)(Trident) || Trident;
  Trident = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Trident) || Trident;
  Trident = (0, _constantsDecorators.rarity)(1)(Trident) || Trident;
  return Trident;
})(_definitionsEquipment.Hands);

exports.Trident = Trident;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/weapons/staves.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _definitionsEquipment = require('../../../definitions/equipment');

var _attacks_all = require('../../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsMaterials = require('../../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../../constants/decorators');

var Quarterstaff = (function (_Hands) {
  _inherits(Quarterstaff, _Hands);

  function Quarterstaff() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Quarterstaff);

    _lodash2['default'].extend(opts, {
      glyph: { fg: '#49311c' },
      attacks: [_attacks_all2['default'].Bash({ roll: '1d6' })]
    });
    _get(Object.getPrototypeOf(_Quarterstaff.prototype), 'constructor', this).call(this, opts);
  }

  var _Quarterstaff = Quarterstaff;
  Quarterstaff = (0, _constantsDecorators.twoHanded)(Quarterstaff) || Quarterstaff;
  Quarterstaff = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Quarterstaff) || Quarterstaff;
  Quarterstaff = (0, _constantsDecorators.rarity)(25)(Quarterstaff) || Quarterstaff;
  return Quarterstaff;
})(_definitionsEquipment.Hands);

exports.Quarterstaff = Quarterstaff;

},{"../../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsEquipment = require('../../definitions/equipment');

var _libDefaultCalculations = require('../../lib/default-calculations');

var _constantsMaterials = require('../../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../../constants/decorators');

var LeatherGloves = (function (_Wrist) {
  _inherits(LeatherGloves, _Wrist);

  function LeatherGloves() {
    _classCallCheck(this, _LeatherGloves);

    _get(Object.getPrototypeOf(_LeatherGloves.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LeatherGloves, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }]);

  var _LeatherGloves = LeatherGloves;
  LeatherGloves = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(LeatherGloves) || LeatherGloves;
  LeatherGloves = (0, _constantsDecorators.rarity)(45)(LeatherGloves) || LeatherGloves;
  return LeatherGloves;
})(_definitionsEquipment.Wrist);

exports.LeatherGloves = LeatherGloves;

var GauntletsOfDexterity = (function (_Wrist2) {
  _inherits(GauntletsOfDexterity, _Wrist2);

  function GauntletsOfDexterity() {
    _classCallCheck(this, _GauntletsOfDexterity);

    _get(Object.getPrototypeOf(_GauntletsOfDexterity.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(GauntletsOfDexterity, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }, {
    key: 'dex',
    value: function dex() {
      return this.buc * -2;
    }
  }]);

  var _GauntletsOfDexterity = GauntletsOfDexterity;
  GauntletsOfDexterity = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(GauntletsOfDexterity) || GauntletsOfDexterity;
  GauntletsOfDexterity = (0, _constantsDecorators.rarity)(10)(GauntletsOfDexterity) || GauntletsOfDexterity;
  return GauntletsOfDexterity;
})(_definitionsEquipment.Wrist);

exports.GauntletsOfDexterity = GauntletsOfDexterity;

var GauntletsOfStrength = (function (_Wrist3) {
  _inherits(GauntletsOfStrength, _Wrist3);

  function GauntletsOfStrength() {
    _classCallCheck(this, _GauntletsOfStrength);

    _get(Object.getPrototypeOf(_GauntletsOfStrength.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(GauntletsOfStrength, [{
    key: 'ac',
    value: function ac() {
      return (0, _libDefaultCalculations.AC)(this);
    }
  }, {
    key: 'str',
    value: function str() {
      return this.buc * -2;
    }
  }]);

  var _GauntletsOfStrength = GauntletsOfStrength;
  GauntletsOfStrength = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Leather)(GauntletsOfStrength) || GauntletsOfStrength;
  GauntletsOfStrength = (0, _constantsDecorators.rarity)(10)(GauntletsOfStrength) || GauntletsOfStrength;
  return GauntletsOfStrength;
})(_definitionsEquipment.Wrist);

exports.GauntletsOfStrength = GauntletsOfStrength;

},{"../../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","../../lib/default-calculations":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _canines = require('./canines');

var Canines = _interopRequireWildcard(_canines);

var _elementals = require('./elementals');

var Elementals = _interopRequireWildcard(_elementals);

var _gnomes = require('./gnomes');

var Gnomes = _interopRequireWildcard(_gnomes);

var _insects = require('./insects');

var Insects = _interopRequireWildcard(_insects);

var _jellies = require('./jellies');

var Jellies = _interopRequireWildcard(_jellies);

var _kobolds = require('./kobolds');

var Kobolds = _interopRequireWildcard(_kobolds);

var _nymphs = require('./nymphs');

var Nymphs = _interopRequireWildcard(_nymphs);

var _orcs = require('./orcs');

var Orcs = _interopRequireWildcard(_orcs);

var _puddings = require('./puddings');

var Puddings = _interopRequireWildcard(_puddings);

var _rats = require('./rats');

var Rats = _interopRequireWildcard(_rats);

var _lizards = require('./lizards');

var Lizards = _interopRequireWildcard(_lizards);

var _spores = require('./spores');

var Spores = _interopRequireWildcard(_spores);

var _summoned = require('./_summoned');

var Summoned = _interopRequireWildcard(_summoned);

exports['default'] = _lodash2['default'].extend({}, Canines, Elementals, Gnomes, Insects, Jellies, Kobolds, Lizards, Nymphs, Orcs, Puddings, Rats, Spores, Summoned);
module.exports = exports['default'];

},{"./_summoned":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_summoned.js","./canines":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/canines.js","./elementals":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/elementals.js","./gnomes":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/gnomes.js","./insects":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/insects.js","./jellies":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/jellies.js","./kobolds":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/kobolds.js","./lizards":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/lizards.js","./nymphs":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/nymphs.js","./orcs":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/orcs.js","./puddings":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/puddings.js","./rats":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/rats.js","./spores":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/spores.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_special.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _constantsRandom = require('../../constants/random');

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var Selyk = { difficulty: 10, spawnPattern: '1d1', frequency: 0, init: function init() {
    return { important: true, glyph: { key: _constantsGlyphs.Entities.Humanoid, fg: _constantsGlyphColors.Special.Selyk },
      attributes: { ac: -10, speed: 200, level: 20, str: '2d10', con: '2d10', int: '3d10', mp: '5d10', killXp: '50d10', spawnHp: '5d10 + 25' },
      stats: { name: 'Selyk', race: 'Human', profession: 'Wizard',
        startingEquipment: [{ init: function init() {
            return (0, _constantsRandom.Wand)({ bucName: 'blessed', charges: '5d5' });
          } }],
        behaviors: [Behaviors.Bloodthirsty(), Behaviors.Attacks(), Behaviors.TeleportsWhenHit(), Behaviors.OpensDoors()],
        attacks: [_attacks_all2['default'].ElectricTouch({ roll: '1d1', toHit: '1d5' })]
      } };
  } };
exports.Selyk = Selyk;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../constants/random":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/random.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_summoned.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var Attacks = _interopRequireWildcard(_attacks_all);

var _constantsFactions = require('../../constants/factions');

var _constantsFactions2 = _interopRequireDefault(_constantsFactions);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var waterMoccasin = { difficulty: 7, spawnPattern: '1d1', frequency: 0, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Snake, fg: _constantsGlyphColors.Entities.Elements.Water },
      addAntiFactions: [_constantsFactions2['default'].ALL],
      attributes: { ac: -7, speed: 200, level: 4, killXp: '6d10', spawnHp: '2d4' },
      stats: { name: 'water moccasin', race: 'Snake',
        behaviors: [Behaviors.LeavesCorpse(10), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [Attacks.Poison({ roll: '1d6' })]
      } };
  } };

exports.waterMoccasin = waterMoccasin;
var waterDemon = { difficulty: 11, spawnPattern: '1d1', frequency: 0, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Demon, fg: _constantsGlyphColors.Entities.Elements.Water },
      attributes: { ac: -14, speed: 175, level: 8, killXp: '18d10', spawnHp: '5d10' },
      stats: { name: 'water demon', race: 'Demon',
        behaviors: [Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.DropsItems()]
      } };
  } };
exports.waterDemon = waterDemon;

},{"../../constants/factions":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/factions.js","../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/canines.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var jackal = { difficulty: 2, spawnPattern: '1d3 + 1', frequency: 25, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Canine, fg: _constantsGlyphColors.Entities.Tiers.Basic },
      startingEquipment: [{ probability: 20, init: function init() {
          return new Foods.Ration({ charges: '1d2' });
        } }],
      attributes: { ac: -3, speed: 125, level: 1, str: '1d4 + 2', dex: '2d3 + 4', con: 4, killXp: '2d3 + 3', spawnHp: '3d3 + 5' },
      stats: { name: 'jackal', race: 'Canine',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.DropsGold('1d10'), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.DropsItems()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d2 + 1', toHit: '1d2' })]
      } };
  } };

exports.jackal = jackal;
var fox = { difficulty: 1, spawnPattern: '1d3 + 1', frequency: 30, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Canine, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      attributes: { ac: -1, speed: 150, level: 1, str: '1d3', dex: '1d3 + 4', con: 4, killXp: '2d3 + 3', spawnHp: '1d3 + 5' },
      stats: { name: 'fox', race: 'Canine',
        behaviors: [Behaviors.LeavesCorpse(40), Behaviors.DropsGold('1d10'), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.DropsItems()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d2 + 1' })]
      } };
  } };
exports.fox = fox;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/elementals.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var waterElemental = { difficulty: 10, spawnPattern: '1d2 + 1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Elemental, fg: _constantsGlyphColors.Entities.Elements.Water },
      attributes: { ac: -8, speed: 50, level: 8, killXp: '13d10', spawnHp: '7d7' },
      stats: { name: 'water elemental', race: 'Elemental',
        behaviors: [Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Claw({ roll: '5d6' })]
      } };
  } };
exports.waterElemental = waterElemental;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/gnomes.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var gnome = { difficulty: 3, spawnPattern: '1d2', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Gnome, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      startingEquipment: [{ choices: { bow: 1, crossbow: 1, darts: 1 },
        choicesInit: {
          bow: function bow() {
            return [new Weapons.Bow(), new Projectiles.Arrow({ charges: '1d14 + 3' })];
          },
          crossbow: function crossbow() {
            return [new Weapons.Crossbow(), new Projectiles.Bolt({ charges: '1d14 + 3' })];
          },
          darts: function darts() {
            return new Projectiles.Dart({ charges: '1d14 + 3' });
          }
        }
      }],
      attributes: { speed: 50, level: 1, killXp: '2d10', spawnHp: '6d2' },
      stats: { name: 'gnome', race: 'Gnome',
        behaviors: [Behaviors.LeavesCorpse(75), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };
exports.gnome = gnome;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/insects.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var gridBug = { difficulty: 1, spawnPattern: '1d2', frequency: 40, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Mystical, fg: _constantsGlyphColors.Entities.Tiers.Basic },
      attributes: { ac: -1, speed: 150, level: 1, str: 5, dex: 3, con: 0, killXp: '4d1', spawnHp: '1d4 + 2' },
      stats: { name: 'grid bug', race: 'Insect',
        behaviors: [Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].ElectricTouch({ roll: '1d3 + 1' })]
      } };
  } };

exports.gridBug = gridBug;
var giantAnt = { difficulty: 4, spawnPattern: '1d4 + 2', frequency: 7, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Ant, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      attributes: { ac: -2, speed: 150, level: 3, str: '1d3 + 3', dex: '1d3 + 2', con: 4, killXp: '2d4 + 5', spawnHp: '1d8 + 5' },
      stats: { name: 'giant ant', race: 'Insect',
        behaviors: [Behaviors.LeavesCorpse(10), Behaviors.DropsGold('2d4'), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d4 + 1' })]
      } };
  } };

exports.giantAnt = giantAnt;
var killerBee = { difficulty: 12, spawnPattern: '3d4', frequency: 2, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Ant, fg: _constantsGlyphColors.Entities.Tiers.Inadequate },
      attributes: { ac: -11, speed: 150, level: 7, killXp: '7d4 + 5', spawnHp: '3d4' },
      stats: { name: 'killer bee', race: 'Insect',
        behaviors: [Behaviors.LeavesCorpse(1), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Poison({ roll: '1d3', percent: 33 })]
      } };
  } };

exports.killerBee = killerBee;
var soldierAnt = { difficulty: 13, spawnPattern: '2d4 + 3', frequency: 2, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Ant, fg: _constantsGlyphColors.Entities.Tiers.Inadequate },
      attributes: { ac: -7, speed: 150, level: 6, killXp: '10d4', spawnHp: '4d4' },
      stats: { name: 'soldier ant', race: 'Insect',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '2d4' }), _attacks_all2['default'].Poison({ roll: '3d4', percent: 33 })]
      } };
  } };

exports.soldierAnt = soldierAnt;
var fireAnt = { difficulty: 11, spawnPattern: '2d4 + 3', frequency: 2, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Ant, fg: _constantsGlyphColors.Entities.Elements.Fire },
      attributes: { ac: -7, speed: 150, level: 5, killXp: '10d4', spawnHp: '3d6' },
      stats: { name: 'fire ant', race: 'Insect',
        behaviors: [Behaviors.LeavesCorpse(1), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '2d4' }), _attacks_all2['default'].Bite({ roll: '2d4', element: 'Fire' })]
      } };
  } };

exports.fireAnt = fireAnt;
var giantBeetle = { difficulty: 7, spawnPattern: '1d3', frequency: 5, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Ant, fg: _constantsGlyphColors.Entities.Elements.Fire },
      attributes: { ac: -6, speed: 50, level: 5, killXp: '10d4', spawnHp: '3d6' },
      stats: { name: 'giant beetle', race: 'Insect',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '3d6' })]
      } };
  } };
exports.giantBeetle = giantBeetle;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/jellies.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var blueJelly = { difficulty: 9, spawnPattern: '1d1', frequency: 2, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Jelly, fg: _constantsGlyphColors.Entities.Colors.Blue },
      attributes: { ac: -6, speed: 50, level: 4, killXp: '10d5', spawnHp: '5d5' },
      stats: { name: 'blue jelly', race: 'Jelly',
        behaviors: [Behaviors.Attacks(), Behaviors.KillsSelfAfterPeriodOfTime()],
        attacks: [_attacks_all2['default'].Bite({ roll: '4d6', element: 'Ice' })]
      } };
  } };
exports.blueJelly = blueJelly;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/kobolds.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var Attacks = _interopRequireWildcard(_attacks_all);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsSpellbooks = require('../items/spellbooks');

var Spellbooks = _interopRequireWildcard(_itemsSpellbooks);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var koboldStartingEquipment = [{ choices: { dagger: 2, spear: 1, shortsword: 1 },
  choicesInit: {
    dagger: function dagger() {
      return new Weapons.OrcishDagger();
    },
    spear: function spear() {
      return new Weapons.OrcishSpear();
    },
    shortsword: function shortsword() {
      return new Weapons.OrcishShortSword();
    }
  }
}, { probability: 25, init: function init() {
    return new Projectiles.Dart({ charges: '1d14 + 3' });
  } }];

var kobold = { difficulty: 1, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Kobold, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      startingEquipment: koboldStartingEquipment,
      attributes: { speed: 50, level: 1, killXp: '1d10', spawnHp: '3d2' },
      stats: { name: 'kobold', race: 'Kobold',
        behaviors: [Behaviors.LeavesCorpse(55), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };

exports.kobold = kobold;
var largeKobold = { difficulty: 2, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Kobold, fg: _constantsGlyphColors.Entities.Tiers.Inadequate },
      startingEquipment: koboldStartingEquipment,
      attributes: { speed: 50, level: 2, killXp: '2d10', spawnHp: '6d2' },
      stats: { name: 'large kobold', race: 'Kobold',
        behaviors: [Behaviors.LeavesCorpse(55), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };

exports.largeKobold = largeKobold;
var koboldLord = { difficulty: 3, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Kobold, fg: _constantsGlyphColors.Entities.Tiers.Moderate },
      startingEquipment: koboldStartingEquipment,
      attributes: { speed: 50, level: 3, killXp: '3d10', spawnHp: '12d2' },
      stats: { name: 'kobold lord', race: 'Kobold',
        behaviors: [Behaviors.LeavesCorpse(45), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [Attacks.Bite({ roll: '1d4' })]
      } };
  } };

exports.koboldLord = koboldLord;
var koboldShaman = { difficulty: 2, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Kobold, fg: _constantsGlyphColors.Entities.Colors.Blue },
      startingEquipment: [{ init: function init() {
          return new Spellbooks.CureSelf();
        } }, { init: function init() {
          return new Spellbooks.ForceBolt();
        } }],
      attributes: { speed: 50, level: 2, ac: -4, int: 5, mp: '3d4', killXp: '3d10', spawnHp: '12d3' },
      stats: { name: 'kobold shaman', race: 'Kobold',
        behaviors: [Behaviors.LeavesCorpse(35), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };
exports.koboldShaman = koboldShaman;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../items/spellbooks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/lizards.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var newt = { difficulty: 1, spawnPattern: '1d1', frequency: 50, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Yellow },
      attributes: { ac: -2, speed: 50, level: 1, killXp: '1d1', spawnHp: '1d4' },
      stats: { name: 'newt', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(25), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d2' })]
      } };
  } };

exports.newt = newt;
var gecko = { difficulty: 2, spawnPattern: '1d1', frequency: 35, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Green },
      attributes: { ac: -2, speed: 50, level: 2, killXp: '1d8', spawnHp: '2d4' },
      stats: { name: 'gecko', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(25), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d3' })]
      } };
  } };

exports.gecko = gecko;
var iguana = { difficulty: 3, spawnPattern: '1d1', frequency: 25, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Brown },
      attributes: { ac: -3, speed: 50, level: 3, killXp: '3d8', spawnHp: '4d4' },
      stats: { name: 'iguana', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(25), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d4' })]
      } };
  } };

exports.iguana = iguana;
var babyCrocodile = { difficulty: 3, spawnPattern: '1d2', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Brown },
      attributes: { ac: -3, speed: 25, level: 3, killXp: '3d8', spawnHp: '3d7' },
      stats: { name: 'baby crocodile', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(25), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d4' })]
      } };
  } };

exports.babyCrocodile = babyCrocodile;
var crocodile = { difficulty: 7, spawnPattern: '1d1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Brown },
      attributes: { ac: -5, speed: 50, level: 6, killXp: '7d12', spawnHp: '4d10' },
      stats: { name: 'crocodile', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(25), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '4d2' }), _attacks_all2['default'].Claw({ roll: '1d12' })]
      } };
  } };

exports.crocodile = crocodile;
var chameleon = { difficulty: 7, spawnPattern: '1d1', frequency: 5, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Brown },
      attributes: { ac: -5, speed: 75, level: 6, killXp: '7d12', spawnHp: '3d10' },
      stats: { name: 'chameleon', race: 'Lizard',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '4d2' })]
      } };
  } };

exports.chameleon = chameleon;
var salamander = { difficulty: 17, spawnPattern: '1d1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Lizard, fg: _constantsGlyphColors.Entities.Colors.Red },
      addFactions: ['Lizard'],
      startingEquipment: [{ choices: { spear: 18, trident: 2, stiletto: 1 },
        choicesInit: {
          spear: function spear() {
            return new Weapons.Spear();
          },
          trident: function trident() {
            return new Weapons.Trident();
          },
          stiletto: function stiletto() {
            return new Projectiles.Stiletto();
          }
        }
      }],
      attributes: { ac: -11, speed: 100, level: 10, killXp: '20d10', spawnHp: '4d20' },
      stats: { name: 'salamander', race: 'Lizardman',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        traits: [Traits.FireResistance()],
        attacks: [_attacks_all2['default'].Bearhug({ roll: '2d6' }), _attacks_all2['default'].Bearhug({ roll: '3d6', element: 'Fire' }), _attacks_all2['default'].Touch({ roll: '1d6', element: 'Fire' })]
      } };
  } };
exports.salamander = salamander;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/nymphs.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var waterNymph = { difficulty: 5, spawnPattern: '1d3 + 1', frequency: 0, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Nymph, fg: _constantsGlyphColors.Entities.Elements.Water },
      attributes: { ac: -1, speed: 100, level: 3, killXp: '7d7', spawnHp: '5d5 + 5' },
      stats: { name: 'water nymph', race: 'Elf',
        behaviors: [Behaviors.LeavesCorpse(15), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Steals(), Behaviors.Attacks(), Behaviors.DropsItems()],
        attacks: [_attacks_all2['default'].Claw({ roll: '1d2 + 1' }), _attacks_all2['default'].SeductiveTouch({ roll: '1d2', chance: 20 })]
      } };
  } };

exports.waterNymph = waterNymph;
var forestNymph = { difficulty: 5, spawnPattern: '1d1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Nymph, fg: _constantsGlyphColors.Entities.Colors.Green },
      attributes: { ac: -1, speed: 100, level: 3, killXp: '7d7', spawnHp: '5d5 + 5' },
      stats: { name: 'forest nymph', race: 'Elf',
        behaviors: [Behaviors.LeavesCorpse(15), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Steals(), Behaviors.Attacks(), Behaviors.DropsItems()],
        attacks: [_attacks_all2['default'].Claw({ roll: '1d3 + 1' }), _attacks_all2['default'].SeductiveTouch({ roll: '1d3', chance: 30 })]
      } };
  } };

exports.forestNymph = forestNymph;
var mountainNymph = { difficulty: 25, spawnPattern: '1d1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Nymph, fg: _constantsGlyphColors.Entities.Colors.Brown },
      attributes: { ac: -8, speed: 150, level: 3, killXp: '20d7', spawnHp: '20d5' },
      stats: { name: 'mountain nymph', race: 'Elf',
        behaviors: [Behaviors.LeavesCorpse(15), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Steals(), Behaviors.Attacks(), Behaviors.DropsItems()],
        attacks: [_attacks_all2['default'].Claw({ roll: '2d4' }), _attacks_all2['default'].SeductiveTouch({ roll: '2d3', chance: 40 })]
      } };
  } };
exports.mountainNymph = mountainNymph;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/orcs.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsHeads = require('../items/heads');

var Heads = _interopRequireWildcard(_itemsHeads);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var goblin = { difficulty: 1, spawnPattern: '1d1', frequency: 6, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Orc, fg: _constantsGlyphColors.Entities.Tiers.Basic },
      startingEquipment: [{ probability: 50, init: function init() {
          return new Weapons.OrcishDagger();
        } }, { probability: 50, init: function init() {
          return new Heads.OrcishHelm();
        } }],
      attributes: { speed: 75, level: 1, killXp: '1d15', spawnHp: '6d2' },
      stats: { name: 'goblin', race: 'Orc',
        behaviors: [Behaviors.LeavesCorpse(75), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };

exports.goblin = goblin;
var hobgoblin = { difficulty: 3, spawnPattern: '1d1', frequency: 6, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Orc, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      startingEquipment: [{ choices: { dagger: 1, shortsword: 1 },
        choicesInit: {
          dagger: function dagger() {
            return new Weapons.OrcishDagger();
          },
          shortsword: function shortsword() {
            return new Weapons.OrcishShortSword();
          }
        }
      }, { probability: 50, init: function init() {
          return new Heads.OrcishHelm();
        } }],
      attributes: { speed: 75, level: 1, killXp: '1d15', spawnHp: '6d2' },
      stats: { name: 'hobgoblin', race: 'Orc',
        behaviors: [Behaviors.LeavesCorpse(75), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };

exports.hobgoblin = hobgoblin;
var orc = { difficulty: 3, spawnPattern: '1d1', frequency: 0, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Orc, fg: _constantsGlyphColors.Entities.Tiers.Inadequate },
      startingEquipment: [{ choices: { sword: 1, bow: 1 },
        choicesInit: {
          sword: function sword() {
            return new Weapons.Scimitar();
          },
          bow: function bow() {
            return [new Weapons.OrcishBow(), new Projectiles.OrcishArrow({ charges: '1d14 + 3' })];
          }
        }
      }, { probability: 50, init: function init() {
          return new Heads.OrcishHelm();
        } }, { probability: 50, init: function init() {
          return new Bodys.OrcishRingMail();
        } }],
      attributes: { speed: 75, level: 1, killXp: '1d15', spawnHp: '6d2' },
      stats: { name: 'orc', race: 'Orc',
        behaviors: [Behaviors.LeavesCorpse(75), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()]
      } };
  } };
exports.orc = orc;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/puddings.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var blackPudding = { difficulty: 12, spawnPattern: '1d1', frequency: 1, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Pudding, fg: _constantsGlyphColors.Entities.Colors.Black },
      attributes: { ac: -4, speed: 30, level: 10, killXp: '20d10', spawnHp: '5d5' },
      stats: { name: 'black pudding', race: 'Pudding',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SplitsWhenHit(), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Claw({ roll: '3d8' })]
      } };
  } };
exports.blackPudding = blackPudding;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/rats.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var _attacks_all2 = _interopRequireDefault(_attacks_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var sewerRat = { difficulty: 1, spawnPattern: '1d2 + 1', frequency: 45, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Rat, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      attributes: { ac: -3, speed: 100, level: 1, killXp: '1d4', spawnHp: '1d2' },
      stats: { name: 'sewer rat', race: 'Rat',
        behaviors: [Behaviors.LeavesCorpse(5), Behaviors.SeeksTargetViaHearing(), Behaviors.SeeksTargetInSight(), Behaviors.Attacks()],
        attacks: [_attacks_all2['default'].Bite({ roll: '1d3' })]
      } };
  } };
exports.sewerRat = sewerRat;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/spores.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var _attacks_all = require('../attacks/_all');

var Attacks = _interopRequireWildcard(_attacks_all);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var gasSpore = { difficulty: 2, spawnPattern: '1d1', frequency: 15, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Spore, fg: _constantsGlyphColors.Entities.Tiers.Basic },
      attributes: { ac: 0, speed: 25, level: 2, killXp: '12d1', spawnHp: '2d4' },
      stats: { name: 'gas spore', race: 'Spore',
        behaviors: [Behaviors.Explodes('4d8', 3), Behaviors.Wanders()]
      } };
  } };

exports.gasSpore = gasSpore;
var floatingEye = { difficulty: 3, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Spore, fg: _constantsGlyphColors.Entities.Tiers.Weak },
      attributes: { ac: -1, speed: 10, level: 2, killXp: '2d10', spawnHp: '1d5' },
      stats: { name: 'floating eye', race: 'Spore',
        behaviors: [Behaviors.ParalyzesWhenHit(50), Behaviors.Wanders()]
      } };
  } };

exports.floatingEye = floatingEye;
var electricSphere = { difficulty: 8, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Spore, fg: _constantsGlyphColors.Entities.Elements.Shock },
      attributes: { ac: -6, speed: 110, level: 6, killXp: '15d10', spawnHp: '5d4' },
      stats: { name: 'shocking sphere', race: 'Spore',
        behaviors: [Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.EmitsLight(_constantsGlyphColors.Entities.Elements.Shock)],
        traits: [Traits.ShockResistance()],
        attacks: [Attacks.Explode({ roll: '4d6', element: 'Shock' })]
      } };
  } };

exports.electricSphere = electricSphere;
var fireSphere = { difficulty: 8, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Spore, fg: _constantsGlyphColors.Entities.Elements.Fire },
      attributes: { ac: -6, speed: 110, level: 6, killXp: '15d10', spawnHp: '5d4' },
      stats: { name: 'burning sphere', race: 'Spore',
        behaviors: [Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.EmitsLight(_constantsGlyphColors.Entities.Elements.Fire)],
        traits: [Traits.FireResistance()],
        attacks: [Attacks.Explode({ roll: '4d6', element: 'Fire' })]
      } };
  } };

exports.fireSphere = fireSphere;
var iceSphere = { difficulty: 8, spawnPattern: '1d1', frequency: 3, init: function init() {
    return { glyph: { key: _constantsGlyphs.Entities.Spore, fg: _constantsGlyphColors.Entities.Elements.Ice },
      attributes: { ac: -6, speed: 110, level: 6, killXp: '15d10', spawnHp: '5d4' },
      stats: { name: 'freezing sphere', race: 'Spore',
        behaviors: [Behaviors.SeeksTargetInSight(), Behaviors.Attacks(), Behaviors.EmitsLight(_constantsGlyphColors.Entities.Elements.Ice)],
        traits: [Traits.IceResistance()],
        attacks: [Attacks.Explode({ roll: '4d6', element: 'Ice' })]
      } };
  } };
exports.iceSphere = iceSphere;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _archaeologist = require('./archaeologist');

var _archaeologist2 = _interopRequireDefault(_archaeologist);

var _barbarian = require('./barbarian');

var _barbarian2 = _interopRequireDefault(_barbarian);

var _caveman = require('./caveman');

var _caveman2 = _interopRequireDefault(_caveman);

var _developer = require('./developer');

var _developer2 = _interopRequireDefault(_developer);

var _healer = require('./healer');

var _healer2 = _interopRequireDefault(_healer);

var _knight = require('./knight');

var _knight2 = _interopRequireDefault(_knight);

var _monk = require('./monk');

var _monk2 = _interopRequireDefault(_monk);

var _monster = require('./monster');

var _monster2 = _interopRequireDefault(_monster);

var _priest = require('./priest');

var _priest2 = _interopRequireDefault(_priest);

var _ranger = require('./ranger');

var _ranger2 = _interopRequireDefault(_ranger);

var _rogue = require('./rogue');

var _rogue2 = _interopRequireDefault(_rogue);

var _tourist = require('./tourist');

var _tourist2 = _interopRequireDefault(_tourist);

var _valkyrie = require('./valkyrie');

var _valkyrie2 = _interopRequireDefault(_valkyrie);

var _wizard = require('./wizard');

var _wizard2 = _interopRequireDefault(_wizard);

exports['default'] = {
  Archaeologist: _archaeologist2['default'], Barbarian: _barbarian2['default'], Caveman: _caveman2['default'], Developer: _developer2['default'], Healer: _healer2['default'], Knight: _knight2['default'],
  Monk: _monk2['default'], Monster: _monster2['default'], Priest: _priest2['default'], Ranger: _ranger2['default'], Rogue: _rogue2['default'], Tourist: _tourist2['default'], Valkyrie: _valkyrie2['default'], Wizard: _wizard2['default']
};
module.exports = exports['default'];

},{"./archaeologist":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/archaeologist.js","./barbarian":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/barbarian.js","./caveman":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/caveman.js","./developer":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/developer.js","./healer":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/healer.js","./knight":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/knight.js","./monk":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/monk.js","./monster":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/monster.js","./priest":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/priest.js","./ranger":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/ranger.js","./rogue":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/rogue.js","./tourist":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/tourist.js","./valkyrie":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/valkyrie.js","./wizard":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/wizard.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/archaeologist.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _itemsHeads = require('../items/heads');

var Heads = _interopRequireWildcard(_itemsHeads);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var archaeologistConfig = {
  hp: '6d3',
  mp: '0d0',
  str: '2d2',
  con: '1d4',
  int: '1d2',
  dex: '3d3',
  wis: '1d2',
  cha: '1d1',
  titles: ['Digger',, 'Field Worker',,, 'Investigator',,, 'Exhumer',,, 'Excavator',,, 'Spelunker',,, 'Speleologist',,, 'Collector',,, 'Curator'],
  traits: [Traits.Stealth({ level: 10 }), Traits.Haste({ level: 2 })],
  skillCaps: { bash: Thresholds.Skilled, stab: Thresholds.Basic, slash: Thresholds.Skilled, unarmed: Thresholds.Expert },
  startingItems: [{ init: function init() {
      return new Weapons.Bullwhip({ bucName: 'uncursed', enchantment: 2 });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '3d2', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Bodys.LeatherJacket({ bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Heads.Fedora({ bucName: 'uncursed', startIdentified: true });
    } }]
};

var Archaeologist = (function (_Profession) {
  _inherits(Archaeologist, _Profession);

  function Archaeologist() {
    _classCallCheck(this, Archaeologist);

    _get(Object.getPrototypeOf(Archaeologist.prototype), 'constructor', this).call(this, archaeologistConfig);
  }

  return Archaeologist;
})(_definitionsProfession2['default']);

exports['default'] = Archaeologist;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/barbarian.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var barbarianConfig = {
  hp: '5d3',
  mp: '0d0',
  str: '4d3',
  con: '3d2',
  int: '1d1',
  dex: '2d2',
  wis: '1d1',
  cha: '1d1',
  titles: ['Plunderex',, 'Pillager',,, 'Bandit',,, 'Brigand',,, 'Raider',,, 'Reaver',,, 'Slayer',,, 'Chiefterex',,, 'Conquerex'],
  traits: [Traits.Stealth({ level: 15, req: 15 }), Traits.Haste({ level: 2, req: 7 }), Traits.PoisonResistance()],
  skillCaps: { bash: Thresholds.Skilled, stab: Thresholds.Skilled, ranged: Thresholds.Basic, shot: Thresholds.Basic, slash: Thresholds.Skilled, unarmed: Thresholds.Master },
  startingItems: [{ choices: { swordaxe: 1, axesword: 1 },
    choicesInit: {
      swordaxe: function swordaxe() {
        return [new Weapons.Broadsword({ bucName: 'uncursed' }), new Weapons.Axe({ bucName: 'uncursed' })];
      },
      axesword: function axesword() {
        return [new Weapons.BattleAxe({ bucName: 'uncursed' }), new Weapons.Shortsword({ bucName: 'uncursed' })];
      }
    }
  }, { init: function init() {
      return new Foods.Ration({ charges: '1d2', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Bodys.RingMail({ bucName: 'uncursed', startIdentified: true });
    } }]
};

var Barbarian = (function (_Profession) {
  _inherits(Barbarian, _Profession);

  function Barbarian() {
    _classCallCheck(this, Barbarian);

    _get(Object.getPrototypeOf(Barbarian.prototype), 'constructor', this).call(this, barbarianConfig);
  }

  return Barbarian;
})(_definitionsProfession2['default']);

exports['default'] = Barbarian;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/caveman.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var cavemanConfig = {
  hp: '4d4',
  mp: '0d0',
  str: '6d2',
  con: '1d2',
  int: '1d1',
  dex: '1d2',
  wis: '1d1',
  cha: '1d1',
  titles: ['Troglodyte',, 'Aborigine',,, 'Wanderer',,, 'Vagrant',,, 'Wayfarer',,, 'Roamer',,, 'Nomad',,, 'Rover',,, 'Pioneer'],
  traits: [Traits.Warning({ level: 15, req: 15 }), Traits.Haste({ level: 2, req: 7 })],
  skillCaps: { bash: Thresholds.Expert, stab: Thresholds.Basic, ranged: Thresholds.Basic, shot: Thresholds.Basic, unarmed: Thresholds.Master },
  startingItems: [{ init: function init() {
      return new Weapons.Club({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Weapons.Sling({ bucName: 'uncursed', enchantment: 2 });
    } }, { init: function init() {
      return new Projectiles.FlintStone({ charges: '1d12 + 10', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Projectiles.Rock({ charges: '1d15 + 18', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Bodys.StuddedLeatherArmor({ bucName: 'uncursed', startIdentified: true });
    } }]
};

var Caveman = (function (_Profession) {
  _inherits(Caveman, _Profession);

  function Caveman() {
    _classCallCheck(this, Caveman);

    _get(Object.getPrototypeOf(Caveman.prototype), 'constructor', this).call(this, cavemanConfig);
  }

  return Caveman;
})(_definitionsProfession2['default']);

exports['default'] = Caveman;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/developer.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _itemsHeads = require('../items/heads');

var Heads = _interopRequireWildcard(_itemsHeads);

var _itemsNecks = require('../items/necks');

var Necks = _interopRequireWildcard(_itemsNecks);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var devCfg = {
  hp: '1d1',
  mp: '9d5',
  str: '10d1',
  con: '1d1',
  int: '4d5',
  dex: '1d1',
  wis: '4d5',
  cha: '4d5',
  titles: ['Developer'],
  traits: [Traits.Infravision({ level: 3 }), Traits.Telepathy({ level: 65 }), Traits.Clairvoyance({ level: 3, req: 2 }), Traits.Stealth({ level: 40 })],
  skillCaps: { shot: Thresholds.Expert, stab: Thresholds.Skilled },
  startingItems: [{ init: function init() {
      return new Weapons.Bow({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Projectiles.Arrow({ charges: '1d1', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Heads.NightGoggles({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Necks.AmuletOfLifeSaving({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '1d3', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d1', bucName: 'uncursed', startIdentified: true });
    } }]
};

var Developer = (function (_Profession) {
  _inherits(Developer, _Profession);

  function Developer() {
    _classCallCheck(this, Developer);

    _get(Object.getPrototypeOf(Developer.prototype), 'constructor', this).call(this, devCfg);
  }

  return Developer;
})(_definitionsProfession2['default']);

exports['default'] = Developer;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../items/necks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/necks.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/healer.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _items_special = require('../items/_special');

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _itemsSpellbooks = require('../items/spellbooks');

var Spellbooks = _interopRequireWildcard(_itemsSpellbooks);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsWrists = require('../items/wrists');

var Wrists = _interopRequireWildcard(_itemsWrists);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var healerConfig = {
  hp: '2d5',
  mp: '3d3',
  str: '1d2',
  con: '1d2',
  int: '2d2',
  dex: '1d2',
  wis: '2d3',
  cha: '1d1',
  titles: ['Rhizotomist',, 'Empiric',,, 'Embalmer',,, 'Dresser',,, 'Medicus ossium',,, 'Herbalist',,, 'Magisterex',,, 'Physician',,, 'Chirurgeon'],
  traits: [Traits.Warning({ level: 15, req: 15 }), Traits.PoisonResistance()],
  skillCaps: { bash: Thresholds.Expert, stab: Thresholds.Skilled, ranged: Thresholds.Basic, slash: Thresholds.Basic, unarmed: Thresholds.Basic },
  startingItems: [{ init: function init() {
      return new _items_special.Gold((0, _libDiceRoller2['default'])('1d1000 + 1000'));
    } }, { init: function init() {
      return new Weapons.Scalpel({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Wrists.LeatherGloves({ enchantment: 2, bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Spellbooks.CureSelf({ bucName: 'blessed', startIdentified: true });
    } }, { init: function init() {
      return new Spellbooks.ExtraCureSelf({ bucName: 'blessed', startIdentified: true });
    } }, { init: function init() {
      return new Foods.Apple({ charges: '1d4 + 4', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '4d1', bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Potions.ExtraHealing({ charges: '4d1', bucName: 'uncursed', startIdentified: true });
    } }]
};

var Healer = (function (_Profession) {
  _inherits(Healer, _Profession);

  function Healer() {
    _classCallCheck(this, Healer);

    _get(Object.getPrototypeOf(Healer.prototype), 'constructor', this).call(this, healerConfig);
  }

  return Healer;
})(_definitionsProfession2['default']);

exports['default'] = Healer;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/spellbooks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js","../items/wrists":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/knight.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _itemsHeads = require('../items/heads');

var Heads = _interopRequireWildcard(_itemsHeads);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsWrists = require('../items/wrists');

var Wrists = _interopRequireWildcard(_itemsWrists);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var knightConfig = {
  hp: '2d7',
  mp: '0d0',
  str: '3d2',
  con: '3d2',
  int: '3d2',
  dex: '3d2',
  wis: '3d2',
  cha: '3d2',
  titles: ['Gallant',, 'Esquire',,, 'Bachelor',,, 'Sergeant',,, 'Knight',,, 'Banneret',,, 'Chevalierex',,, 'Seignieur',,, 'Paladin'],
  traits: [Traits.Haste({ level: 2, req: 7 })],
  skillCaps: { bash: Thresholds.Expert, stab: Thresholds.Basic, ranged: Thresholds.Basic, slash: Thresholds.Expert, unarmed: Thresholds.Expert, force: Thresholds.Basic },
  startingItems: [{ init: function init() {
      return new Weapons.Longsword({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Weapons.Spear({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Bodys.RingMail({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Wrists.LeatherGloves({ bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Heads.Helm({ bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Foods.Apple({ charges: '1d10 + 10', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Carrot({ charges: '1d10 + 10', bucName: 'uncursed' });
    } }]
};

var Knight = (function (_Profession) {
  _inherits(Knight, _Profession);

  function Knight() {
    _classCallCheck(this, Knight);

    _get(Object.getPrototypeOf(Knight.prototype), 'constructor', this).call(this, knightConfig);
  }

  return Knight;
})(_definitionsProfession2['default']);

exports['default'] = Knight;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../items/wrists":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/monk.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _itemsWrists = require('../items/wrists');

var Wrists = _interopRequireWildcard(_itemsWrists);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var monkConfig = {
  hp: '2d5',
  mp: '1d7',
  str: '4d2',
  con: '2d2',
  int: '1d2',
  dex: '4d2',
  wis: '1d2',
  cha: '1d1',
  titles: ['Candidate',, 'Novice',,, 'Initiate',,, 'Student of Stones',,, 'Student of Waters',,, 'Student of Metals',,, 'Student of Winds',,, 'Student of Fire',,, 'Master'],
  traits: [Traits.PoisonResistance({ req: 3 }), Traits.Stealth({ level: 15, req: 5 }), Traits.Warning({ level: 10, req: 7 }), Traits.Haste({ level: 4, req: 9 }), Traits.FireResistance({ req: 11 }), Traits.IceResistance({ req: 13 }), Traits.ShockResistance({ req: 15 }), Traits.Infravision({ level: 3, req: 17 }), Traits.Protection({ level: 1, req: 19 })],
  skillCaps: { bash: Thresholds.Basic, unarmed: Thresholds.Grandmaster, force: Thresholds.Basic },
  startingItems: [{ init: function init() {
      return new Bodys.Robe({ bucName: 'uncursed', enchantment: 2 });
    } }, { init: function init() {
      return new Wrists.LeatherGloves({ bucName: 'uncursed', enchantment: 2, startIdentified: true });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d1', bucName: 'uncursed', startIdentified: true });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '1d3 + 3', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Apple({ charges: '1d5 + 5', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Carrot({ charges: '1d5 + 5', bucName: 'uncursed' });
    } }]
};

var Monk = (function (_Profession) {
  _inherits(Monk, _Profession);

  function Monk() {
    _classCallCheck(this, Monk);

    _get(Object.getPrototypeOf(Monk.prototype), 'constructor', this).call(this, monkConfig);
  }

  return Monk;
})(_definitionsProfession2['default']);

exports['default'] = Monk;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/wrists":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/monster.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var monsterCfg = {
  hp: '1d1',
  str: '1d1',
  con: '1d1',
  int: '1d1',
  dex: '1d1',
  wis: '1d1',
  cha: '1d1',
  titles: ['Monster'],
  traits: [Traits.Infravision({ level: 7 })]
};

var Monster = (function (_Profession) {
  _inherits(Monster, _Profession);

  function Monster() {
    _classCallCheck(this, Monster);

    _get(Object.getPrototypeOf(Monster.prototype), 'constructor', this).call(this, monsterCfg);
  }

  return Monster;
})(_definitionsProfession2['default']);

exports['default'] = Monster;
module.exports = exports['default'];

},{"../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/priest.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var priestConfig = {
  hp: '1d5',
  mp: '3d5',
  str: '1d2',
  con: '1d2',
  int: '2d2',
  dex: '1d2',
  wis: '3d2',
  cha: '1d2',
  titles: ['Aspirant',, 'Acolyte',,, 'Adept',,, 'Priest',,, 'Curate',,, 'Canon',,, 'Lama',,, 'Patriarch',,, 'High Priest'],
  traits: [Traits.Warning({ level: 15, req: 15 }), Traits.FireResistance({ req: 20 })],
  skillCaps: { bash: Thresholds.Expert, unarmed: Thresholds.Basic, stab: Thresholds.Skilled, ranged: Thresholds.Basic, smash: Thresholds.Skilled, thrust: Thresholds.Skilled },
  startingItems: [{ init: function init() {
      return new Weapons.Mace({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Bodys.Robe({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d1', bucName: 'uncursed', startIdentified: true });
    } }]
};

var Priest = (function (_Profession) {
  _inherits(Priest, _Profession);

  function Priest() {
    _classCallCheck(this, Priest);

    _get(Object.getPrototypeOf(Priest.prototype), 'constructor', this).call(this, priestConfig);
  }

  return Priest;
})(_definitionsProfession2['default']);

exports['default'] = Priest;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/ranger.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var rangerCfg = {
  hp: '3d4',
  mp: '0d0',
  str: '2d3',
  con: '1d5',
  int: '1d3',
  dex: '2d5',
  wis: '0d0',
  cha: '1d1',
  titles: ['Tenderfoot',, 'Lookout',,, 'Trailblazer',,, 'Reconnoiterex',,, 'Scout',,, 'Arbalester',,, 'Archer',,, 'Sharpshooter',,, 'Marksrex'],
  skillCaps: { ranged: Thresholds.Expert, shot: Thresholds.Expert, stab: Thresholds.Skilled },
  startingItems: [{ choices: { less: 5, more: 1 },
    choicesInit: {
      less: function less() {
        return new Projectiles.Arrow({ charges: '1d10 + 5', bucName: 'uncursed' });
      },
      more: function more() {
        return new Projectiles.Arrow({ charges: '2d10 + 10', bucName: 'uncursed' });
      }
    }
  }, { init: function init() {
      return new Weapons.Bow({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '1d3', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d2', bucName: 'uncursed', startIdentified: true });
    } }]
};

var Ranger = (function (_Profession) {
  _inherits(Ranger, _Profession);

  function Ranger() {
    _classCallCheck(this, Ranger);

    _get(Object.getPrototypeOf(Ranger.prototype), 'constructor', this).call(this, rangerCfg);
  }

  return Ranger;
})(_definitionsProfession2['default']);

exports['default'] = Ranger;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/rogue.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsBodys = require('../items/bodys');

var Bodys = _interopRequireWildcard(_itemsBodys);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var rogueConfig = {
  hp: '2d6',
  mp: '0d0',
  str: '3d3',
  con: '1d4',
  int: '1d2',
  dex: '2d5',
  wis: '1d2',
  cha: '1d2',
  titles: ['Footpad',, 'Cutpurse',,, 'Rogue',,, 'Pilferer',,, 'Robber',,, 'Burglar',,, 'Filcher',,, 'Magsrex',,, 'Thief'],
  traits: [Traits.Stealth({ level: 20 })],
  skillCaps: { bash: Thresholds.Expert, stab: Thresholds.Basic, ranged: Thresholds.Basic, slash: Thresholds.Expert, unarmed: Thresholds.Expert, force: Thresholds.Basic },
  startingItems: [{ init: function init() {
      return new Weapons.Shortsword({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Projectiles.Stiletto({ charges: '1d10 + 5', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Weapons.Spear({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Bodys.LeatherJacket({ bucName: 'uncursed', enchantment: 1 });
    } }]
};

var Rogue = (function (_Profession) {
  _inherits(Rogue, _Profession);

  function Rogue() {
    _classCallCheck(this, Rogue);

    _get(Object.getPrototypeOf(Rogue.prototype), 'constructor', this).call(this, rogueConfig);
  }

  return Rogue;
})(_definitionsProfession2['default']);

exports['default'] = Rogue;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/tourist.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _libDiceRoller = require('../../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _items_special = require('../items/_special');

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _itemsProjectiles = require('../items/projectiles');

var Projectiles = _interopRequireWildcard(_itemsProjectiles);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var touristCfg = {
  hp: '1d5',
  mp: '1d2 + 1',
  str: '1d3',
  con: '1d2',
  int: '1d3',
  dex: '1d2',
  wis: '1d2',
  cha: '1d3 + 1',
  luk: '1d3',
  titles: ['Rambler',, 'Sightseer',,, 'Excursionist',,, 'Perigrinator',,, 'Traveler',,, 'Journeyer',,, 'Voyager',,, 'Explorer',,, 'Adventurer'],
  skillCaps: { bash: Thresholds.Competent, slash: Thresholds.Competent, smash: Thresholds.Competent, stab: Thresholds.Competent, thrust: Thresholds.Competent, unarmed: Thresholds.Competent },
  startingItems: [{ init: function init() {
      return new _items_special.Gold((0, _libDiceRoller2['default'])('1d1000'));
    } }, { choices: { less: 5, more: 1 },
    choicesInit: {
      less: function less() {
        return new Projectiles.Dart({ charges: '1d5 + 5', bucName: 'uncursed' });
      },
      more: function more() {
        return new Projectiles.Dart({ charges: '5d10 + 10', bucName: 'uncursed' });
      }
    }
  }, { init: function init() {
      return new Foods.Ration({ charges: '1d5 + 5', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d3 + 1', bucName: 'blessed', startIdentified: true });
    } }]
};

var Tourist = (function (_Profession) {
  _inherits(Tourist, _Profession);

  function Tourist() {
    _classCallCheck(this, Tourist);

    _get(Object.getPrototypeOf(Tourist.prototype), 'constructor', this).call(this, touristCfg);
  }

  return Tourist;
})(_definitionsProfession2['default']);

exports['default'] = Tourist;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/valkyrie.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var valkyrieConfig = {
  hp: '2d5',
  mp: '0d0',
  str: '2d3',
  con: '1d5',
  int: '1d3',
  dex: '3d2',
  wis: '1d2',
  cha: '1d2',
  titles: ['Stripling',, 'Skirmisher',,, 'Fighter',,, 'Man-at-arms',,, 'Warrior',,, 'Swashbuckler',,, 'Hero',,, 'Champion',,, 'Lord'],
  traits: [Traits.IceResistance(), Traits.Stealth({ level: 10 }), Traits.Haste({ level: 3, req: 7 })],
  skillCaps: { bash: Thresholds.Expert, stab: Thresholds.Skilled, ranged: Thresholds.Expert, smash: Thresholds.Expert, thrust: Thresholds.Expert, slash: Thresholds.Expert, unarmed: Thresholds.Expert },
  startingItems: [{ init: function init() {
      return new Weapons.Spear({ bucName: 'uncursed', enchantment: 3 });
    } }, { init: function init() {
      return new Weapons.Dagger({ bucName: 'uncursed', enchantment: 1 });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '1d3', bucName: 'uncursed' });
    } }]
};

var Valkyrie = (function (_Profession) {
  _inherits(Valkyrie, _Profession);

  function Valkyrie() {
    _classCallCheck(this, Valkyrie);

    _get(Object.getPrototypeOf(Valkyrie.prototype), 'constructor', this).call(this, valkyrieConfig);
  }

  return Valkyrie;
})(_definitionsProfession2['default']);

exports['default'] = Valkyrie;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/wizard.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsProfession = require('../../definitions/profession');

var _definitionsProfession2 = _interopRequireDefault(_definitionsProfession);

var _constantsFactions = require('../../constants/factions');

var _constantsFactions2 = _interopRequireDefault(_constantsFactions);

var _itemsFoods = require('../items/foods');

var Foods = _interopRequireWildcard(_itemsFoods);

var _items_weapons = require('../items/_weapons');

var Weapons = _interopRequireWildcard(_items_weapons);

var _itemsPotions = require('../items/potions');

var Potions = _interopRequireWildcard(_itemsPotions);

var _itemsSpellbooks = require('../items/spellbooks');

var Spellbooks = _interopRequireWildcard(_itemsSpellbooks);

var _constantsRandom = require('../../constants/random');

var Random = _interopRequireWildcard(_constantsRandom);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var wizardCfg = {
  hp: '1d2 + 1',
  mp: '1d5 + 5',
  str: '1d2',
  con: '1d2',
  int: '2d3 + 1',
  dex: '1d2 - 1',
  wis: '1d2',
  cha: '1d3 - 1',
  regenHp: 20,
  regenMp: -3,
  titles: ['Evoker',, 'Conjurer',,, 'Thaumaturge',,, 'Magician',,, 'Enchantrex',,, 'Sorcerex',,, 'Necromancer',,, 'Wizard',,, 'Mage'],
  skillCaps: { bash: Thresholds.Skilled, stab: Thresholds.Skilled, force: Thresholds.Expert },
  addFactions: [_constantsFactions2['default'].MAGIC],
  startingItems: [{ init: function init() {
      return Random.Ring({ bucName: 'uncursed' });
    } }, { init: function init() {
      return Random.Wand({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Spellbooks.ForceBolt({ bucName: 'blessed' });
    } }, { init: function init() {
      return new Weapons.Quarterstaff({ bucName: 'uncursed' });
    } }, { init: function init() {
      return new Foods.Ration({ charges: '1d2', bucName: 'uncursed' });
    } }, { init: function init() {
      return new Potions.Healing({ charges: '1d2', bucName: 'uncursed' });
    } }]
};

var Wizard = (function (_Profession) {
  _inherits(Wizard, _Profession);

  function Wizard() {
    _classCallCheck(this, Wizard);

    _get(Object.getPrototypeOf(Wizard.prototype), 'constructor', this).call(this, wizardCfg);
  }

  return Wizard;
})(_definitionsProfession2['default']);

exports['default'] = Wizard;
module.exports = exports['default'];

},{"../../constants/factions":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/factions.js","../../constants/random":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/random.js","../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../../definitions/profession":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js","../items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../items/spellbooks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _canine = require('./canine');

var _canine2 = _interopRequireDefault(_canine);

var _demon = require('./demon');

var _demon2 = _interopRequireDefault(_demon);

var _elemental = require('./elemental');

var _elemental2 = _interopRequireDefault(_elemental);

var _elf = require('./elf');

var _elf2 = _interopRequireDefault(_elf);

var _gnome = require('./gnome');

var _gnome2 = _interopRequireDefault(_gnome);

var _human = require('./human');

var _human2 = _interopRequireDefault(_human);

var _insect = require('./insect');

var _insect2 = _interopRequireDefault(_insect);

var _jelly = require('./jelly');

var _jelly2 = _interopRequireDefault(_jelly);

var _kobold = require('./kobold');

var _kobold2 = _interopRequireDefault(_kobold);

var _manticore = require('./manticore');

var _manticore2 = _interopRequireDefault(_manticore);

var _orc = require('./orc');

var _orc2 = _interopRequireDefault(_orc);

var _psionic = require('./psionic');

var _psionic2 = _interopRequireDefault(_psionic);

var _pudding = require('./pudding');

var _pudding2 = _interopRequireDefault(_pudding);

var _rat = require('./rat');

var _rat2 = _interopRequireDefault(_rat);

var _lizard = require('./lizard');

var _lizard2 = _interopRequireDefault(_lizard);

var _lizardman = require('./lizardman');

var _lizardman2 = _interopRequireDefault(_lizardman);

var _snake = require('./snake');

var _snake2 = _interopRequireDefault(_snake);

var _spider = require('./spider');

var _spider2 = _interopRequireDefault(_spider);

var _spore = require('./spore');

var _spore2 = _interopRequireDefault(_spore);

exports['default'] = { Canine: _canine2['default'], Demon: _demon2['default'], Elemental: _elemental2['default'], Elf: _elf2['default'], Gnome: _gnome2['default'],
  Human: _human2['default'], Insect: _insect2['default'], Jelly: _jelly2['default'], Kobold: _kobold2['default'], Lizard: _lizard2['default'], Lizardman: _lizardman2['default'], Manticore: _manticore2['default'], Orc: _orc2['default'], Pudding: _pudding2['default'], Psionic: _psionic2['default'], Rat: _rat2['default'],
  Snake: _snake2['default'], Spider: _spider2['default'], Spore: _spore2['default'] };
module.exports = exports['default'];

},{"./canine":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/canine.js","./demon":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/demon.js","./elemental":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/elemental.js","./elf":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/elf.js","./gnome":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/gnome.js","./human":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/human.js","./insect":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/insect.js","./jelly":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/jelly.js","./kobold":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/kobold.js","./lizard":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/lizard.js","./lizardman":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/lizardman.js","./manticore":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/manticore.js","./orc":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/orc.js","./psionic":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/psionic.js","./pudding":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/pudding.js","./rat":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/rat.js","./snake":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/snake.js","./spider":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/spider.js","./spore":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/spore.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var _behaviors_all = require('../behaviors/_all');

var Behaviors = _interopRequireWildcard(_behaviors_all);

var Humanoid = (function (_Race) {
  _inherits(Humanoid, _Race);

  function Humanoid(opts) {
    _classCallCheck(this, Humanoid);

    opts.stats = opts.stats || {};
    opts.stats.addBehaviors = [Behaviors.Interacts(), Behaviors.PickUpItems(), Behaviors.DropsItems()];
    _get(Object.getPrototypeOf(Humanoid.prototype), 'constructor', this).call(this, opts);
  }

  return Humanoid;
})(_definitionsRace2['default']);

exports['default'] = Humanoid;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js","../behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/canine.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { stats: { dex: 2, str: 2, con: 1, int: -1, wis: -1 } };

var Canine = (function (_Race) {
  _inherits(Canine, _Race);

  function Canine() {
    _classCallCheck(this, Canine);

    _get(Object.getPrototypeOf(Canine.prototype), 'constructor', this).call(this, opts);
  }

  return Canine;
})(_definitionsRace2['default']);

exports['default'] = Canine;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/demon.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var _attacks_all = require('../attacks/_all');

var Attacks = _interopRequireWildcard(_attacks_all);

var attackProps = {
  roll: '1d3',
  spawnChance: 1,
  spawn: {
    waterDemon: 100
  }
};

var opts = { stats: {
    str: -2, con: -2, dex: -2, int: -2, wis: -2, cha: -2, luk: -2,
    traits: [Traits.PoisonResistance(), Traits.Infravision({ level: 10 }), Traits.Protection({ level: 1 })],
    attacks: [Attacks.Unarmed(attackProps), Attacks.Bite(attackProps), Attacks.Claw(attackProps)]
  } };

var Demon = (function (_Humanoid) {
  _inherits(Demon, _Humanoid);

  function Demon() {
    _classCallCheck(this, Demon);

    _get(Object.getPrototypeOf(Demon.prototype), 'constructor', this).call(this, opts);
  }

  return Demon;
})(_humanoid2['default']);

exports['default'] = Demon;
module.exports = exports['default'];

},{"../attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/elemental.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = {};

var Elemental = (function (_Race) {
  _inherits(Elemental, _Race);

  function Elemental() {
    _classCallCheck(this, Elemental);

    _get(Object.getPrototypeOf(Elemental.prototype), 'constructor', this).call(this, opts);
  }

  return Elemental;
})(_definitionsRace2['default']);

exports['default'] = Elemental;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/elf.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var opts = { stats: { int: 2, dex: 2, wis: 1, sight: 1,
    skillBonus: { shot: Thresholds.Basic, stab: Thresholds.Basic },
    traits: [Traits.Infravision({ level: 3 })]
  } };

var Elf = (function (_Humanoid) {
  _inherits(Elf, _Humanoid);

  function Elf() {
    _classCallCheck(this, Elf);

    _get(Object.getPrototypeOf(Elf.prototype), 'constructor', this).call(this, opts);
  }

  return Elf;
})(_humanoid2['default']);

exports['default'] = Elf;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/gnome.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var opts = { stats: { str: -2, con: -2, dex: -1, int: 3, wis: 3, cha: -1, sight: 1,
    skillBonus: { bash: Thresholds.Basic, smash: Thresholds.Basic },
    traits: [Traits.Infravision({ level: 2 })]
  } };

var Gnome = (function (_Humanoid) {
  _inherits(Gnome, _Humanoid);

  function Gnome() {
    _classCallCheck(this, Gnome);

    _get(Object.getPrototypeOf(Gnome.prototype), 'constructor', this).call(this, opts);
  }

  return Gnome;
})(_humanoid2['default']);

exports['default'] = Gnome;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/human.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var opts = { stats: { str: 1, con: 1, dex: 1, int: 1, wis: 1, cha: 1, luk: 1, sight: -1,
    skillBonus: { basic: Thresholds.Basic, slash: Thresholds.Basic, smash: Thresholds.Basic, stab: Thresholds.Basic, thrust: Thresholds.Basic, unarmed: Thresholds.Basic }
  } };

var Human = (function (_Humanoid) {
  _inherits(Human, _Humanoid);

  function Human() {
    _classCallCheck(this, Human);

    _get(Object.getPrototypeOf(Human.prototype), 'constructor', this).call(this, opts);
  }

  return Human;
})(_humanoid2['default']);

exports['default'] = Human;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/insect.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { stats: { dex: -2, str: -2, con: -2 } };

var Insect = (function (_Race) {
  _inherits(Insect, _Race);

  function Insect() {
    _classCallCheck(this, Insect);

    _get(Object.getPrototypeOf(Insect.prototype), 'constructor', this).call(this, opts);
  }

  return Insect;
})(_definitionsRace2['default']);

exports['default'] = Insect;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/jelly.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = {};

var Jelly = (function (_Race) {
  _inherits(Jelly, _Race);

  function Jelly() {
    _classCallCheck(this, Jelly);

    _get(Object.getPrototypeOf(Jelly.prototype), 'constructor', this).call(this, opts);
  }

  return Jelly;
})(_definitionsRace2['default']);

exports['default'] = Jelly;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/kobold.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var opts = { stats: { dex: 1, str: 1, con: 1, int: -4, wis: -2, sight: 1,
    skillBonus: { smash: Thresholds.Basic, stab: Thresholds.Basic, thrust: Thresholds.Basic },
    traits: [Traits.Infravision({ level: 2 })]
  } };

var Kobold = (function (_Humanoid) {
  _inherits(Kobold, _Humanoid);

  function Kobold() {
    _classCallCheck(this, Kobold);

    _get(Object.getPrototypeOf(Kobold.prototype), 'constructor', this).call(this, opts);
  }

  return Kobold;
})(_humanoid2['default']);

exports['default'] = Kobold;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/lizard.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { slots: { hands: 0, body: 1, feet: 4, heads: 1, neck: 0, ring: 0, cloak: 0, wrist: 0 }, stats: { con: 1, int: 1 } };

var Lizard = (function (_Race) {
  _inherits(Lizard, _Race);

  function Lizard() {
    _classCallCheck(this, Lizard);

    _get(Object.getPrototypeOf(Lizard.prototype), 'constructor', this).call(this, opts);
  }

  return Lizard;
})(_definitionsRace2['default']);

exports['default'] = Lizard;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/lizardman.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var opts = { slots: { hands: 3 }, stats: { dex: 2,
    skillBonus: { slash: Thresholds.Basic, stab: Thresholds.Basic, thrust: Thresholds.Basic }
  } };

var Lizardman = (function (_Humanoid) {
  _inherits(Lizardman, _Humanoid);

  function Lizardman() {
    _classCallCheck(this, Lizardman);

    _get(Object.getPrototypeOf(Lizardman.prototype), 'constructor', this).call(this, opts);
  }

  return Lizardman;
})(_humanoid2['default']);

exports['default'] = Lizardman;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/manticore.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { slots: { hands: 0, body: 3, feet: 0, heads: 3, neck: 3, ring: 0, cloak: 0, wrist: 0 } };

var Manticore = (function (_Race) {
  _inherits(Manticore, _Race);

  function Manticore() {
    _classCallCheck(this, Manticore);

    _get(Object.getPrototypeOf(Manticore.prototype), 'constructor', this).call(this, opts);
  }

  return Manticore;
})(_definitionsRace2['default']);

exports['default'] = Manticore;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/orc.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _traits_all = require('../traits/_all');

var Traits = _interopRequireWildcard(_traits_all);

var opts = { stats: { dex: -1, str: 3, con: 3, int: -3, wis: -2, sight: 1,
    skillBonus: { smash: Thresholds.Competent, unarmed: Thresholds.Basic },
    traits: [Traits.Infravision({ level: 2 })]
  } };

var Orc = (function (_Humanoid) {
  _inherits(Orc, _Humanoid);

  function Orc() {
    _classCallCheck(this, Orc);

    _get(Object.getPrototypeOf(Orc.prototype), 'constructor', this).call(this, opts);
  }

  return Orc;
})(_humanoid2['default']);

exports['default'] = Orc;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../traits/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/psionic.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _humanoid = require('./_humanoid');

var _humanoid2 = _interopRequireDefault(_humanoid);

var _constantsSkillThresholds = require('../../constants/skill-thresholds');

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var opts = { stats: { dex: -5, str: -5, con: -3, int: 5, wis: 5 },
  skillBonus: { force: Thresholds.Competent }
};

var Psionic = (function (_Humanoid) {
  _inherits(Psionic, _Humanoid);

  function Psionic() {
    _classCallCheck(this, Psionic);

    _get(Object.getPrototypeOf(Psionic.prototype), 'constructor', this).call(this, opts);
  }

  _createClass(Psionic, [{
    key: 'canEquip',
    value: function canEquip(owner, item) {
      return item && item.getType() !== 'hands' && _get(Object.getPrototypeOf(Psionic.prototype), 'canEquip', this).call(this, owner, item);
    }
  }]);

  return Psionic;
})(_humanoid2['default']);

exports['default'] = Psionic;
module.exports = exports['default'];

},{"../../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","./_humanoid":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_humanoid.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/pudding.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { stats: { con: 5, int: -5, wis: -5, dex: -5, str: -1, sight: -1 } };

var Pudding = (function (_Race) {
  _inherits(Pudding, _Race);

  function Pudding() {
    _classCallCheck(this, Pudding);

    _get(Object.getPrototypeOf(Pudding.prototype), 'constructor', this).call(this, opts);
  }

  return Pudding;
})(_definitionsRace2['default']);

exports['default'] = Pudding;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/rat.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { stats: { con: -3, int: -3, wis: -3, dex: -3, str: -3, cha: -3, luk: -3, sight: -1 } };

var Rat = (function (_Race) {
  _inherits(Rat, _Race);

  function Rat() {
    _classCallCheck(this, Rat);

    _get(Object.getPrototypeOf(Rat.prototype), 'constructor', this).call(this, opts);
  }

  return Rat;
})(_definitionsRace2['default']);

exports['default'] = Rat;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/snake.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { slots: { hands: 0, body: 1, feet: 0, heads: 1, neck: 1, ring: 1, cloak: 0, wrist: 0 } };

var Snake = (function (_Race) {
  _inherits(Snake, _Race);

  function Snake() {
    _classCallCheck(this, Snake);

    _get(Object.getPrototypeOf(Snake.prototype), 'constructor', this).call(this, opts);
  }

  return Snake;
})(_definitionsRace2['default']);

exports['default'] = Snake;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/spider.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = { slots: { hands: 0, body: 1, feet: 8, heads: 1, neck: 1, ring: 0, cloak: 0, wrist: 0 } };

var Spider = (function (_Race) {
  _inherits(Spider, _Race);

  function Spider() {
    _classCallCheck(this, Spider);

    _get(Object.getPrototypeOf(Spider.prototype), 'constructor', this).call(this, opts);
  }

  return Spider;
})(_definitionsRace2['default']);

exports['default'] = Spider;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/spore.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsRace = require('../../definitions/race');

var _definitionsRace2 = _interopRequireDefault(_definitionsRace);

var opts = {};

var Spore = (function (_Race) {
  _inherits(Spore, _Race);

  function Spore() {
    _classCallCheck(this, Spore);

    _get(Object.getPrototypeOf(Spore.prototype), 'constructor', this).call(this, opts);
  }

  return Spore;
})(_definitionsRace2['default']);

exports['default'] = Spore;
module.exports = exports['default'];

},{"../../definitions/race":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/content/traits/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsTrait = require('../../definitions/trait');

var _definitionsTrait2 = _interopRequireDefault(_definitionsTrait);

var InfravisionTrait = (function (_Trait) {
  _inherits(InfravisionTrait, _Trait);

  function InfravisionTrait() {
    _classCallCheck(this, InfravisionTrait);

    _get(Object.getPrototypeOf(InfravisionTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(InfravisionTrait, [{
    key: 'Infravision',
    value: function Infravision() {
      return this.level;
    }
  }]);

  return InfravisionTrait;
})(_definitionsTrait2['default']);

var Infravision = function Infravision(opts) {
  return new InfravisionTrait(opts);
};

exports.Infravision = Infravision;

var ProtectionTrait = (function (_Trait2) {
  _inherits(ProtectionTrait, _Trait2);

  function ProtectionTrait() {
    _classCallCheck(this, ProtectionTrait);

    _get(Object.getPrototypeOf(ProtectionTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ProtectionTrait, [{
    key: 'Protection',
    value: function Protection() {
      return this.level;
    }
  }]);

  return ProtectionTrait;
})(_definitionsTrait2['default']);

var Protection = function Protection(opts) {
  return new ProtectionTrait(opts);
};

exports.Protection = Protection;

var HasteTrait = (function (_Trait3) {
  _inherits(HasteTrait, _Trait3);

  function HasteTrait() {
    _classCallCheck(this, HasteTrait);

    _get(Object.getPrototypeOf(HasteTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(HasteTrait, [{
    key: 'Haste',
    value: function Haste() {
      return this.level * 25;
    }
  }]);

  return HasteTrait;
})(_definitionsTrait2['default']);

var Haste = function Haste(opts) {
  return new HasteTrait(opts);
};

exports.Haste = Haste;

var TelepathyTrait = (function (_Trait4) {
  _inherits(TelepathyTrait, _Trait4);

  function TelepathyTrait() {
    _classCallCheck(this, TelepathyTrait);

    _get(Object.getPrototypeOf(TelepathyTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(TelepathyTrait, [{
    key: 'Telepathy',
    value: function Telepathy() {
      return this.level;
    }
  }]);

  return TelepathyTrait;
})(_definitionsTrait2['default']);

var Telepathy = function Telepathy(opts) {
  return new TelepathyTrait(opts);
};

exports.Telepathy = Telepathy;

var ClairvoyanceTrait = (function (_Trait5) {
  _inherits(ClairvoyanceTrait, _Trait5);

  function ClairvoyanceTrait() {
    _classCallCheck(this, ClairvoyanceTrait);

    _get(Object.getPrototypeOf(ClairvoyanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ClairvoyanceTrait, [{
    key: 'Clairvoyance',
    value: function Clairvoyance() {
      return this.level;
    }
  }]);

  return ClairvoyanceTrait;
})(_definitionsTrait2['default']);

var Clairvoyance = function Clairvoyance(opts) {
  return new ClairvoyanceTrait(opts);
};

exports.Clairvoyance = Clairvoyance;

var WarningTrait = (function (_Trait6) {
  _inherits(WarningTrait, _Trait6);

  function WarningTrait() {
    _classCallCheck(this, WarningTrait);

    _get(Object.getPrototypeOf(WarningTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(WarningTrait, [{
    key: 'Warning',
    value: function Warning() {
      return this.level;
    }
  }]);

  return WarningTrait;
})(_definitionsTrait2['default']);

var Warning = function Warning(opts) {
  return new WarningTrait(opts);
};

exports.Warning = Warning;

var InvisibleTrait = (function (_Trait7) {
  _inherits(InvisibleTrait, _Trait7);

  function InvisibleTrait() {
    _classCallCheck(this, InvisibleTrait);

    _get(Object.getPrototypeOf(InvisibleTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(InvisibleTrait, [{
    key: 'Invisible',
    value: function Invisible() {
      return this.level;
    }
  }]);

  return InvisibleTrait;
})(_definitionsTrait2['default']);

var Invisible = function Invisible(opts) {
  return new InvisibleTrait(opts);
};

exports.Invisible = Invisible;

var SeeInvisibleTrait = (function (_Trait8) {
  _inherits(SeeInvisibleTrait, _Trait8);

  function SeeInvisibleTrait() {
    _classCallCheck(this, SeeInvisibleTrait);

    _get(Object.getPrototypeOf(SeeInvisibleTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SeeInvisibleTrait, [{
    key: 'SeeInvisible',
    value: function SeeInvisible() {
      return this.level;
    }
  }]);

  return SeeInvisibleTrait;
})(_definitionsTrait2['default']);

var SeeInvisible = function SeeInvisible(opts) {
  return new SeeInvisibleTrait(opts);
};

exports.SeeInvisible = SeeInvisible;

var StealthTrait = (function (_Trait9) {
  _inherits(StealthTrait, _Trait9);

  function StealthTrait() {
    _classCallCheck(this, StealthTrait);

    _get(Object.getPrototypeOf(StealthTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(StealthTrait, [{
    key: 'Stealth',
    value: function Stealth() {
      return this.level;
    }
  }]);

  return StealthTrait;
})(_definitionsTrait2['default']);

var Stealth = function Stealth(opts) {
  return new StealthTrait(opts);
};

exports.Stealth = Stealth;

var PoisonResistanceTrait = (function (_Trait10) {
  _inherits(PoisonResistanceTrait, _Trait10);

  function PoisonResistanceTrait() {
    _classCallCheck(this, PoisonResistanceTrait);

    _get(Object.getPrototypeOf(PoisonResistanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(PoisonResistanceTrait, [{
    key: 'PoisonResistance',
    value: function PoisonResistance() {
      return 1;
    }
  }]);

  return PoisonResistanceTrait;
})(_definitionsTrait2['default']);

var PoisonResistance = function PoisonResistance() {
  return new PoisonResistanceTrait();
};

exports.PoisonResistance = PoisonResistance;

var FireResistanceTrait = (function (_Trait11) {
  _inherits(FireResistanceTrait, _Trait11);

  function FireResistanceTrait() {
    _classCallCheck(this, FireResistanceTrait);

    _get(Object.getPrototypeOf(FireResistanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(FireResistanceTrait, [{
    key: 'FireResistance',
    value: function FireResistance() {
      return 1;
    }
  }]);

  return FireResistanceTrait;
})(_definitionsTrait2['default']);

var FireResistance = function FireResistance() {
  return new FireResistanceTrait();
};

exports.FireResistance = FireResistance;

var ShockResistanceTrait = (function (_Trait12) {
  _inherits(ShockResistanceTrait, _Trait12);

  function ShockResistanceTrait() {
    _classCallCheck(this, ShockResistanceTrait);

    _get(Object.getPrototypeOf(ShockResistanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ShockResistanceTrait, [{
    key: 'ShockResistance',
    value: function ShockResistance() {
      return 1;
    }
  }]);

  return ShockResistanceTrait;
})(_definitionsTrait2['default']);

var ShockResistance = function ShockResistance() {
  return new ShockResistanceTrait();
};

exports.ShockResistance = ShockResistance;

var IceResistanceTrait = (function (_Trait13) {
  _inherits(IceResistanceTrait, _Trait13);

  function IceResistanceTrait() {
    _classCallCheck(this, IceResistanceTrait);

    _get(Object.getPrototypeOf(IceResistanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(IceResistanceTrait, [{
    key: 'IceResistance',
    value: function IceResistance() {
      return 1;
    }
  }]);

  return IceResistanceTrait;
})(_definitionsTrait2['default']);

var IceResistance = function IceResistance() {
  return new IceResistanceTrait();
};

exports.IceResistance = IceResistance;

var AcidResistanceTrait = (function (_Trait14) {
  _inherits(AcidResistanceTrait, _Trait14);

  function AcidResistanceTrait() {
    _classCallCheck(this, AcidResistanceTrait);

    _get(Object.getPrototypeOf(AcidResistanceTrait.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(AcidResistanceTrait, [{
    key: 'AcidResistance',
    value: function AcidResistance() {
      return 1;
    }
  }]);

  return AcidResistanceTrait;
})(_definitionsTrait2['default']);

var AcidResistance = function AcidResistance() {
  return new AcidResistanceTrait();
};
exports.AcidResistance = AcidResistance;

},{"../../definitions/trait":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/trait.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/abstract.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var Abstract = (function () {
  function Abstract() {
    _classCallCheck(this, Abstract);
  }

  _createClass(Abstract, [{
    key: 'distBetween',
    value: function distBetween(target) {
      var a = target.x - this.x;
      var b = target.y - this.y;
      return Math.sqrt(a * a + b * b);
    }
  }, {
    key: 'distBetweenXY',
    value: function distBetweenXY(x, y) {
      return this.distBetween({ x: x, y: y });
    }
  }, {
    key: 'getCanonName',
    value: function getCanonName() {
      return _lodash2['default'].startCase(this.constructor.name).toLowerCase();
    }
  }, {
    key: 'getType',
    value: function getType() {
      return this.constructor.name.toLowerCase();
    }
  }, {
    key: 'getParentType',
    value: function getParentType() {
      return Object.getPrototypeOf(Object.getPrototypeOf(this)).constructor.name.toLowerCase();
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {}
  }]);

  return Abstract;
})();

exports['default'] = Abstract;
module.exports = exports['default'];

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/attack.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _diceJs = require('dice.js');

var _diceJs2 = _interopRequireDefault(_diceJs);

var _libDiceRoller = require('../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _displayMessageHandler = require('../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _abstract = require('./abstract');

var _abstract2 = _interopRequireDefault(_abstract);

var _glyph = require('./glyph');

var _glyph2 = _interopRequireDefault(_glyph);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _libRotExtensions = require('../lib/rot-extensions');

var _worldgenMonsterSpawner = require('../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var Projectile = function Projectile(glyph) {
  _classCallCheck(this, Projectile);

  this.glyph = glyph;
};

exports.Projectile = Projectile;

var Attack = (function (_Abstract) {
  _inherits(Attack, _Abstract);

  function Attack(opts) {
    _classCallCheck(this, Attack);

    _get(Object.getPrototypeOf(Attack.prototype), 'constructor', this).call(this);
    _lodash2['default'].extend(this, { roll: '1d4', toHit: '0d0', range: 1, chance: 100 }, opts);
    if (this.init) this.init();
  }

  _createClass(Attack, [{
    key: 'value',
    value: function value() {
      return _diceJs2['default'].statistics(this.roll).mean + _diceJs2['default'].statistics(this.toHit) + this.range * 3;
    }
  }, {
    key: 'inRange',
    value: function inRange(owner, target) {
      return owner.distBetween(target) <= this.range;
    }
  }, {
    key: 'possibleTargets',
    value: function possibleTargets(owner) {
      var possibleTargets = [];
      _initGamestate2['default'].world.fov[owner.z].compute(owner.x, owner.y, this.range, function (x, y) {
        var entity = _initGamestate2['default'].world.getEntity(x, y, owner.z);
        if (!entity) return;
        // no target, can't attack target, or the target is invisible and hasn't attacked you yet
        var canOwnerSee = owner.canSee(entity);
        var sightCheck = canOwnerSee || !canOwnerSee && owner._attackedBy !== entity;
        if (!owner.canAttack(entity) || !sightCheck) return;
        possibleTargets.push(entity);
      });
      return possibleTargets;
    }
  }, {
    key: 'canUse',
    value: function canUse(owner) {
      if (_rotJs2['default'].RNG.getPercentage() > this.chance) return;
      return this.possibleTargets(owner).length > 0;
    }
  }, {
    key: 'canHit',
    value: function canHit(owner, target, attackNum) {
      if (owner.hp.atMin()) return false;
      var hitRoll = (0, _libDiceRoller2['default'])('1d' + (20 + attackNum)); // subsequent attacks are less likely to hit
      var targetAC = target.getAC();
      var myToHitBonus = (0, _libDiceRoller2['default'])(this.toHit) - owner.getToHit(target) - owner.getSkillLevelValue(this.getType()) - (this._itemRef ? this._itemRef.buc - 1 : 0); // cursed: -2, uncursed: 0, blessed: +1
      var targetACRoll = 0;

      if (targetAC >= 0) {
        targetACRoll = targetAC + owner.level - myToHitBonus;
      } else {
        targetACRoll = _constantsSettings2['default'].game.baseAC + _rotJs2['default'].RNG.getUniformInt(targetAC, -1) + owner.level - myToHitBonus;
      }
      return hitRoll < targetACRoll;
    }
  }, {
    key: 'animate',
    value: function animate(owner, target, callback) {
      if (!this.glyph) return callback();

      var engine = _initGamestate2['default'].game.engine;
      engine.lock();

      var canPass = function canPass(x, y) {
        var entity = _initGamestate2['default'].world.getEntity(x, y, owner.z);
        var isAttackable = entity && owner.canAttack(entity);
        var isMe = owner.x === x && owner.y === y;
        return _initGamestate2['default'].world.isTilePassable(x, y, owner.z, false) || isMe || isAttackable;
      };
      var astar = new _rotJs2['default'].Path.AStar(target.x, target.y, canPass, { topology: 8 });

      var path = [];
      var pathCallback = function pathCallback(x, y) {
        path.push({ x: x, y: y });
      };

      astar.compute(owner.x, owner.y, pathCallback);

      path.shift();

      if (!path.length) path = [{ x: owner.x, y: owner.y }];

      var projectile = new Projectile(this.glyph);

      projectile.z = owner.z;
      projectile.x = path[0].x;
      projectile.y = path[0].y;

      _initGamestate2['default'].projectiles.push(projectile);

      var moveTo = function moveTo(x, y) {
        projectile.x = x;
        projectile.y = y;
        _initGamestate2['default'].game.refresh();
      };

      var finalize = function finalize() {
        _initGamestate2['default'].projectiles = _lodash2['default'].without(_initGamestate2['default'].projectiles, projectile);
        _initGamestate2['default'].game.refresh();
        callback(); // this has to be called first to prevent race conditions with unlocking the engine and double-dying
        engine.unlock();
      };

      moveTo(projectile.x, projectile.y);

      _lodash2['default'].each(path, function (step, i) {
        var curStep = step;
        setTimeout(function () {
          moveTo(curStep.x, curStep.y);
          if (i === path.length - 1) finalize();
        }, i * (_constantsSettings2['default'].game.turnDelay / 5));
      });
    }
  }, {
    key: 'use',
    value: function use(owner, target, attackNum) {
      target._attackedBy = owner;
      this.tryHit(owner, target, attackNum);
    }
  }, {
    key: 'tryHit',
    value: function tryHit(owner, target, attackNum) {
      var _this = this;

      if (!target) return;
      if (this._itemRef) this._itemRef.use(owner);
      if (!this.canHit(owner, target, attackNum)) {
        var extra = this.missCallback(owner, target);
        _displayMessageHandler2['default'].add({ message: this.missString(owner, target, extra), type: _displayMessageHandler.MessageTypes.COMBAT });
        return false;
      }
      this.animate(owner, target, function () {
        return _this.hit(owner, target);
      });
    }
  }, {
    key: 'calcDamage',
    value: function calcDamage(owner, target) {

      // you can resist some elemental damage!
      if (this.element && target.hasTrait(this.element + 'Resistance')) {
        return 0;
      }

      var damageBoost = 0;
      if (this._itemRef) {
        damageBoost += this._itemRef.enchantment;
        if (this._itemRef._tempAttackBoost) damageBoost += (0, _libDiceRoller2['default'])(this._itemRef._tempAttackBoost);
      }
      var val = (0, _libDiceRoller2['default'])(this.roll) + owner.calcStatBonus('str') + damageBoost + owner.getBonusDamage(target);

      if (!_lodash2['default'].isNumber(val)) {
        (0, _libLogger2['default'])('Attack', 'Invalid attack roll\n      Roll: ' + this.roll + '\n      STR: ' + owner.calcStatBonus('str') + '\n      Boost: ' + damageBoost + '\n      Ref: ' + JSON.stringify(this._itemRef) + '\n      Bonus: ' + owner.getBonusDamage(target) + '\n      MyBonusDamage: ' + owner.bonusDamage + ' (' + typeof owner.bonusDamage + ') ' + owner.rollOrAdd(owner.bonusDamage) + '\n      MyProfessionBonusDamage: ' + owner.professionInst.bonusDamage + ' (' + typeof owner.professionInst.bonusDamage + ') ' + owner.rollOrAdd(owner.professionInst.bonusDamage) + '\n      MyRaceBonusDamage: ' + owner.raceInst.bonusDamage + ' (' + typeof owner.raceInst.bonusDamage + ') ' + owner.rollOrAdd(owner.raceInst.bonusDamage) + '\n      MyTraitValue: ' + owner.getTraitValue('bonusDamage') + '\n      MyFury: ' + owner.getTraitVsOpponent(target, 'Fury') + ' (' + typeof owner.getTraitVsOpponent(target, 'Fury') + ')\n      ');
      }

      return val;
    }
  }, {
    key: 'hit',
    value: function hit(owner, target) {
      var damage = this.calcDamage(owner, target);
      if (damage <= 0) {
        var extraBlockData = this.blockCallback(owner, target);
        _displayMessageHandler2['default'].add({ message: this.blockString(owner, target, extraBlockData), type: _displayMessageHandler.MessageTypes.COMBAT });
        return false;
      }
      var extra = this.hitCallback(owner, target, damage);
      _displayMessageHandler2['default'].add({ message: this.hitString(owner, target, damage, extra), type: _displayMessageHandler.MessageTypes.COMBAT });
      target.takeDamage(damage, owner);
      this.afterHitCallback(owner, target);
    }
  }, {
    key: 'hitString',
    value: function hitString(owner, target, damage) {
      return owner.name + ' hit ' + target.name + ' for ' + damage + ' damage!';
    }
  }, {
    key: 'hitCallback',
    value: function hitCallback(owner) {
      owner.breakConduct('pacifist');

      // TODO this should probably be a behavior
      if (this.spawn && _rotJs2['default'].RNG.getPercentage() <= this.spawnChance) {
        var spawnMe = (0, _libRotExtensions.WeightedExtension)(this.spawn).key;
        var validTile = _lodash2['default'].sample(_initGamestate2['default'].world.getValidTilesInRange(owner.x, owner.y, owner.z, 1, function (tile) {
          return _initGamestate2['default'].world.isTileEmpty(tile.x, tile.y, tile.z);
        }));
        if (!validTile) return;
        _worldgenMonsterSpawner2['default'].spawnSingle(spawnMe, validTile);
      }

      return _rotJs2['default'].RNG.getPercentage() <= this.percent;
    }
  }, {
    key: 'blockString',
    value: function blockString(owner, target) {
      return target.name + ' blocked ' + owner.name + '\'s attack!';
    }
  }, {
    key: 'blockCallback',
    value: function blockCallback() {}
  }, {
    key: 'missString',
    value: function missString(owner, target) {
      return owner.name + ' missed ' + target.name + '!';
    }
  }, {
    key: 'missCallback',
    value: function missCallback() {}
  }, {
    key: 'afterHitCallback',
    value: function afterHitCallback() {}
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      this._itemRef = null;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var me = _lodash2['default'].omit(this, ['_itemRef']);
      return JSON.stringify(me);
    }
  }]);

  return Attack;
})(_abstract2['default']);

exports.Attack = Attack;

var SkilledAttack = (function (_Attack) {
  _inherits(SkilledAttack, _Attack);

  function SkilledAttack() {
    _classCallCheck(this, SkilledAttack);

    _get(Object.getPrototypeOf(SkilledAttack.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SkilledAttack, [{
    key: 'hitCallback',
    value: function hitCallback(owner) {
      _get(Object.getPrototypeOf(SkilledAttack.prototype), 'hitCallback', this).call(this, owner);
      if (this.getType() !== 'Unarmed') {
        owner.breakConduct('wieldedWeapon');
      }
      owner.increaseSkill(this.getType());
    }
  }]);

  return SkilledAttack;
})(Attack);

exports.SkilledAttack = SkilledAttack;

var Reagent = (function (_SkilledAttack) {
  _inherits(Reagent, _SkilledAttack);

  function Reagent() {
    _classCallCheck(this, Reagent);

    _get(Object.getPrototypeOf(Reagent.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Reagent, [{
    key: 'isValidRangedAttack',
    value: function isValidRangedAttack(owner) {
      return this._itemRef && this._itemRef.canUse(owner) && this._itemRef.hasValidAmmo(owner);
    }
  }, {
    key: 'use',
    value: function use(owner, target, attackNum) {
      if (this.isValidRangedAttack(owner)) return this._itemRef.use(owner);
      return _get(Object.getPrototypeOf(Reagent.prototype), 'use', this).call(this, owner, target, attackNum);
    }
  }]);

  return Reagent;
})(SkilledAttack);

exports.Reagent = Reagent;

var Magic = (function (_SkilledAttack2) {
  _inherits(Magic, _SkilledAttack2);

  function Magic() {
    _classCallCheck(this, Magic);

    _get(Object.getPrototypeOf(Magic.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Magic, [{
    key: 'init',
    value: function init() {
      this.glyph = new _glyph2['default'](')', '#f00');
    }
  }]);

  return Magic;
})(SkilledAttack);

exports.Magic = Magic;

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../lib/rot-extensions":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/rot-extensions.js","../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","./abstract":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/abstract.js","./glyph":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/glyph.js","dice.js":"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/dice.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/behavior.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

// behaviors are functionality that cascade, ie, a monster could have 10 behaviors that override die()

var Behavior = function Behavior(priority) {
  _classCallCheck(this, Behavior);

  if (!_lodash2['default'].isNumber(priority)) {
    throw new Error(this.constructor.name + ' should be instantiated with a priority.');
  }
  this.priority = priority;
}

// priorities determine the ordering of behavior execution
;

exports['default'] = Behavior;
var Priority = {
  ALWAYS: 0,
  STUN: 1,
  HEAL: 2,
  DEFENSE: 3,
  INTERACT: 4,
  TARGET: 5,
  MOVE: 6,
  DEFER: 10
};
exports.Priority = Priority;

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/character.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x11, _x12, _x13) { var _again = true; _function: while (_again) { var object = _x11, property = _x12, receiver = _x13; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x11 = parent; _x12 = property; _x13 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _libDiceRoller = require('../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _entity = require('./entity');

var _entity2 = _interopRequireDefault(_entity);

var _libNumberRange = require('../lib/number-range');

var _libNumberRange2 = _interopRequireDefault(_libNumberRange);

var _contentProfessions_all = require('../content/professions/_all');

var _contentProfessions_all2 = _interopRequireDefault(_contentProfessions_all);

var _contentRaces_all = require('../content/races/_all');

var _contentRaces_all2 = _interopRequireDefault(_contentRaces_all);

var _contentBehaviors_all = require('../content/behaviors/_all');

var Behaviors = _interopRequireWildcard(_contentBehaviors_all);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _contentAttacks_all = require('../content/attacks/_all');

var _contentAttacks_all2 = _interopRequireDefault(_contentAttacks_all);

var _displayMessageHandler = require('../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _libValueAssign = require('../lib/value-assign');

var _libValueAssign2 = _interopRequireDefault(_libValueAssign);

var _libDirectionalProbability = require('../lib/directional-probability');

var _libDirectionalProbability2 = _interopRequireDefault(_libDirectionalProbability);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _libGenId = require('../lib/gen-id');

var _libGenId2 = _interopRequireDefault(_libGenId);

var _constantsSkillThresholds = require('../constants/skill-thresholds');

var _constantsSkillThresholds2 = _interopRequireDefault(_constantsSkillThresholds);

var Thresholds = _interopRequireWildcard(_constantsSkillThresholds);

var _definitionsAttack = require('../definitions/attack');

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _contentFlavorNames = require('../content/flavor/names');

var _contentFlavorNames2 = _interopRequireDefault(_contentFlavorNames);

var defaultBehaviors = [Behaviors.RegeneratesHp(), Behaviors.RegeneratesMp()];

var Character = (function (_Entity) {
  _inherits(Character, _Entity);

  function Character(glyph, x, y, z) {
    var _behaviors, _factions, _behaviors2, _factions2, _behaviors3, _factions3, _antiFactions;

    var opts = arguments.length <= 4 || arguments[4] === undefined ? { stats: {}, attributes: {}, template: {} } : arguments[4];

    _classCallCheck(this, Character);

    _get(Object.getPrototypeOf(Character.prototype), 'constructor', this).call(this, glyph, x, y, z);

    this.__id = (0, _libGenId2['default'])();

    this.factions = [];
    this.antiFactions = [];
    this.traits = [];
    this.traitHash = {};
    this.skills = {};
    this.brokenConduct = {};

    this.currentTurn = 0;

    _lodash2['default'].extend(this, _constantsSettings2['default'].game.defaultStats.attributes, opts.attributes, _libValueAssign2['default']);
    _lodash2['default'].extend(this, _constantsSettings2['default'].game.defaultStats.stats, opts.stats);

    (_behaviors = this.behaviors).push.apply(_behaviors, defaultBehaviors);

    this.loadFromTemplate(opts.template);
    if (opts.template) {
      this.glyph.fg = opts.template.color;
    }

    this.professionInst = new _contentProfessions_all2['default'][this.profession]();
    var profHp = this.professionInst.hp;
    var profMp = this.professionInst.mp;

    this.hp = new _libNumberRange2['default'](0, this.spawnHp + profHp, this.spawnHp + profHp);
    this.mp = new _libNumberRange2['default'](0, this.spawnMp + profMp, this.spawnMp + profMp);
    this.xp = new _libNumberRange2['default'](0, 0, this.calcLevelXp(this.level));
    (_factions = this.factions).push.apply(_factions, _toConsumableArray(this.professionInst.addFactions));
    (_behaviors2 = this.behaviors).push.apply(_behaviors2, _toConsumableArray(this.professionInst.addBehaviors));

    this.raceInst = new _contentRaces_all2['default'][this.race]();
    (_factions2 = this.factions).push.apply(_factions2, _toConsumableArray(this.raceInst.addFactions));
    (_behaviors3 = this.behaviors).push.apply(_behaviors3, _toConsumableArray(this.raceInst.addBehaviors));

    if (opts.addFactions) (_factions3 = this.factions).push.apply(_factions3, _toConsumableArray(opts.addFactions));
    if (opts.addAntiFactions) (_antiFactions = this.antiFactions).push.apply(_antiFactions, _toConsumableArray(opts.addAntiFactions));

    this.sortBehaviors();

    this.inventory = [];
    this.equipment = {};

    _initGamestate2['default'].world.moveEntity(this, this.x, this.y, this.z);

    // calculate levelup bonuses
    for (var i = 1; i < this.level; i++) {
      this.levelupStatBoost();
    }

    _initGamestate2['default'].game.scheduler.add(this, true);

    this.doBehavior('spawn');

    this.loadStartingEquipment();
    this.loadStartingSkills();
  }

  // region Static functions

  _createClass(Character, [{
    key: 'calcLevelXp',
    value: function calcLevelXp(level) {
      return 20 * Math.pow(2, level);
    }
  }, {
    key: 'rollOrAdd',
    value: function rollOrAdd(val) {
      val = _lodash2['default'].isString(val) ? (0, _libDiceRoller2['default'])(val) : val;
      return !val || _lodash2['default'].isNaN(val) || !_lodash2['default'].isNumber(val) ? 0 : val;
    }

    // endregion

    // region Trait functions
  }, {
    key: 'getTraits',
    value: function getTraits() {
      return this.traits.concat(this.raceInst.traits).concat(this.professionInst.traits).concat(_lodash2['default'].flatten(_lodash2['default'].values(this.equipment)));
    }
  }, {
    key: 'hasTrait',
    value: function hasTrait(propertyName) {
      if (this.traitHash[propertyName]) return this.traitHash[propertyName];
      return _lodash2['default'].contains(_lodash2['default'].pluck(this.getTraits(), 'constructor.name'), propertyName + 'Trait');
    }
  }, {
    key: 'getTraitValue',
    value: function getTraitValue(property) {
      var _this = this;

      var defaultVal = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      if (this.traitHash[property]) return this.traitHash[property];
      var properties = this.getTraits();
      var value = _lodash2['default'].reduce(properties, function (prev, prop) {
        return prev + (prop[property] && prop.canUse(_this) ? _this.rollOrAdd(prop[property]()) : defaultVal);
      }, defaultVal);
      this.traitHash[property] = value;
      return value;
    }
  }, {
    key: 'addTrait',
    value: function addTrait(property) {
      this.traits.push(property);
      this.flushTraits(property.constructor.name);
    }
  }, {
    key: 'removeTrait',
    value: function removeTrait(property) {
      this.traits = _lodash2['default'].without(this.traits, property);
      this.flushTraits(property.constructor.name);
    }
  }, {
    key: 'flushTraits',
    value: function flushTraits(key) {
      if (key) return delete this.traitHash[key];
      this.traitHash = {};
    }

    // endregion

    // region Skill-related functions
  }, {
    key: 'increaseSkill',
    value: function increaseSkill(type) {
      if (!this.skills[type]) return;
      this.skills[type].add(1);
    }
  }, {
    key: 'getSkillLevel',
    value: function getSkillLevel(type) {
      if (!this.skills[type]) return 0;
      var curNum = this.skills[type].cur;
      var level = _lodash2['default'].reject(_constantsSkillThresholds2['default'], function (threshold) {
        return threshold.max < curNum;
      })[0];
      return level;
    }
  }, {
    key: 'getSkillLevelValue',
    value: function getSkillLevelValue(type) {
      var level = this.getSkillLevel(type);
      return Thresholds[level.name];
    }

    // endregion

    // region Loading functions (skills, equipment)
  }, {
    key: 'loadFromTemplate',
    value: function loadFromTemplate(template) {
      if (!template) return;
      template = _lodash2['default'].clone(template);
      if (!template.profession) template.profession = _lodash2['default'].sample(_initGamestate2['default'].unlocked.profession) || 'Tourist';
      if (!template.race) template.race = _lodash2['default'].sample(_initGamestate2['default'].unlocked.race) || 'Human';
      if (!template.align) template.align = _lodash2['default'].random(-200, 200);
      if (!template.gender) template.gender = _lodash2['default'].sample(['Male', 'Female']);
      if (!template.name) template.name = _lodash2['default'].sample(_contentFlavorNames2['default']);
      if (!template.color) template.color = '#fff';

      _lodash2['default'].extend(this, template);
    }
  }, {
    key: 'loadStartingSkills',
    value: function loadStartingSkills() {
      var _this2 = this;

      var skillCaps = this.professionInst.skillCaps;
      var skillBonus = this.raceInst.skillBonus;
      var defaultLevel = Thresholds.Basic;
      _lodash2['default'].each(_lodash2['default'].values(_contentAttacks_all2['default']), function (atk) {
        if (!(atk.real.prototype instanceof _definitionsAttack.SkilledAttack)) return;
        var atkName = atk.real.name.toLowerCase();
        var maxLevel = defaultLevel + (skillCaps[atkName] || 0);
        maxLevel = Math.min(maxLevel, Thresholds.Legendary);
        var level = skillBonus[atkName] || 0;
        _this2.skills[atkName] = new _libNumberRange2['default'](0, _constantsSkillThresholds2['default'][level].max, _constantsSkillThresholds2['default'][maxLevel].max);
      });
    }
  }, {
    key: 'loadStartingEquipment',
    value: function loadStartingEquipment() {
      var _this3 = this;

      var list = arguments.length <= 0 || arguments[0] === undefined ? this.professionInst.startingItems : arguments[0];

      if (!list) return;
      _lodash2['default'].each(list, function (item) {
        if (item.probability && _rotJs2['default'].RNG.getPercentage() > item.probability) return;

        var inst = null;
        if (item.choices) {
          var choice = _rotJs2['default'].RNG.getWeightedValue(item.choices);
          inst = item.choicesInit[choice]();
        } else {
          inst = item.init();
        }

        if (!_lodash2['default'].isArray(inst)) {
          inst = [inst];
        }

        _lodash2['default'].each(inst, function (item) {
          return _this3.addToInventory(item);
        });
      });
    }

    // endregion

    // region Inventory functions (stacking, add, remove, etc)
  }, {
    key: 'tryToStack',
    value: function tryToStack(item) {
      if (!item.charges) return;
      var didStack = false;
      _lodash2['default'].each(this.inventory, function (testItem) {
        if (testItem.getType() !== item.getType()) return;
        if (testItem.buc !== item.buc || testItem.enchantment !== item.enchantment) return;
        testItem.charges += item.charges;
        didStack = true;
      });
      return didStack;
    }
  }, {
    key: 'hasInInventory',
    value: function hasInInventory(itemProto) {
      return _lodash2['default'].find(this.inventory, function (item) {
        return item.getType() === itemProto.name.toLowerCase();
      });
    }
  }, {
    key: 'dropItem',
    value: function dropItem(item) {
      if (this.isEquipped(item)) {
        this.unequip(item);
      }
      item._canPickUpTurn = this.currentTurn + 5;
      this.removeFromInventory(item);
      _initGamestate2['default'].world.moveItem(item, this.x, this.y, this.z);
    }
  }, {
    key: 'addToInventory',
    value: function addToInventory(item) {
      if (item.goldValue) {
        this.gold += item.goldValue;
        return;
      }
      if (this.tryToStack(item)) return;
      if (this.tryEquip(item)) return;
      this.inventory.push(item);
    }
  }, {
    key: 'removeFromInventory',
    value: function removeFromInventory(item) {
      this.inventory = _lodash2['default'].without(this.inventory, item);
    }

    // endregion

    // region Equip-related (slot-checking, equip, unequip, etc)
  }, {
    key: 'isEquipped',
    value: function isEquipped(item) {
      var slot = item.getParentType();
      return _lodash2['default'].contains(this.equipment[slot], item);
    }
  }, {
    key: 'slotsTaken',
    value: function slotsTaken(slot) {
      if (!this.equipment[slot]) return 0;
      return _lodash2['default'].reduce(this.equipment[slot], function (prev, item) {
        return prev + item.slotsTaken;
      }, 0);
    }
  }, {
    key: 'canEquip',
    value: function canEquip(item) {
      return this.raceInst.canEquip(this, item);
    }
  }, {
    key: 'equip',
    value: function equip(item) {
      var slot = item.getParentType();
      if (!this.equipment[slot]) this.equipment[slot] = [];
      this.equipment[slot].push(item);
      this.breakConduct('stubborn');
      if (this.getType() !== 'Hands') {
        this.breakConduct('nudist');
      }
      if (item.equip) item.equip(this);
      this.flushTraits();
    }
  }, {
    key: 'getWorseItemsThan',
    value: function getWorseItemsThan(item) {
      var slot = item.getParentType();
      return (0, _lodash2['default'])(this.equipment[slot]).filter(function (equip) {
        return equip.value() < item.value() && item.bucName !== 'cursed';
      });
    }
  }, {
    key: 'shouldEquip',
    value: function shouldEquip(item) {
      var slot = item.getParentType();
      if (this.raceInst.slots[slot] > 0 && this.canEquip(item)) return true;
      var lowerItems = this.getWorseItemsThan(item);
      return lowerItems.length < item.slotsTaken;
    }
  }, {
    key: 'tryEquip',
    value: function tryEquip(item) {
      if (!this.canEquip(item) || !this.shouldEquip(item)) return false;
      var worseItems = this.getWorseItemsThan(item);
      if (worseItems.length < item.slotsTaken) return false; // cursed items

      if (worseItems.length > 0) {
        for (var i = 0; i < item.slotsTaken; i++) {
          this.unequip(worseItems[i]);
        }
      }
      this.equip(item);
      return true;
    }
  }, {
    key: 'unequip',
    value: function unequip(item) {
      if (item.isCursed()) return;
      var slot = item.getParentType();
      this.equipment[slot] = _lodash2['default'].without(this.equipment[slot], item);
      this.inventory.push(item);
      if (item.unequip) item.unequip(this);
    }

    // endregion

    // region Behavior-related functions
  }, {
    key: 'doBehavior',
    value: function doBehavior(action) {
      var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      args.unshift(this);
      _lodash2['default'].each(this.behaviors, function (behavior) {
        if (behavior[action]) return behavior[action].apply(behavior, args);
      }); // returning false from any behavior will cancel subsequent ones
    }
  }, {
    key: 'sortBehaviors',
    value: function sortBehaviors() {
      this.behaviors = _lodash2['default'].sortBy(this.behaviors, 'priority');
    }
  }, {
    key: 'addBehavior',
    value: function addBehavior(behavior) {
      this.behaviors.push(behavior);
      this.sortBehaviors();
    }
  }, {
    key: 'hasBehavior',
    value: function hasBehavior(behavior) {
      if (!_lodash2['default'].contains(behavior, 'Behavior')) behavior = behavior + 'Behavior';
      return _lodash2['default'].contains(_lodash2['default'].pluck(this.behaviors, 'constructor.name'), behavior);
    }
  }, {
    key: 'addUniqueBehavior',
    value: function addUniqueBehavior(behavior) {
      if (this.hasBehavior(behavior.constructor.name)) return;
      this.addBehavior(behavior);
    }
  }, {
    key: 'removeBehavior',
    value: function removeBehavior(behavior) {
      this.behaviors = _lodash2['default'].without(this.behaviors, behavior);
    }

    // endregion

    // region Damage / dying / targetting
  }, {
    key: 'takeDamage',
    value: function takeDamage(damage, attacker) {
      this.hp.sub(damage);
      this.doBehavior('takeDamage', [attacker]);
      if (this.hp.atMin()) {
        this.die(attacker);
      }
    }
  }, {
    key: 'die',
    value: function die(killer) {
      this.hp.toMin();
      if (this.killerName) {
        (0, _libLogger2['default'])('Player', 'Error: Attempting to die twice. Previous killer: ' + this.killerName + ' (' + this.__killerId + '), Usurper: ' + killer.name + ' (' + killer.__id + ')', true);
        return;
      }
      this.doBehavior('die');
      _displayMessageHandler2['default'].add({ message: this.name + ' was killed by ' + killer.name + '!', type: _displayMessageHandler.MessageTypes.COMBAT });
      if (killer.kill) killer.kill(this);

      this.__killerId = killer.__id;
      this.killerName = killer.name;
      this.removeSelf();
    }
  }, {
    key: 'removeSelf',
    value: function removeSelf() {
      _initGamestate2['default'].world.removeEntity(this);
      _initGamestate2['default'].game.scheduler.remove(this);
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      _lodash2['default'].each(this.attacks, function (a) {
        return a.cleanUp();
      });
      this.behaviors = null;
      this.inventory = null;
      this.equipment = null;
      this.attacks = null;
      this._path = null;
      this._attackedBy = null;

      this.professionInst = null;
      this.raceInst = null;

      this.conquest = null;
      this.traits = null;
      this.traitHash = null;
      this.skills = null;
    }
  }, {
    key: 'kill',
    value: function kill(dead) {
      this.gainXp(dead.killXp);
      this.doBehavior('kill');
    }
  }, {
    key: 'setTarget',
    value: function setTarget(newTarget) {
      this.target = newTarget;
    }

    // endregion

    // region Movement (pathfinding, stepping)
  }, {
    key: 'stepRandomly',
    value: function stepRandomly() {
      var _this4 = this;

      var tiles = _initGamestate2['default'].world.getAllTilesInRange(this.x, this.y, this.z, 1);
      var validTiles = _lodash2['default'].map(tiles, function (tile, i) {
        return _initGamestate2['default'].world.isTileEmpty(tile.x, tile.y, tile.z) ? i + 1 : null;
      }); // 1-9 instead of 0-8
      var direction = (0, _lodash2['default'])(validTiles).compact().sample() - 1; // adjustment for array
      var newTile = tiles[direction]; // default to a random tile

      if (this.lastDirection) {
        (function () {
          var probs = (0, _libDirectionalProbability2['default'])(_this4.lastDirection + 1); // adjust for array
          var choices = (0, _lodash2['default'])(validTiles).map(function (tileIndex) {
            return tileIndex ? [tileIndex, probs[tileIndex]] : null;
          }).compact().zipObject().value();
          direction = parseInt(_rotJs2['default'].RNG.getWeightedValue(choices)) - 1;
          newTile = tiles[direction];
        })();
      }

      if (!newTile) return; // surrounded
      this.move(newTile);
      this.lastDirection = direction;
      this.doBehavior('step');
    }
  }, {
    key: 'stepTowards',
    value: function stepTowards(target) {
      var _this5 = this;

      if (!this.canSee(target)) {
        return this.stepRandomly();
      }
      var path = [];
      var addPath = function addPath(x, y) {
        return path.push({ x: x, y: y });
      };
      target._path.compute(this.x, this.y, addPath);

      path.shift();
      var step = path.shift();
      if (!step) return false;

      var blockingEntityInfo = function blockingEntityInfo(path) {
        var entity = null;
        var step = null;
        _lodash2['default'].each(path, function (newStep, i) {
          var testEntity = _initGamestate2['default'].world.getEntity(newStep.x, newStep.y, _this5.z);
          if (testEntity && !_this5.canAttack(testEntity)) {
            entity = testEntity;
            step = i;
            return false;
          }
        });
        return { entity: entity, step: step };
      };

      var mainBlockingInfo = blockingEntityInfo(path);

      // the main path is blocked
      if (mainBlockingInfo.entity) {
        var altPath = this.getAlternatePathTo(target);

        // no alternate path could be generated
        if (!altPath) {
          this.moveTo(step.x, step.y);
          return true;
        }

        var altBlockingInfo = blockingEntityInfo(altPath);

        // both are blocked, take the shortest path
        if (mainBlockingInfo.entity && altBlockingInfo.entity) {
          var newPath = _lodash2['default'].min([path, altPath], function (testPath) {
            return testPath.length;
          });
          var newStep = newPath.shift();
          this.moveTo(newStep.x, newStep.y);

          // the alt path isn't blocked, take that
        } else {
            var newStep = altPath.shift();
            this.moveTo(newStep.x, newStep.y);
          }

        // no blockers, keep moving on
      } else {
          this.moveTo(step.x, step.y);
        }

      this.doBehavior('step');
      return true;
    }
  }, {
    key: 'getAlternatePathTo',
    value: function getAlternatePathTo(target) {
      var _this6 = this;

      var canPass = function canPass(x, y) {
        var entity = _initGamestate2['default'].world.getEntity(x, y, _this6.z);
        var isAttackable = entity && _this6.canAttack(entity);
        var isMe = _this6.x === x && _this6.y === y;
        return _initGamestate2['default'].world.isTilePassable(x, y, _this6.z) || isMe || isAttackable;
      };
      var astar = new _rotJs2['default'].Path.AStar(target.x, target.y, canPass);

      var path = [];
      astar.compute(this.x, this.y, function (x, y) {
        return path.push({ x: x, y: y });
      });

      path.shift();
      var step = path.shift();
      if (!step) return null;
      return path;
    }
  }, {
    key: 'moveTo',
    value: function moveTo(x, y) {
      return _initGamestate2['default'].world.moveEntity(this, x, y, this.z);
    }
  }, {
    key: 'move',
    value: function move(newTile) {
      return _initGamestate2['default'].world.moveEntity(this, newTile.x, newTile.y, newTile.z);
    }
  }, {
    key: 'alertAllInRange',
    value: function alertAllInRange() {
      var _this7 = this;

      var soundRange = arguments.length <= 0 || arguments[0] === undefined ? this.getSoundEmission() : arguments[0];

      var entities = _initGamestate2['default'].world.getValidEntitiesInRange(this.x, this.y, this.z, soundRange, function (entity) {
        return entity.canAttack(_this7);
      });
      _lodash2['default'].each(entities, function (entity) {
        entity.doBehavior('hear', [_this7]);
      });
    }

    // endregion

    // region Attack-related (vision, attacking, etc)
  }, {
    key: 'getAttacks',
    value: function getAttacks() {
      var _this8 = this;

      var baseAttacks = this.attacks || [];
      var racialAttacks = baseAttacks.concat(this.raceInst.attacks);
      var attacks = racialAttacks.concat((0, _lodash2['default'])(this.equipment).values().flatten().filter(function (item) {
        return item.canUse(_this8) && item.attacks;
      }).pluck('attacks').flatten().value());
      if (attacks.length === 0) attacks = [_contentAttacks_all2['default'].Unarmed()];
      var inventoryAttacks = (0, _lodash2['default'])(this.inventory).filter(function (item) {
        return item.canUse(_this8) && item.attacks;
      }).pluck('attacks').flatten().value();

      // all melee attacks are valid, but only one ranged inventory attack can be used
      if (_lodash2['default'].some(attacks, function (atk) {
        return atk.canUse(_this8);
      })) return attacks;
      return _lodash2['default'].compact([(0, _lodash2['default'])(inventoryAttacks).filter(function (atk) {
        return atk.canUse(_this8);
      }).sample()]);
    }
  }, {
    key: 'canSee',
    value: function canSee(entity) {
      return this.getTraitValue('SeeInvisible') >= entity.getTraitValue('Invisible');
    }
  }, {
    key: 'canAttack',
    value: function canAttack(entity) {
      if (entity.hp.atMin()) return false;
      // they have a faction that you are against
      return _lodash2['default'].intersection(entity.factions, this.antiFactions).length > 0 ||

      // or you attack everything but your own faction
      _lodash2['default'].contains(this.antiFactions, 'all') && _lodash2['default'].intersection(entity.factions, this.factions).length === 0;
    }
  }, {
    key: 'doAttack',
    value: function doAttack(attack, hitNum) {
      var target = attack.possibleTargets(this)[0];
      if (!target) return; // possibly a multi-shot attack that has killed early
      attack.use(this, target, hitNum);
    }
  }, {
    key: 'tryAttack',
    value: function tryAttack() {
      var _this9 = this;

      var attacks = this.getAttacks();
      if (attacks.length === 0) return false;

      _lodash2['default'].each(attacks, function (atk, i) {
        return _this9.doAttack(atk, i);
      });
      return true;
    }

    // endregion

    // region Levelup/XP functions
  }, {
    key: 'calcLevelHpBonus',
    value: function calcLevelHpBonus() {
      return (0, _libDiceRoller2['default'])(this.professionInst.config.hp) + this.calcStatBonus('con');
    }
  }, {
    key: 'calcLevelMpBonus',
    value: function calcLevelMpBonus() {
      return (0, _libDiceRoller2['default'])(this.professionInst.config.mp) + this.calcStatBonus('int');
    }
  }, {
    key: 'gainXp',
    value: function gainXp(number) {
      if (this.hp.atMin()) return;
      this.xp.add(number);
      if (this.xp.atMax()) {
        this.levelup();
      }
    }
  }, {
    key: 'levelup',
    value: function levelup() {
      this.level += 1;
      this.xp.max = this.calcLevelXp(this.level);
      this.levelupStatBoost();

      // resets
      this.xp.toMin();
      this.hp.toMax();
      this.mp.toMax();

      this.flushTraits();
      _displayMessageHandler2['default'].add({ message: this.name + ' has reached experience level ' + this.level + '!', type: _displayMessageHandler.MessageTypes.CHARACTER });
    }
  }, {
    key: 'levelupStatBoost',
    value: function levelupStatBoost() {
      this.professionInst.levelup();
      this.hp.max += this.calcLevelHpBonus();
      this.mp.max += this.calcLevelMpBonus();
    }

    // endregion

    // region Stat manipulation
  }, {
    key: 'abuse',
    value: function abuse(stat) {
      var loss = arguments.length <= 1 || arguments[1] === undefined ? '1d1' : arguments[1];

      this[stat] = Math.max(this[stat] - (0, _libDiceRoller2['default'])(loss), _constantsSettings2['default'].game.minStatValue);
    }
  }, {
    key: 'exercise',
    value: function exercise(stat) {
      var gain = arguments.length <= 1 || arguments[1] === undefined ? '1d1' : arguments[1];

      this[stat] += (0, _libDiceRoller2['default'])(gain);
    }

    // endregion

    // region Getters (Stats, etc)
  }, {
    key: 'getTraitVsOpponent',
    value: function getTraitVsOpponent(target, trait) {
      var _this10 = this;

      if (!target) return 0;
      return _lodash2['default'].reduce(target.factions, function (prev, cur) {
        return prev + _this10.getTraitValue('' + cur + trait);
      }, 0);
    }
  }, {
    key: 'getAlign',
    value: function getAlign() {
      if (this.align <= -_constantsSettings2['default'].game.alignThreshold) return 'Evil';
      if (this.align >= _constantsSettings2['default'].game.alignThreshold) return 'Good';
      return 'Neutral';
    }
  }, {
    key: 'getStat',
    value: function getStat(stat) {
      return this.rollOrAdd(this[stat]) + this.rollOrAdd(this.professionInst[stat]) + this.rollOrAdd(this.raceInst[stat]) + this.getTraitValue(stat);
    }
  }, {
    key: 'getStatWithMin',
    value: function getStatWithMin(stat) {
      var min = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

      return Math.max(min, this.getStat(stat));
    }
  }, {
    key: 'getRegenHp',
    value: function getRegenHp() {
      return this.getStatWithMin('regenHp', 1);
    }
  }, {
    key: 'getRegenMp',
    value: function getRegenMp() {
      return this.getStatWithMin('regenMp', 1);
    }
  }, {
    key: 'getBonusDamage',
    value: function getBonusDamage() {
      var target = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

      return this.getStat('bonusDamage') + this.getTraitVsOpponent(target, 'Fury');
    }
  }, {
    key: 'getToHit',
    value: function getToHit() {
      var target = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

      return this.getStat('toHit') + this.getTraitVsOpponent(target, 'Bane');
    }
  }, {
    key: 'getSight',
    value: function getSight() {
      return this.getStatWithMin('sight') + this.getTraitValue('Infravision');
    }
  }, {
    key: 'getSpeed',
    value: function getSpeed() {
      return this.getStatWithMin('speed') + this.getTraitValue('Haste');
    }
  }, {
    key: 'getSoundEmission',
    value: function getSoundEmission() {
      return this.getStatWithMin('sound') - this.getTraitValue('Stealth');
    }
  }, {
    key: 'getAC',
    value: function getAC() {
      return _constantsSettings2['default'].game.baseAC + this.getStat('ac') - this.calcStatBonus('dex') - this.getTraitValue('Protection');
    }
  }, {
    key: 'getStr',
    value: function getStr() {
      return this.getStatWithMin('str');
    }
  }, {
    key: 'getDex',
    value: function getDex() {
      return this.getStatWithMin('dex');
    }
  }, {
    key: 'getCon',
    value: function getCon() {
      return this.getStatWithMin('con');
    }
  }, {
    key: 'getInt',
    value: function getInt() {
      return this.getStatWithMin('int');
    }
  }, {
    key: 'getWis',
    value: function getWis() {
      return this.getStatWithMin('wis');
    }
  }, {
    key: 'getCha',
    value: function getCha() {
      return this.getStatWithMin('cha');
    }
  }, {
    key: 'getLuk',
    value: function getLuk() {
      return this.getStatWithMin('luk');
    }
  }, {
    key: 'hasFaction',
    value: function hasFaction(faction) {
      return _lodash2['default'].contains(this.factions, faction);
    }

    // endregion (Stats, etc)

  }, {
    key: 'act',
    value: function act() {
      this.currentTurn++;
      this.doBehavior('act');
    }
  }, {
    key: 'breakConduct',
    value: function breakConduct(conduct) {
      this.brokenConduct[conduct] = true;
    }
  }, {
    key: 'calcDifficulty',
    value: function calcDifficulty(entity) {
      return Math.max(1, Math.min(5, Math.floor((entity.level - this.level) / 2)));
    }
  }, {
    key: 'heal',
    value: function heal(value) {
      if (!value || !_lodash2['default'].isNumber(value) || _lodash2['default'].isNaN(value)) {
        (0, _libLogger2['default'])('Character', 'Value given to heal was not well formed: ' + value);
      }
      this.hp.add(value);
    }

    // -2 = 4/5, -1 = 6/7, 0 = 8, +1 = 9/10, +2 = 10/11 (etc)
  }, {
    key: 'calcStatBonus',
    value: function calcStatBonus(stat) {
      return Math.floor(this['get' + _lodash2['default'].capitalize(stat)]() / 2) - 4;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var me = _lodash2['default'].omit(this, ['game', '_path', 'traitHash', '_attackedBy', '__id', '__killerId']);
      return JSON.stringify(me);
    }
  }]);

  return Character;
})(_entity2['default']);

exports['default'] = Character;
module.exports = exports['default'];

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../constants/skill-thresholds":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/skill-thresholds.js","../content/attacks/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/attacks/_all.js","../content/behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../content/flavor/names":"/home/seiyria/projects/Roguathia/src/js/rogue/content/flavor/names.js","../content/professions/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/professions/_all.js","../content/races/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/races/_all.js","../definitions/attack":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/attack.js","../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../lib/directional-probability":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/directional-probability.js","../lib/gen-id":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/gen-id.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../lib/number-range":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/number-range.js","../lib/value-assign":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/value-assign.js","./entity":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/entity.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/effect.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _displayMessageHandler = require('../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var Effect = (function () {
  function Effect() {
    _classCallCheck(this, Effect);
  }

  _createClass(Effect, null, [{
    key: 'use',
    value: function use() {}
  }, {
    key: 'msg',
    value: function msg(entity, message) {
      _displayMessageHandler2['default'].add({ entity: entity, message: message, type: _displayMessageHandler.MessageTypes.DUNGEON });
    }
  }, {
    key: 'getEmptyTilesInRange',
    value: function getEmptyTilesInRange(entity) {
      var range = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];

      return _initGamestate2['default'].world.getValidTilesInRange(entity.x, entity.y, entity.z, range, function (tile) {
        return _initGamestate2['default'].world.isTileEmpty(tile.x, tile.y, tile.z);
      });
    }
  }, {
    key: 'probability',
    get: function get() {
      return 1;
    }
  }]);

  return Effect;
})();

exports['default'] = Effect;
module.exports = exports['default'];

},{"../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/entity.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _glyph = require('./glyph');

var _glyph2 = _interopRequireDefault(_glyph);

var _abstract = require('./abstract');

var _abstract2 = _interopRequireDefault(_abstract);

var Entity = (function (_Abstract) {
  _inherits(Entity, _Abstract);

  function Entity(glyphOpts) {
    var x = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    var y = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
    var z = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

    _classCallCheck(this, Entity);

    _get(Object.getPrototypeOf(Entity.prototype), 'constructor', this).call(this);
    this.density = 1;
    this.opacity = 0;
    this.x = x;
    this.y = y;
    this.z = z;
    this.setGlyph(glyphOpts);
  }

  _createClass(Entity, [{
    key: 'setGlyph',
    value: function setGlyph(glyphOpts) {
      this.glyph = new _glyph2['default'](glyphOpts.key, glyphOpts.fg, glyphOpts.bg);
    }
  }, {
    key: 'isDense',
    value: function isDense() {
      return !!this.density;
    }
  }, {
    key: 'isBlockingLight',
    value: function isBlockingLight() {
      return !!this.opacity;
    }
  }]);

  return Entity;
})(_abstract2['default']);

exports['default'] = Entity;
module.exports = exports['default'];

},{"./abstract":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/abstract.js","./glyph":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/glyph.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x16, _x17, _x18) { var _again = true; _function: while (_again) { var object = _x16, property = _x17, receiver = _x18; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x16 = parent; _x17 = property; _x18 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _item = require('./item');

var _constantsFaketypes = require('../constants/faketypes');

var Fakes = _interopRequireWildcard(_constantsFaketypes);

var _displayMessageHandler = require('../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var _constantsGlyphs = require('../constants/glyphs');

var _constantsMaterials = require('../constants/materials');

var _constantsMaterials2 = _interopRequireDefault(_constantsMaterials);

var _constantsDecorators = require('../constants/decorators');

var Equipment = (function (_Item) {
  _inherits(Equipment, _Item);

  function Equipment() {
    _classCallCheck(this, Equipment);

    _get(Object.getPrototypeOf(Equipment.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Equipment, [{
    key: 'name',
    get: function get() {
      var name = !this.isIdentified() && this.fakeName ? this.fakeName : this.realName;
      if (!name) name = this.getCanonName();
      var enchant = this.enchantment ? '+' + this.enchantment + ' ' + name : name;
      var buc = this.bucName !== 'uncursed' ? this.bucName + ' ' + enchant : enchant;
      return buc;
    }
  }]);

  return Equipment;
})(_item.Item);

var Special = (function (_Item2) {
  _inherits(Special, _Item2);

  function Special() {
    _classCallCheck(this, Special);

    _get(Object.getPrototypeOf(Special.prototype), 'constructor', this).apply(this, arguments);
  }

  return Special;
})(_item.Item);

exports.Special = Special;

var Comestible = (function (_Item3) {
  _inherits(Comestible, _Item3);

  function Comestible() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Comestible);

    opts.symbol = _constantsGlyphs.Items.Comestible;
    _get(Object.getPrototypeOf(_Comestible.prototype), 'constructor', this).call(this, opts);
  }

  var _Comestible = Comestible;
  Comestible = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Food)(Comestible) || Comestible;
  return Comestible;
})(_item.Item);

exports.Comestible = Comestible;

var Armor = (function (_Equipment) {
  _inherits(Armor, _Equipment);

  function Armor() {
    _classCallCheck(this, Armor);

    _get(Object.getPrototypeOf(Armor.prototype), 'constructor', this).apply(this, arguments);
  }

  return Armor;
})(Equipment);

exports.Armor = Armor;

var Weapon = (function (_Equipment2) {
  _inherits(Weapon, _Equipment2);

  function Weapon(opts) {
    _classCallCheck(this, Weapon);

    _get(Object.getPrototypeOf(Weapon.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  return Weapon;
})(Equipment);

exports.Weapon = Weapon;

var Body = (function (_Armor) {
  _inherits(Body, _Armor);

  function Body() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Body);

    opts.symbol = _constantsGlyphs.Items.Body;
    _get(Object.getPrototypeOf(_Body.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Body = Body;
  Body = (0, _constantsDecorators.rarity)(25)(Body) || Body;
  return Body;
})(Armor);

exports.Body = Body;

var Ring = (function (_Armor2) {
  _inherits(Ring, _Armor2);

  function Ring() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Ring);

    opts.bucProb = { cursed: 7, blessed: 2, uncursed: 91 };
    opts.symbol = _constantsGlyphs.Items.Ring;
    _get(Object.getPrototypeOf(_Ring.prototype), 'constructor', this).call(this, opts);
    this.realName = '' + this.getCanonName();
    this.fakeName = this.pickFakeName(Fakes.Ring) + ' ring';
  }

  var _Ring = Ring;
  Ring = (0, _constantsDecorators.rarity)(3)(Ring) || Ring;
  return Ring;
})(Armor);

exports.Ring = Ring;

var Hands = (function (_Weapon) {
  _inherits(Hands, _Weapon);

  function Hands() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Hands);

    opts.symbol = _constantsGlyphs.Items.Hands;
    _get(Object.getPrototypeOf(_Hands.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Hands = Hands;
  Hands = (0, _constantsDecorators.rarity)(25)(Hands) || Hands;
  return Hands;
})(Weapon);

exports.Hands = Hands;

var Wrist = (function (_Armor3) {
  _inherits(Wrist, _Armor3);

  function Wrist() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Wrist);

    opts.symbol = _constantsGlyphs.Items.Wrist;
    _get(Object.getPrototypeOf(_Wrist.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Wrist = Wrist;
  Wrist = (0, _constantsDecorators.rarity)(5)(Wrist) || Wrist;
  return Wrist;
})(Armor);

exports.Wrist = Wrist;

var Feet = (function (_Armor4) {
  _inherits(Feet, _Armor4);

  function Feet() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Feet);

    opts.symbol = _constantsGlyphs.Items.Feet;
    _get(Object.getPrototypeOf(_Feet.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
    this.slotsTaken = 2;
  }

  var _Feet = Feet;
  Feet = (0, _constantsDecorators.rarity)(5)(Feet) || Feet;
  return Feet;
})(Armor);

exports.Feet = Feet;

var Head = (function (_Armor5) {
  _inherits(Head, _Armor5);

  function Head() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Head);

    opts.symbol = _constantsGlyphs.Items.Head;
    _get(Object.getPrototypeOf(_Head.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Head = Head;
  Head = (0, _constantsDecorators.rarity)(5)(Head) || Head;
  return Head;
})(Armor);

exports.Head = Head;

var Cloak = (function (_Armor6) {
  _inherits(Cloak, _Armor6);

  function Cloak() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Cloak);

    opts.symbol = _constantsGlyphs.Items.Cloak;
    _get(Object.getPrototypeOf(_Cloak.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Cloak = Cloak;
  Cloak = (0, _constantsDecorators.rarity)(3)(Cloak) || Cloak;
  return Cloak;
})(Armor);

exports.Cloak = Cloak;

var Neck = (function (_Armor7) {
  _inherits(Neck, _Armor7);

  function Neck() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Neck);

    opts.symbol = _constantsGlyphs.Items.Neck;
    _get(Object.getPrototypeOf(_Neck.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Neck = Neck;
  Neck = (0, _constantsDecorators.rarity)(1)(Neck) || Neck;
  return Neck;
})(Armor);

exports.Neck = Neck;

var Gem = (function (_Item4) {
  _inherits(Gem, _Item4);

  function Gem() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Gem);

    opts.symbol = _constantsGlyphs.Items.Gem;
    _get(Object.getPrototypeOf(_Gem.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = '' + this.getCanonName();
  }

  var _Gem = Gem;
  Gem = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Glass)(Gem) || Gem;
  Gem = (0, _constantsDecorators.rarity)(0)(Gem) || Gem;
  return Gem;
})(_item.Item);

exports.Gem = Gem;

var Scroll = (function (_Item5) {
  _inherits(Scroll, _Item5);

  function Scroll() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Scroll);

    opts.symbol = _constantsGlyphs.Items.Scroll;
    _get(Object.getPrototypeOf(_Scroll.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = '' + this.getCanonName();
  }

  var _Scroll = Scroll;
  Scroll = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Scroll) || Scroll;
  Scroll = (0, _constantsDecorators.rarity)(0)(Scroll) || Scroll;
  return Scroll;
})(_item.Item);

exports.Scroll = Scroll;

var Wand = (function (_Weapon2) {
  _inherits(Wand, _Weapon2);

  function Wand() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Wand);

    opts.symbol = _constantsGlyphs.Items.Wand;
    _get(Object.getPrototypeOf(_Wand.prototype), 'constructor', this).call(this, opts);
    this.realName = this.fakeName = this.getCanonName();
  }

  var _Wand = Wand;
  Wand = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Wood)(Wand) || Wand;
  Wand = (0, _constantsDecorators.rarity)(2)(Wand) || Wand;
  return Wand;
})(Weapon);

exports.Wand = Wand;

var Spellbook = (function (_Weapon3) {
  _inherits(Spellbook, _Weapon3);

  function Spellbook() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Spellbook);

    opts.manaCost = opts.manaCost || 3;
    opts.symbol = _constantsGlyphs.Items.Spellbook;
    _get(Object.getPrototypeOf(_Spellbook.prototype), 'constructor', this).call(this, opts);
  }

  var _Spellbook = Spellbook;
  Spellbook = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Cloth)(Spellbook) || Spellbook;
  Spellbook = (0, _constantsDecorators.rarity)(1)(Spellbook) || Spellbook;
  return Spellbook;
})(Weapon);

exports.Spellbook = Spellbook;

var Potion = (function (_Equipment3) {
  _inherits(Potion, _Equipment3);

  function Potion() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Potion);

    opts.symbol = _constantsGlyphs.Items.Potion;
    _get(Object.getPrototypeOf(_Potion.prototype), 'constructor', this).call(this, opts);
    var fake = this.pickFakeName(Fakes.Potion);
    this.color = fake;
    this.realName = 'potion of ' + this.getCanonName();
    this.fakeName = fake + ' potion';
  }

  _createClass(Potion, [{
    key: 'use',
    value: function use(entity, extra) {
      _get(Object.getPrototypeOf(_Potion.prototype), 'use', this).call(this, entity, extra);
      _displayMessageHandler2['default'].add({ message: entity.name + ' drank ' + this.color + ' liquid and ' + extra.messageFinish + '!', type: _displayMessageHandler.MessageTypes.DUNGEON });
    }
  }]);

  var _Potion = Potion;
  Potion = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Glass)(Potion) || Potion;
  Potion = (0, _constantsDecorators.rarity)(20)(Potion) || Potion;
  return Potion;
})(Equipment);

exports.Potion = Potion;

var Tool = (function (_Item6) {
  _inherits(Tool, _Item6);

  function Tool() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, _Tool);

    opts.symbol = _constantsGlyphs.Items.Tool;
    _get(Object.getPrototypeOf(_Tool.prototype), 'constructor', this).call(this, opts);
  }

  var _Tool = Tool;
  Tool = (0, _constantsDecorators.material)(_constantsMaterials2['default'].Iron)(Tool) || Tool;
  Tool = (0, _constantsDecorators.rarity)(0)(Tool) || Tool;
  return Tool;
})(_item.Item);

exports.Tool = Tool;
// actually a value of 8 but they're not implemented yet
// actually a value of 15 but they're not implemented yet

},{"../constants/decorators":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/decorators.js","../constants/faketypes":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/faketypes.js","../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../constants/materials":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/materials.js","../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","./item":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/item.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/glyph.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Glyph = function Glyph(key, fg, bg) {
  _classCallCheck(this, Glyph);

  this.key = key ? key.substring(0, 1) : '';
  this.fg = fg;
  this.bg = bg;
};

exports['default'] = Glyph;
module.exports = exports['default'];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/item.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _libDiceRoller = require('../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _glyph = require('./glyph');

var _glyph2 = _interopRequireDefault(_glyph);

var _libValidColors = require('../lib/valid-colors');

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _abstract = require('./abstract');

var _abstract2 = _interopRequireDefault(_abstract);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _displayMessageHandler = require('../display/message-handler');

var _displayMessageHandler2 = _interopRequireDefault(_displayMessageHandler);

var Item = (function (_Abstract) {
  _inherits(Item, _Abstract);

  function Item(opts) {
    var _this = this;

    _classCallCheck(this, Item);

    _get(Object.getPrototypeOf(Item.prototype), 'constructor', this).call(this, opts);
    opts.glyph = _lodash2['default'].extend({ fg: (0, _libValidColors.GetColor)(), key: opts.symbol }, opts.glyph);
    _lodash2['default'].extend(this, opts);
    this.enchantment = this.enchantment || 0;
    this.slotsTaken = this.slotsTaken || 1;
    if (this.attacks) {
      _lodash2['default'].each(this.attacks, function (attack) {
        return attack._itemRef = _this;
      });
    }
    if (this.range) {
      this.range = _lodash2['default'].extend({ numShots: 1, damageBoost: '0d0', ammo: [] }, this.range);
    }
    if (this.charges) this.charges = (0, _libDiceRoller2['default'])(this.charges);
    if (this.startIdentified) this.identify();
    this.glyph = new _glyph2['default'](opts.glyph.key, opts.glyph.fg);
    this.generateBUC(opts.bucProb);
    if (!this.material) {
      (0, _libLogger2['default'])('Item', this.getType() + ' has no material set.');
    }
  }

  _createClass(Item, [{
    key: 'isIdentified',
    value: function isIdentified() {
      var myType = this.getParentType();
      return _initGamestate2['default'].identification[myType];
    }
  }, {
    key: 'identify',
    value: function identify() {
      var myType = this.getParentType();
      _initGamestate2['default'].identification[myType] = this.realName;
    }
  }, {
    key: 'pickFakeName',
    value: function pickFakeName(choices) {
      var myType = this.getParentType();
      if (_initGamestate2['default']._idMap[this.realName]) {
        return _initGamestate2['default']._idMap[this.realName]; // this item has already been generated
      }
      var currentTypes = _lodash2['default'].keys(_initGamestate2['default'].identification[myType]);
      var validTypes = _lodash2['default'].difference(choices, currentTypes);
      var name = _lodash2['default'].sample(validTypes);
      _initGamestate2['default']._idMap[this.realName] = name;
      return name;
    }
  }, {
    key: 'canUse',
    value: function canUse(owner) {
      if (this.manaCost) return owner.mp.gte(this.manaCost);
      if (this.charges) return this.charges > 0;
      return owner.isEquipped(this);
    }
  }, {
    key: 'hasValidAmmo',
    value: function hasValidAmmo(owner) {
      return this.getValidAmmo(owner).length > 0;
    }
  }, {
    key: 'getValidAmmo',
    value: function getValidAmmo(owner) {
      var _this2 = this;

      return _lodash2['default'].filter(owner.inventory, function (item) {
        return item.canUse(owner) && _lodash2['default'].contains(_this2.range.ammo, item.getType());
      });
    }
  }, {
    key: 'use',
    value: function use(owner) {
      var extra = arguments.length <= 1 || arguments[1] === undefined ? { healVal: 1 } : arguments[1];

      if (this.manaCost) owner.mp.sub(this.manaCost);
      if (this.healRoll) owner.heal(extra.healVal);
      if (this.charges) {
        this.charges--;
        if (this.charges <= 0 && this.autoRemove) this.disintegrate(owner);
      }
      if (this.range && this.hasValidAmmo(owner)) {
        this.pewpew(owner);
      }
    }
  }, {
    key: 'pewpew',
    value: function pewpew(owner) {
      for (var i = 0; i < this.range.numShots; i++) {
        var chosenAmmo = _lodash2['default'].sample(this.getValidAmmo(owner));
        chosenAmmo._tempAttackBoost = this.range.damageBoost;
        var attack = _lodash2['default'].sample(chosenAmmo.attacks);
        owner.doAttack(attack, i);
        delete chosenAmmo._tempAttackBoost;
      }
    }
  }, {
    key: 'disintegrate',
    value: function disintegrate(owner) {
      owner.unequip(this);
      owner.dropItem(this);
      _initGamestate2['default'].world.removeItem(this);
      _displayMessageHandler2['default'].add({ message: this.name + ' crumbled to dust.', type: _displayMessageHandler.MessageTypes.ITEM });
    }
  }, {
    key: 'isCursed',
    value: function isCursed() {
      return this.bucName === 'cursed';
    }
  }, {
    key: 'curse',
    value: function curse() {
      this.bucName = 'cursed';
      this.setBUC();
    }
  }, {
    key: 'uncurse',
    value: function uncurse() {
      this.bucName = 'uncursed';
      this.setBUC();
    }
  }, {
    key: 'bless',
    value: function bless() {
      this.bucName = 'blessed';
      this.setBUC();
    }
  }, {
    key: 'setBUC',
    value: function setBUC() {
      var hash = { cursed: -1, uncursed: 1, blessed: 2 };
      this.buc = hash[this.bucName];
    }
  }, {
    key: 'generateBUC',
    value: function generateBUC() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? { cursed: 5, blessed: 5, uncursed: 90 } : arguments[0];

      if (!this.bucName) {
        var _status = _rotJs2['default'].RNG.getWeightedValue(opts);
        this.bucName = _status;
      }
      this.setBUC();
    }
  }, {
    key: 'value',
    value: function value() {
      var atkValue = _lodash2['default'].reduce(this.attacks, function (prev, cur) {
        return prev + cur.value();
      }, 0);
      return this.buc * (100 - this.rarity) + this.enchantment * 5 + atkValue;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var me = _lodash2['default'].omit(this, ['bucProb', 'startIdentified', '_tempAttackBoost', 'symbol']);
      return JSON.stringify(me);
    }
  }]);

  return Item;
})(_abstract2['default']);

exports.Item = Item;

},{"../display/message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../lib/valid-colors":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/valid-colors.js","./abstract":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/abstract.js","./glyph":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/glyph.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/monster.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _character = require('./character');

var _character2 = _interopRequireDefault(_character);

var _constantsFactions = require('../constants/factions');

var _constantsFactions2 = _interopRequireDefault(_constantsFactions);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var Monster = (function (_Character) {
  _inherits(Monster, _Character);

  function Monster(x, y, z, opts) {
    var _factions;

    _classCallCheck(this, Monster);

    opts.stats.profession = 'Monster';
    opts.attributes = _lodash2['default'].extend({}, _constantsSettings2['default'].game.defaultStats.monster, opts.attributes);
    _get(Object.getPrototypeOf(Monster.prototype), 'constructor', this).call(this, opts.glyph, x, y, z, opts);
    this.difficulty = opts.difficulty;
    this.antiFactions.push(_constantsFactions2['default'].PLAYER);
    if (opts.addFactions) (_factions = this.factions).push.apply(_factions, _toConsumableArray(opts.addFactions));
    if (opts.startingEquipment) this.loadStartingEquipment(opts.startingEquipment);
    if (opts.important) this.important = true;

    _initGamestate2['default'].monsters.push(this);
  }

  _createClass(Monster, [{
    key: 'arePlayersAPossibility',
    value: function arePlayersAPossibility() {
      var minZ = _lodash2['default'].min(_initGamestate2['default'].players, 'z').z;
      return minZ <= this.z;
    }
  }, {
    key: 'act',
    value: function act() {
      if (!this.arePlayersAPossibility()) {
        return this.removeSelf() && this.cleanUp();
      }
      _get(Object.getPrototypeOf(Monster.prototype), 'act', this).call(this);
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      _get(Object.getPrototypeOf(Monster.prototype), 'cleanUp', this).call(this);
      this._attackedBy = null;
      this.target = null;
      this._current = null;
    }
  }, {
    key: 'removeSelf',
    value: function removeSelf() {
      _get(Object.getPrototypeOf(Monster.prototype), 'removeSelf', this).call(this);
      _initGamestate2['default'].monsters = _lodash2['default'].without(_initGamestate2['default'].monsters, this);
      this.cleanUp();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var base = JSON.parse(_get(Object.getPrototypeOf(Monster.prototype), 'toJSON', this).call(this));
      var me = _lodash2['default'].omit(base, 'target');
      return JSON.stringify(me);
    }
  }]);

  return Monster;
})(_character2['default']);

exports['default'] = Monster;
module.exports = exports['default'];

},{"../constants/factions":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/factions.js","../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","./character":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/character.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/player.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _character = require('./character');

var _character2 = _interopRequireDefault(_character);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _worldgenMonsterSpawner = require('../worldgen/monster-spawner');

var _worldgenMonsterSpawner2 = _interopRequireDefault(_worldgenMonsterSpawner);

var _contentBehaviors_all = require('../content/behaviors/_all');

var Behaviors = _interopRequireWildcard(_contentBehaviors_all);

var _constantsFactions = require('../constants/factions');

var _constantsFactions2 = _interopRequireDefault(_constantsFactions);

var _constantsGlyphs = require('../constants/glyphs');

var Player = (function (_Character) {
  _inherits(Player, _Character);

  function Player(x, y, z) {
    var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

    _classCallCheck(this, Player);

    opts.stats = { behaviors: [Behaviors.Attacks(), Behaviors.DropsGold('0d0'), Behaviors.HealsBelowPercent(50), Behaviors.Wanders(), Behaviors.AlertsOnStep()] };
    _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, { key: _constantsGlyphs.Entities.Player }, x, y, z, opts);
    this.factions.push(_constantsFactions2['default'].PLAYER);
    this.antiFactions.push(_constantsFactions2['default'].MONSTER);
    this.spawnSteps = _constantsSettings2['default'].game.spawnSteps; // spawn creatures every 100 steps
    this.totalXpEarned = 0;
    this.totalKpEarned = 0;
    this.conquest = {};

    this.name = _lodash2['default'].trunc(this.name, { length: _constantsSettings2['default'].game.nameLength, omission: '' });
    this.brokenConduct.stubborn = false;
  }

  _createClass(Player, [{
    key: 'getSpawnSteps',
    value: function getSpawnSteps() {
      return this.getStat('spawnSteps');
    }
  }, {
    key: 'gainXp',
    value: function gainXp(xp) {
      _get(Object.getPrototypeOf(Player.prototype), 'gainXp', this).call(this, xp);
      this.totalXpEarned += xp;
    }
  }, {
    key: 'kill',
    value: function kill(dead) {
      _get(Object.getPrototypeOf(Player.prototype), 'kill', this).call(this, dead);
      this.totalKpEarned += ~ ~(dead.difficulty * Math.min(dead.killXp / _constantsSettings2['default'].game.killXpDivisor, 1));
      if (!this.conquest[dead.name]) this.conquest[dead.name] = 0;
      this.conquest[dead.name]++;

      // probably refactor this into a lose/gainAlign and some constants for common occurrences
      if (dead.hasFaction(_constantsFactions2['default'].PLAYER)) {
        this.align -= 50;
      }
    }
  }, {
    key: 'act',
    value: function act() {
      if (_initGamestate2['default'].game.checkWin()) return;

      var engine = _initGamestate2['default'].game.engine;
      engine.lock();

      var livingPlayers = _lodash2['default'].reject(_initGamestate2['default'].players, function (player) {
        return player.hp.atMin();
      });

      if (!_initGamestate2['default'].manualMove) {
        _get(Object.getPrototypeOf(Player.prototype), 'act', this).call(this);
        setTimeout(function () {
          engine.unlock();
        }, _constantsSettings2['default'].game.turnDelay / livingPlayers.length);
      }

      this.rebuildPathingMap();

      if (this.currentTurn % this.getSpawnSteps() === 0) {
        this.spawnMonster();
      }

      // redraw counter, so we don't redraw once per player turn, just once for every player turn
      _initGamestate2['default'].playerTurnsTaken++;

      if (_initGamestate2['default'].playerTurnsTaken >= _initGamestate2['default'].livingPlayers) {
        _initGamestate2['default'].game.refresh();
        _initGamestate2['default'].emit('redraw');

        _initGamestate2['default'].playerTurnsTaken = 0;
      }
    }
  }, {
    key: 'rebuildPathingMap',
    value: function rebuildPathingMap() {
      var _this = this;

      var canPass = function canPass(x, y) {
        var entity = _initGamestate2['default'].world.getEntity(x, y, _this.z);
        var isAttackable = entity && _this.canAttack(entity);
        var isMe = _this.x === x && _this.y === y;
        return _initGamestate2['default'].world.isTilePassable(x, y, _this.z) || isMe || isAttackable;
      };

      this._path = new _rotJs2['default'].Path.Dijkstra(this.x, this.y, canPass, { topology: 8 });
    }
  }, {
    key: 'die',
    value: function die(killer) {
      _get(Object.getPrototypeOf(Player.prototype), 'die', this).call(this, killer);

      _initGamestate2['default'].emit('redraw');
      _initGamestate2['default'].emit('die');
      _initGamestate2['default'].livingPlayers--;

      if (_lodash2['default'].every(_initGamestate2['default'].players, function (player) {
        return player.hp.atMin();
      })) {
        _initGamestate2['default'].game.gameOver();
        _initGamestate2['default'].game.engine.lock();
      }
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      _get(Object.getPrototypeOf(Player.prototype), 'cleanUp', this).call(this);
      this._path = null;
    }
  }, {
    key: 'spawnMonster',
    value: function spawnMonster() {
      _worldgenMonsterSpawner2['default'].spawn(this);
    }
  }, {
    key: 'descend',
    value: function descend() {
      if (_initGamestate2['default'].currentFloor + 1 === _initGamestate2['default'].world.depth) return;
      var newFloor = _initGamestate2['default'].currentFloor = _initGamestate2['default'].currentFloor + 1;
      var stairs = _initGamestate2['default'].world.stairs[newFloor].up;

      _lodash2['default'].each(_initGamestate2['default'].players, function (player) {
        if (player.hp.atMin()) return;
        _initGamestate2['default'].world.moveEntity(player, stairs[0], stairs[1], newFloor);
        player.stepRandomly();
      });

      _initGamestate2['default'].world.descend();
      _initGamestate2['default'].emit('descend');
    }
  }, {
    key: 'ascend',
    value: function ascend() {
      _initGamestate2['default'].currentFloor--;
    }
  }, {
    key: 'getScore',
    value: function getScore() {
      return this.currentTurn + this.gold + this.totalXpEarned;
    }
  }]);

  return Player;
})(_character2['default']);

exports['default'] = Player;
module.exports = exports['default'];

},{"../constants/factions":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/factions.js","../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../content/behaviors/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/behaviors/_all.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../worldgen/monster-spawner":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js","./character":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/character.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/profession.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libValueAssign = require('../lib/value-assign');

var _libValueAssign2 = _interopRequireDefault(_libValueAssign);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var Profession = (function () {
  function Profession() {
    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Profession);

    config = _lodash2['default'].extend({}, _lodash2['default'].cloneDeep(_constantsSettings2['default'].game.defaultStats.profession), config);
    this.config = config;
    _lodash2['default'].extend(this, config, _libValueAssign2['default']);
    config.addFactions.push(this.constructor.name);
    this.level = 1;
    this.title = this.titles[0];
  }

  _createClass(Profession, [{
    key: 'levelup',
    value: function levelup() {
      var _this = this;

      this.level++;
      if (this.titles[this.level - 1]) {
        this.title = this.titles[this.level - 1];
      }
      (0, _lodash2['default'])(this.config).keys().reject(function (key) {
        return _lodash2['default'].isObject(_this.config[key]);
      }).value().forEach(function (key) {
        var val = (0, _libValueAssign2['default'])(null, _this.config[key]);
        _this[key] += val;
      });
    }
  }]);

  return Profession;
})();

exports['default'] = Profession;
module.exports = exports['default'];

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../lib/value-assign":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/value-assign.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/race.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libValueAssign = require('../lib/value-assign');

var _libValueAssign2 = _interopRequireDefault(_libValueAssign);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var Race = (function () {
  function Race() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Race);

    this.slots = _lodash2['default'].extend({}, _constantsSettings2['default'].game.defaultStats.equipmentSlots, opts.slots);
    _lodash2['default'].extend(this, _lodash2['default'].cloneDeep(_constantsSettings2['default'].game.defaultStats.race), opts.stats, _libValueAssign2['default']);
    this.addFactions.push(this.constructor.name);
  }

  _createClass(Race, [{
    key: 'canEquip',
    value: function canEquip(owner, item) {
      if (!item) {
        (0, _libLogger2['default'])('Race', 'Invalid item');
      }
      var slot = item.getParentType();
      var slotsTaken = owner.slotsTaken(slot);
      var totalSlots = this.slots[slot];
      var itemSlots = item.slotsTaken;
      return itemSlots <= totalSlots - slotsTaken;
    }
  }]);

  return Race;
})();

exports['default'] = Race;
module.exports = exports['default'];

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../lib/value-assign":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/value-assign.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/tile.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _entity = require('./entity');

var _entity2 = _interopRequireDefault(_entity);

var _libRotExtensions = require('../lib/rot-extensions');

var Tile = (function (_Entity) {
  _inherits(Tile, _Entity);

  function Tile(key, fg, bg) {
    _classCallCheck(this, Tile);

    _get(Object.getPrototypeOf(Tile.prototype), 'constructor', this).call(this, { key: key, fg: fg, bg: bg });
    this.density = 0;
    this.opacity = 0;
    this.reflect = 0.3;
  }

  _createClass(Tile, [{
    key: 'ceaseExisting',
    value: function ceaseExisting() {
      this.glyph.key = '.';
      this.glyph.fg = '';
      this.glyph.bg = '';
      this.canInteract = undefined;
    }
  }, {
    key: 'getRandomEffect',
    value: function getRandomEffect(effects) {
      return (0, _libRotExtensions.WeightedExtension)(effects).value;
    }
  }]);

  return Tile;
})(_entity2['default']);

exports['default'] = Tile;
module.exports = exports['default'];

},{"../lib/rot-extensions":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/rot-extensions.js","./entity":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/entity.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/trait.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var Trait = (function () {
  function Trait(opts) {
    _classCallCheck(this, Trait);

    _lodash2['default'].extend(this, { level: 1, req: 0 }, opts);
  }

  _createClass(Trait, [{
    key: 'canUse',
    value: function canUse(entity) {
      return entity.level >= this.req;
    }
  }]);

  return Trait;
})();

exports['default'] = Trait;
module.exports = exports['default'];

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var MessageQueue = (function () {
  function MessageQueue() {
    _classCallCheck(this, MessageQueue);
  }

  _createClass(MessageQueue, null, [{
    key: 'add',
    value: function add(messageObj) {

      // attempt to hide messages from enemies that are too far away that interact with stuff, if applicable
      if (messageObj.entity) {
        var isInRange = false;
        _lodash2['default'].each(_initGamestate2['default'].players, function (player) {
          if (player.distBetween(messageObj.entity) <= player.getSight()) isInRange = true;
        });
        if (!isInRange) return;
      }
      _initGamestate2['default'].messages.unshift({ turnsLeft: _constantsSettings2['default'].game.display.turns, message: messageObj.message });
      _initGamestate2['default'].messages.length = _constantsSettings2['default'].game.display.log; // cap the messages off at the last 50
      _initGamestate2['default'].emit('log', messageObj);
    }
  }, {
    key: 'viewAllMessages',
    value: function viewAllMessages() {
      _initGamestate2['default'].messages = (0, _lodash2['default'])(_initGamestate2['default'].messages).compact().each(function (msg) {
        return msg.turnsLeft--;
      }).reject(function (msg) {
        return msg.turnsLeft <= 0;
      }).value();
    }
  }]);

  return MessageQueue;
})();

exports['default'] = MessageQueue;
var MessageTypes = {
  COMBAT: 'Combat',
  CHARACTER: 'Character',
  DUNGEON: 'Dungeon',
  META: 'Meta',
  ITEM: 'Item'
};
exports.MessageTypes = MessageTypes;

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var Screen = (function () {
  function Screen() {
    _classCallCheck(this, Screen);
  }

  _createClass(Screen, null, [{
    key: 'enter',
    value: function enter() {}
  }, {
    key: 'exit',
    value: function exit() {}
  }, {
    key: 'render',
    value: function render() {}
  }, {
    key: 'handleInput',
    value: function handleInput() {}
  }, {
    key: 'drawCenterText',
    value: function drawCenterText(display, y, text) {
      var divisor = arguments.length <= 3 || arguments[3] === undefined ? 2 : arguments[3];
      var xOffset = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];

      var x = xOffset + Math.floor(_constantsSettings2['default'].screen.width / divisor) - Math.floor(text.length / 2);
      display.drawText(x, y, text);
      return { x: x, y: y };
    }
  }, {
    key: 'drawLeftCenterText',
    value: function drawLeftCenterText(display, y, text) {
      return this.drawCenterText(display, y, text, 4);
    }
  }, {
    key: 'drawRightCenterText',
    value: function drawRightCenterText(display, y, text) {
      return this.drawCenterText(display, y, text, 4, _constantsSettings2['default'].screen.width / 2);
    }
  }, {
    key: 'drawLeftText',
    value: function drawLeftText(display, y, text) {
      var xOffset = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

      display.drawText(xOffset, y, text);
    }
  }, {
    key: 'drawLeftTextNoTrim',
    value: function drawLeftTextNoTrim(display, y) {
      var text = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];
      var xOffset = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

      for (var i = 0; i < text.length; i++) {
        display.draw(i + xOffset, y, text[i]);
      }
    }
  }, {
    key: 'padText',
    value: function padText(text, width) {
      return _lodash2['default'].pad(text, width);
    }
  }, {
    key: 'getMainPlayer',
    value: function getMainPlayer() {
      return _lodash2['default'].max(_initGamestate2['default'].players, 'currentTurn');
    }
  }, {
    key: 'changeScreenWithDelay',
    value: function changeScreenWithDelay(newScreen, delay) {
      setTimeout(function () {
        var multiChoice = _initGamestate2['default'].splitScreen ? newScreen.multi : newScreen.single;
        var screen = newScreen.single && newScreen.multi ? multiChoice : newScreen;
        _initGamestate2['default'].game.switchScreen(screen);
      }, delay);
    }
  }]);

  return Screen;
})();

exports.Screen = Screen;

var ScrollingScreen = (function (_Screen) {
  _inherits(ScrollingScreen, _Screen);

  function ScrollingScreen() {
    _classCallCheck(this, ScrollingScreen);

    _get(Object.getPrototypeOf(ScrollingScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  return ScrollingScreen;
})(Screen);

var SingleScrollingScreen = (function (_ScrollingScreen) {
  _inherits(SingleScrollingScreen, _ScrollingScreen);

  function SingleScrollingScreen() {
    _classCallCheck(this, SingleScrollingScreen);

    _get(Object.getPrototypeOf(SingleScrollingScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SingleScrollingScreen, null, [{
    key: 'enter',
    value: function enter() {
      this.currentIndex = 0;
    }
  }, {
    key: 'render',
    value: function render(display) {
      var _this = this;

      display.clear();
      this.drawLeftText(display, 0, this.title);
      this.drawLeftText(display, 1, _lodash2['default'].repeat('-', this.title.length));

      var remainingHeight = _constantsSettings2['default'].screen.height - 3;
      var slice = this.scrollContent.slice(this.currentIndex, remainingHeight + this.currentIndex);
      for (var i = 0; i < remainingHeight; i++) {
        this.drawLeftTextNoTrim(display, i + 2, slice[i]);
      }

      setTimeout(function () {
        if (slice.length < remainingHeight) {
          _this.changeScreenWithDelay(_this.nextScreen, 4000);
        } else {
          _this.currentIndex++;
          _this.render(display);
        }
      }, 2000);
    }
  }]);

  return SingleScrollingScreen;
})(ScrollingScreen);

exports.SingleScrollingScreen = SingleScrollingScreen;

var SplitScrollingScreen = (function (_ScrollingScreen2) {
  _inherits(SplitScrollingScreen, _ScrollingScreen2);

  function SplitScrollingScreen() {
    _classCallCheck(this, SplitScrollingScreen);

    _get(Object.getPrototypeOf(SplitScrollingScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SplitScrollingScreen, null, [{
    key: 'enter',
    value: function enter() {
      this.currentIndices = _lodash2['default'].map(_initGamestate2['default'].players, function () {
        return 0;
      });

      var width = _constantsSettings2['default'].screen.width / 2;
      var height = _initGamestate2['default'].players.length > 2 ? _constantsSettings2['default'].screen.height / 2 : _constantsSettings2['default'].screen.height;

      this.tlCoords = [{ x: 0, y: 0 }, { x: width + 1, y: 0 }, { x: 0, y: height + 1 }, { x: width + 1, y: height + 1 }];
    }
  }, {
    key: 'isDone',
    value: function isDone() {
      return _lodash2['default'].every(this.currentIndices, function (index) {
        return index === true;
      });
    }
  }, {
    key: 'drawBorder',
    value: function drawBorder(display) {

      var middleX = _constantsSettings2['default'].screen.width / 2;
      for (var i = 0; i < _constantsSettings2['default'].screen.height; i++) {
        display.draw(middleX, i, '‖');
      }

      if (_initGamestate2['default'].players.length > 2) {
        var middleY = _constantsSettings2['default'].screen.height / 2;
        for (var i = 0; i < _constantsSettings2['default'].screen.width; i++) {
          display.draw(i, middleY, '=');
        }
      }
    }
  }, {
    key: 'drawList',
    value: function drawList(display, playerIndex) {

      var offset = this.tlCoords[playerIndex];

      this.drawLeftText(display, offset.y, this.title[playerIndex], offset.x);
      this.drawLeftText(display, offset.y + 1, _lodash2['default'].repeat('-', this.title[playerIndex].length), offset.x);

      var remainingHeight = (_initGamestate2['default'].players.length > 2 ? _constantsSettings2['default'].screen.height / 2 : _constantsSettings2['default'].screen.height) - 3;
      var slice = this.scrollContent[playerIndex].slice(this.currentIndices[playerIndex], remainingHeight + this.currentIndices[playerIndex]);
      for (var i = 0; i < remainingHeight; i++) {
        this.drawLeftTextNoTrim(display, offset.y + i + 2, slice[i], offset.x);
      }

      if (slice.length < remainingHeight) this.currentIndices[playerIndex] = true;
    }
  }, {
    key: 'render',
    value: function render(display) {
      var _this2 = this;

      display.clear();

      _lodash2['default'].each(this.currentIndices, function (value, i) {
        _this2.drawList(display, i);
      });

      this.drawBorder(display);

      setTimeout(function () {
        if (_this2.isDone()) {
          _this2.changeScreenWithDelay(_this2.nextScreen, 6000);
        } else {
          _this2.currentIndices = _lodash2['default'].map(_this2.currentIndices, function (index) {
            return index === true ? true : index + 1;
          });
          _this2.render(display);
        }
      }, 2000);
    }
  }]);

  return SplitScrollingScreen;
})(ScrollingScreen);

exports.SplitScrollingScreen = SplitScrollingScreen;

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/conduct.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _screen = require('../screen');

var _respawn = require('./respawn');

var _respawn2 = _interopRequireDefault(_respawn);

var _constantsConducts = require('../../constants/conducts');

var _constantsConducts2 = _interopRequireDefault(_constantsConducts);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var SingleConductScreen = (function (_SingleScrollingScreen) {
  _inherits(SingleConductScreen, _SingleScrollingScreen);

  function SingleConductScreen() {
    _classCallCheck(this, SingleConductScreen);

    _get(Object.getPrototypeOf(SingleConductScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SingleConductScreen, null, [{
    key: 'enter',
    value: function enter() {
      _get(Object.getPrototypeOf(SingleConductScreen), 'enter', this).call(this);
      var target = this.getMainPlayer();
      var sortedConduct = (0, _constantsConducts2['default'])(target);
      this.scrollContent = sortedConduct;
      this.title = target.name + '\'s Traits (' + sortedConduct.length + ')'; // shorten this for splitscreen
      this.nextScreen = _respawn2['default'];
    }

    // static get split() { return SplitConductScreen; }
  }]);

  return SingleConductScreen;
})(_screen.SingleScrollingScreen);

exports.SingleConductScreen = SingleConductScreen;

var SplitConductScreen = (function (_SplitScrollingScreen) {
  _inherits(SplitConductScreen, _SplitScrollingScreen);

  function SplitConductScreen() {
    _classCallCheck(this, SplitConductScreen);

    _get(Object.getPrototypeOf(SplitConductScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SplitConductScreen, null, [{
    key: 'enter',
    value: function enter() {
      var _this = this;

      _get(Object.getPrototypeOf(SplitConductScreen), 'enter', this).call(this);
      this.scrollContent = [];
      this.title = [];

      _lodash2['default'].each(_initGamestate2['default'].players, function (target, i) {
        var sortedConduct = (0, _constantsConducts2['default'])(target);
        _this.scrollContent[i] = sortedConduct;
        _this.title[i] = target.name + '\'s Traits (' + sortedConduct.length + ')'; // shorten this for splitscreen
      });

      this.nextScreen = _respawn2['default'];
    }

    // static get split() { return SingleConductScreen; }
  }]);

  return SplitConductScreen;
})(_screen.SplitScrollingScreen);

exports.SplitConductScreen = SplitConductScreen;

},{"../../constants/conducts":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/conducts.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","./respawn":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/respawn.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/dead.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _screen = require('../screen');

var _vanquished = require('./vanquished');

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _libPageTitle = require('../../lib/page-title');

var _libPageTitle2 = _interopRequireDefault(_libPageTitle);

var DeadScreen = (function (_Screen) {
  _inherits(DeadScreen, _Screen);

  function DeadScreen() {
    _classCallCheck(this, DeadScreen);

    _get(Object.getPrototypeOf(DeadScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DeadScreen, null, [{
    key: 'enter',
    value: function enter() {
      _initGamestate2['default'].game.engine.lock();
      this.changeScreenWithDelay({ single: _vanquished.SingleVanquishedScreen, multi: _vanquished.SplitVanquishedScreen }, 5000);
    }
  }, {
    key: 'render',
    value: function render(display) {
      var TOMBSTONE_WIDTH = 26;
      var goodbyes = ['Goodbye', 'Sayonara', 'Ciao', 'Adios', 'Toodles', 'Ta ta', 'Farewell', 'Bye-bye', 'Bye', 'So long', 'RIP'];

      var latestDeath = this.getMainPlayer();
      var score = latestDeath.getScore();
      var floor = _initGamestate2['default'].currentFloor + 1;
      var paddedName = this.padText(latestDeath.name, TOMBSTONE_WIDTH);
      var paddedScore = this.padText('Score: ' + score, TOMBSTONE_WIDTH);
      var paddedKiller = this.padText(latestDeath.killerName, TOMBSTONE_WIDTH);

      var goodbye = _lodash2['default'].sample(goodbyes);
      var mapName = _initGamestate2['default'].world.tiles[_initGamestate2['default'].currentFloor].mapName;
      var i = 3;

      this.drawCenterText(display, i++, '------------------');
      this.drawCenterText(display, i++, '/                  \\');
      this.drawCenterText(display, i++, '/        REST        \\');
      this.drawCenterText(display, i++, '/          IN          \\');
      this.drawCenterText(display, i++, '/         POINTS         \\');
      this.drawCenterText(display, i++, '/                          \\');
      this.drawCenterText(display, i++, '|' + paddedName + '|');
      this.drawCenterText(display, i++, '|' + paddedScore + '|');
      this.drawCenterText(display, i++, '|                          |');
      this.drawCenterText(display, i++, '|         slain by         |');
      this.drawCenterText(display, i++, '|' + paddedKiller + '|');
      this.drawCenterText(display, i++, '|                          |');
      this.drawCenterText(display, i++, '&  * |      *                   $     *');
      this.drawCenterText(display, i++, '__\\\\)/_]_|____\\\\(\\\\_____//\\/_______\\{/____|____');

      i++;

      this.drawLeftText(display, i++, goodbye + ', ' + latestDeath.name + ' the ' + latestDeath.getAlign() + ' ' + latestDeath.gender + ' ' + latestDeath.race + ' ' + latestDeath.profession + '...');
      this.drawLeftText(display, i++, 'You were level ' + latestDeath.level + ' after earning ' + latestDeath.totalXpEarned + ' experience.');
      this.drawLeftText(display, i++, 'You died in ' + mapName + ' on dungeon level ' + floor + '.');
      this.drawLeftText(display, i++, 'You scored ' + score + ' points and ' + latestDeath.gold + ' gold over ' + latestDeath.currentTurn + ' steps.');
      this.drawLeftText(display, i++, 'You earned ' + _initGamestate2['default'].spEarned + ' SP and ' + _initGamestate2['default'].kpEarned + ' KP.');

      (0, _libPageTitle2['default'])('Dead');
    }
  }]);

  return DeadScreen;
})(_screen.Screen);

exports['default'] = DeadScreen;
module.exports = exports['default'];

},{"../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/page-title":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/page-title.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","./vanquished":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/vanquished.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/game.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x7, _x8, _x9) { var _again = true; _function: while (_again) { var object = _x7, property = _x8, receiver = _x9; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x7 = parent; _x8 = property; _x9 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _screen = require('../screen');

var _messageHandler = require('../message-handler');

var _messageHandler2 = _interopRequireDefault(_messageHandler);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _constantsSettings = require('../../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _libPageTitle = require('../../lib/page-title');

var _libPageTitle2 = _interopRequireDefault(_libPageTitle);

var GameScreen = (function (_Screen) {
  _inherits(GameScreen, _Screen);

  function GameScreen() {
    _classCallCheck(this, GameScreen);

    _get(Object.getPrototypeOf(GameScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(GameScreen, null, [{
    key: 'getScreenOffsets',
    value: function getScreenOffsets() {
      var centerPoint = arguments.length <= 0 || arguments[0] === undefined ? _initGamestate2['default'].players[0] : arguments[0];
      var width = arguments.length <= 1 || arguments[1] === undefined ? _constantsSettings2['default'].screen.width : arguments[1];
      var height = arguments.length <= 2 || arguments[2] === undefined ? _constantsSettings2['default'].screen.height : arguments[2];

      var topLeftX = Math.max(0, centerPoint.x - Math.round(width / 2));
      topLeftX = Math.min(topLeftX, _initGamestate2['default'].world.width - width);

      var topLeftY = Math.max(0, centerPoint.y - Math.round(height / 2));
      topLeftY = Math.min(topLeftY, _initGamestate2['default'].world.height - height);

      return {
        x: topLeftX,
        y: topLeftY
      };
    }
  }, {
    key: 'drawTiles',
    value: function drawTiles(display, centerPoint) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? { width: _constantsSettings2['default'].screen.width, height: _constantsSettings2['default'].screen.height, offset: this.getScreenOffsets(), gameOffset: { x: 0, y: 0 } } : arguments[2];
      var width = options.width;
      var height = options.height;
      var offset = options.offset;
      var gameOffset = options.gameOffset;

      var visible = [];

      var world = _initGamestate2['default'].world;
      var zLevel = centerPoint.z;

      var isDead = centerPoint.hp.atMin();

      var fov = world.fov[zLevel];
      fov.compute(centerPoint.x, centerPoint.y, isDead ? 1 : centerPoint.getSight(), function (x, y) {
        if (!visible[x]) visible[x] = [];
        visible[x][y] = true;
        world.setExplored(x, y, zLevel, true);
      });

      var cache = {};
      _lodash2['default'].each(['Telepathy', 'Clairvoyance', 'Warning'], function (trait) {
        return cache[trait] = centerPoint.getTraitValue(trait);
      });

      var projectileCache = {};
      _lodash2['default'].each(_initGamestate2['default'].projectiles, function (proj) {
        return projectileCache[proj.x + ',' + proj.y] = proj;
      });

      var lightingCache = {};

      var lights = _initGamestate2['default'].world.lighting[zLevel];
      if (lights && lights.length > 0) {
        (function () {
          var reflectivity = function reflectivity(x, y) {
            return _initGamestate2['default'].world.getTile(x, y, zLevel).reflect;
          };
          var lighting = new _rotJs2['default'].Lighting(reflectivity, { range: 5, passes: 2 });
          lighting.setFOV(fov);

          _lodash2['default'].each(lights, function (light) {
            return lighting.setLight(light.x, light.y, light._lightColor);
          });

          var lightCallback = function lightCallback(x, y, color) {
            return lightingCache[x + ',' + y] = color;
          };
          lighting.compute(lightCallback);
        })();
      }

      var isVisible = function isVisible(x, y) {
        return visible[x] && visible[x][y];
      };

      var hasValid = function hasValid(trait, x, y) {
        return !isDead && cache[trait] && centerPoint.distBetweenXY(x, y) <= cache[trait];
      };

      // white (doesn't count), green, yellow, orange, red, purple
      var warningColors = ['#fff', '#0f0', '#ff0', '#ffa500', '#f00', '#ff0'];
      var ambientLight = [30, 30, 30];

      for (var x = offset.x; x < offset.x + width; x++) {
        for (var y = offset.y; y < offset.y + height; y++) {
          var hasTelepathy = hasValid('Telepathy', x, y);
          var hasClairvoyance = hasValid('Clairvoyance', x, y);
          var hasWarning = hasValid('Warning', x, y);
          var hasSeen = _initGamestate2['default'].world.isExplored(x, y, centerPoint.z);
          if (!hasSeen && !_initGamestate2['default'].renderAll && !hasTelepathy && !hasClairvoyance && !hasWarning) continue;

          var tile = world.getTile(x, y, zLevel);
          if (!tile) continue; // no out of bounds drawing

          var glyph = { key: null };
          var foreground = null;
          var background = _rotJs2['default'].Color.fromString('#000');

          var baseIsVisible = isVisible(x, y) || hasClairvoyance;

          if (baseIsVisible || hasSeen) {
            glyph = tile.glyph;
            foreground = glyph.fg;
            if (glyph.bg) background = _rotJs2['default'].Color.fromString(glyph.bg);
          }

          if (baseIsVisible) {
            var items = world.getItemsAt(x, y, zLevel);
            if (items && items.length > 0) {
              glyph = items[items.length - 1].glyph;
              foreground = glyph.fg;
            }
          }

          if (baseIsVisible || hasTelepathy || hasWarning) {
            var entity = world.getEntity(x, y, zLevel);
            if (entity) {

              if (baseIsVisible || hasTelepathy) {
                glyph = entity.glyph;
                foreground = glyph.fg;
              } else if (hasWarning && centerPoint.canAttack(entity)) {
                var difficulty = centerPoint.calcDifficulty(entity);
                glyph = { key: difficulty };
                foreground = warningColors[difficulty];
              }
            }
          }

          var projectile = projectileCache[x + ',' + y];
          if (baseIsVisible && projectile) {
            glyph = projectile.glyph;
            foreground = glyph.fg;
          }

          // visible things have a black background
          if (baseIsVisible) {
            background = _rotJs2['default'].Color.fromString('#333');
          }

          var light = lightingCache[x + ',' + y];
          if (baseIsVisible && light) {
            background = _rotJs2['default'].Color.add(light, ambientLight);
          }

          // prevent taking color away from things that have it
          if (!baseIsVisible && !foreground) {
            foreground = '#555';
          }

          display.draw(gameOffset.x + x - offset.x, gameOffset.y + y - offset.y, glyph.key, foreground, _rotJs2['default'].Color.toRGB(background));
        }
      }

      cache = null;
      projectileCache = null;
      lightingCache = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var livingPlayers = _lodash2['default'].reject(_initGamestate2['default'].players, function (player) {
        return player.hp.atMin();
      });
      var playerString = _initGamestate2['default'].players.length > 1 ? ' (' + livingPlayers.length + '/' + _initGamestate2['default'].players.length + ')' : '';
      (0, _libPageTitle2['default'])('Dungeoneering' + playerString);
    }
  }, {
    key: 'redrawHp',
    value: function redrawHp(display, foreground, player, string) {
      var x = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];
      var y = arguments.length <= 5 || arguments[5] === undefined ? _constantsSettings2['default'].screen.height - 1 : arguments[5];

      var str = '' + player.hp.cur;
      var index = string.indexOf('HP:' + player.hp.cur) + 3;
      var length = str.length;
      var strIdx = 0;
      for (var i = index; i < index + length; i++) {
        display.draw(x + i, y, str[strIdx], foreground);
      }
    }
  }]);

  return GameScreen;
})(_screen.Screen);

exports.GameScreen = GameScreen;

var SingleGameScreen = (function (_GameScreen) {
  _inherits(SingleGameScreen, _GameScreen);

  function SingleGameScreen() {
    _classCallCheck(this, SingleGameScreen);

    _get(Object.getPrototypeOf(SingleGameScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SingleGameScreen, null, [{
    key: 'drawMessages',
    value: function drawMessages(display, player) {

      if (!_initGamestate2['default'].messages) return;

      for (var y = 0; y < 3; y++) {

        for (var x = 0; x < _constantsSettings2['default'].screen.width; x++) {
          display.drawText(x, y, ' ');
        }
      }

      for (var y = 0; y < 3; y++) {
        var messageObj = _initGamestate2['default'].messages[y];
        if (!messageObj || messageObj.turn < player.currentTurn - 4) continue;
        display.drawText(0, y, messageObj.message);
      }

      _messageHandler2['default'].viewAllMessages();
    }
  }, {
    key: 'drawHUD',
    value: function drawHUD(display, player) {
      var tag = player.name + ' the ' + player.getAlign() + ' ' + player.gender + ' level ' + player.level + ' ' + player.race + ' ' + player.professionInst.title + ' (' + player.xp.cur + '/' + player.xp.max + ')';
      var stats = 'STR:' + player.getStr() + ' DEX:' + player.getDex() + ' CON:' + player.getCon() + ' INT:' + player.getInt() + ' WIS:' + player.getWis() + ' CHA:' + player.getCha() + ' AC:' + player.getAC();
      var miscInfo = 'Floor:' + (1 + _initGamestate2['default'].currentFloor) + ' (' + _initGamestate2['default'].world.tiles[_initGamestate2['default'].currentFloor].shortMapName + ') $:' + player.gold + ' HP:' + player.hp.cur + '/' + player.hp.max + ' MP:' + player.mp.cur + '/' + player.mp.max + ' Turn:' + player.currentTurn;

      for (var y = 1; y <= 3; y++) {
        for (var x = 0; x < _constantsSettings2['default'].screen.width; x++) {
          display.drawText(x, _constantsSettings2['default'].screen.height - y, ' ');
        }
      }

      display.drawText(0, _constantsSettings2['default'].screen.height - 3, tag);
      display.drawText(0, _constantsSettings2['default'].screen.height - 2, stats);
      display.drawText(0, _constantsSettings2['default'].screen.height - 1, miscInfo);

      if (player.hp.ltePercent(20)) {
        this.redrawHp(display, '#7f0000', player, miscInfo);
      } else if (player.hp.ltePercent(50)) {
        this.redrawHp(display, '#ffd700', player, miscInfo);
      }
    }
  }, {
    key: 'render',
    value: function render(display) {
      _get(Object.getPrototypeOf(SingleGameScreen), 'render', this).call(this, display);
      var player = _initGamestate2['default'].players[0];
      this.drawTiles(display, player);
      this.drawHUD(display, player);
      this.drawMessages(display, player);
    }
  }, {
    key: 'split',
    get: function get() {
      return SplitGameScreen;
    }
  }]);

  return SingleGameScreen;
})(GameScreen);

exports.SingleGameScreen = SingleGameScreen;

var SplitGameScreen = (function (_GameScreen2) {
  _inherits(SplitGameScreen, _GameScreen2);

  function SplitGameScreen() {
    _classCallCheck(this, SplitGameScreen);

    _get(Object.getPrototypeOf(SplitGameScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SplitGameScreen, null, [{
    key: 'enter',
    value: function enter() {
      this.width = _initGamestate2['default'].players.length > 2 ? _constantsSettings2['default'].screen.width / 2 : _constantsSettings2['default'].screen.width;
      this.height = _constantsSettings2['default'].screen.height / 2;

      this.tlCoords = [{ x: 0, y: 0 }, { x: 0, y: this.height + 1 }, { x: this.width + 1, y: 0 }, { x: this.width + 1, y: this.height + 1 }];

      this.hudCoords = [{ x: 0, y: this.height - 1 }, { x: 0, y: this.height * 2 - 1 }, { x: this.width + 1, y: this.height - 1 }, { x: this.width + 1, y: this.height * 2 - 1 }];
    }
  }, {
    key: 'render',
    value: function render(display) {
      var _this = this;

      _get(Object.getPrototypeOf(SplitGameScreen), 'render', this).call(this, display);

      _lodash2['default'].each(_initGamestate2['default'].players, function (player, i) {
        _this.drawTiles(display, player, { width: _this.width, height: _this.height, offset: _this.getScreenOffsets(player, _this.width, _this.height), gameOffset: _this.tlCoords[i] });
        _this.drawHUDs(display, player, _this.hudCoords[i]);
      });

      this.drawBorder(display);
    }
  }, {
    key: 'drawBorder',
    value: function drawBorder(display) {

      var middleY = _constantsSettings2['default'].screen.height / 2;
      for (var i = 0; i < _constantsSettings2['default'].screen.width; i++) {
        display.draw(i, middleY, '=');
      }

      if (_initGamestate2['default'].players.length > 2) {
        var middleX = _constantsSettings2['default'].screen.width / 2;
        for (var i = 0; i < _constantsSettings2['default'].screen.height; i++) {
          display.draw(middleX, i, '‖');
        }
      }

      this.drawLeftCenterText(display, middleY, 'Floor:' + (_initGamestate2['default'].currentFloor + 1) + ' (' + _initGamestate2['default'].world.tiles[_initGamestate2['default'].currentFloor].shortMapName + ')');
      this.drawRightCenterText(display, middleY, 'Turns:' + _lodash2['default'].max(_initGamestate2['default'].players, 'currentTurn').currentTurn);
    }
  }, {
    key: 'stripTo3',
    value: function stripTo3(string) {
      return string.substring(0, 3);
    }
  }, {
    key: 'drawHUDs',
    value: function drawHUDs(display, player, hudCoords) {
      var x = hudCoords.x;
      var y = hudCoords.y;

      var topString = player.name + ' ' + this.stripTo3(player.getAlign()) + ' ' + this.stripTo3(player.gender) + ' ' + this.stripTo3(player.race) + ' ' + this.stripTo3(player.profession);
      var bottomString = 'Lv.' + player.level + ' (' + player.xp.cur + '/' + player.xp.max + ') HP:' + player.hp.cur + '/' + player.hp.max + ' MP:' + player.mp.cur + '/' + player.mp.max;

      display.drawText(x, y - 1, topString);
      display.drawText(x, y, bottomString);

      if (player.hp.ltePercent(20)) {
        this.redrawHp(display, '#7f0000', player, bottomString, x, y);
      } else if (player.hp.ltePercent(50)) {
        this.redrawHp(display, '#ffd700', player, bottomString, x, y);
      }
    }
  }, {
    key: 'split',
    get: function get() {
      return SingleGameScreen;
    }
  }]);

  return SplitGameScreen;
})(GameScreen);

exports.SplitGameScreen = SplitGameScreen;

},{"../../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/page-title":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/page-title.js","../message-handler":"/home/seiyria/projects/Roguathia/src/js/rogue/display/message-handler.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/load.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _screen = require('../screen');

var LoadScreen = (function (_Screen) {
  _inherits(LoadScreen, _Screen);

  function LoadScreen() {
    _classCallCheck(this, LoadScreen);

    _get(Object.getPrototypeOf(LoadScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(LoadScreen, null, [{
    key: 'enter',
    value: function enter(display) {
      var _this = this;

      this.flicker = 0;

      var dotStatus = ['.  ', '.. ', '...', ' ..', '  .'];

      this.interval = setInterval(function () {
        display.clear();
        _this.render(display);

        _this.drawCenterText(display, 12, 'Generating ' + dotStatus[_this.flicker]);

        _this.flicker = ++_this.flicker % dotStatus.length;
      }, 500);
    }
  }, {
    key: 'exit',
    value: function exit() {
      window.clearInterval(this.interval);
    }
  }, {
    key: 'render',
    value: function render(display) {
      this.drawCenterText(display, 11, '-Welcome to Roguathia-');
    }
  }]);

  return LoadScreen;
})(_screen.Screen);

exports.LoadScreen = LoadScreen;

},{"../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/newgame.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _screen = require('../screen');

var _initGameStarter = require('../../init/game-starter');

var _initGameStarter2 = _interopRequireDefault(_initGameStarter);

// this exists solely to transition and start a new game. I'm bad. :(

var NewGameScreen = (function (_Screen) {
  _inherits(NewGameScreen, _Screen);

  function NewGameScreen() {
    _classCallCheck(this, NewGameScreen);

    _get(Object.getPrototypeOf(NewGameScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(NewGameScreen, null, [{
    key: 'enter',
    value: function enter() {
      (0, _initGameStarter2['default'])();
    }
  }]);

  return NewGameScreen;
})(_screen.Screen);

exports['default'] = NewGameScreen;
module.exports = exports['default'];

},{"../../init/game-starter":"/home/seiyria/projects/Roguathia/src/js/rogue/init/game-starter.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/respawn.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _constantsSettings = require('../../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _screen = require('../screen');

var _newgame = require('./newgame');

var _newgame2 = _interopRequireDefault(_newgame);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _libPageTitle = require('../../lib/page-title');

var _libPageTitle2 = _interopRequireDefault(_libPageTitle);

var RespawnScreen = (function (_Screen) {
  _inherits(RespawnScreen, _Screen);

  function RespawnScreen() {
    _classCallCheck(this, RespawnScreen);

    _get(Object.getPrototypeOf(RespawnScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(RespawnScreen, null, [{
    key: 'enter',
    value: function enter() {
      // would be nice if it redrew properly without needing duplicates in the list
      this.phases = ['/', '/', '|', '|', '\\', '\\', '-', '-'];
      this.stars = [];
      this.timer = 15;

      // one tick per star move, 4 ticks = new star and timer countdown
      this.ticks = this.timer * this.phases.length;
    }
  }, {
    key: 'addStar',
    value: function addStar(x, y, length) {
      var _this = this;

      var minX = x - 1;
      var maxX = x + length + 1;
      var minY = y - 1;
      var maxY = y + 1;

      var inBadZone = true;
      var star = null;

      var distBetween = function distBetween(me, target) {
        var a = target.x - me.x;
        var b = target.y - me.y;
        return Math.sqrt(a * a + b * b);
      };

      var _loop = function () {
        var myX = _rotJs2['default'].RNG.getUniformInt(0, _constantsSettings2['default'].screen.width);
        var myY = _rotJs2['default'].RNG.getUniformInt(0, _constantsSettings2['default'].screen.height);
        var me = { x: myX, y: myY };

        if (_lodash2['default'].filter(_this.stars, function (star) {
          return distBetween(me, star) < 4;
        }).length !== 0 || myX >= minX && myX <= maxX && myY >= minY && myY <= maxY) {
          return 'continue';
        }

        inBadZone = false;
        star = { x: myX, y: myY, phase: _rotJs2['default'].RNG.getUniformInt(0, _this.phases.length - 1) };
      };

      while (inBadZone) {
        var _ret = _loop();

        if (_ret === 'continue') continue;
      }

      this.stars.push(star);
    }
  }, {
    key: 'drawStars',
    value: function drawStars(display) {
      var _this2 = this;

      _lodash2['default'].each(this.stars, function (star) {
        display.draw(star.x, star.y, _this2.phases[star.phase]);
        star.phase++;
        if (star.phase > _this2.phases.length - 1) {
          star.phase = 0;
        }
      });
    }
  }, {
    key: 'render',
    value: function render(display) {
      var _this3 = this;

      display.clear();
      var text = 'Respawning in ' + this.timer + ' seconds...';

      var _drawCenterText = this.drawCenterText(display, 11, text);

      var x = _drawCenterText.x;
      var y = _drawCenterText.y;

      (0, _libPageTitle2['default'])('Respawning (' + this.timer + 's)');

      if (this.ticks % this.phases.length === 0) {
        this.addStar(x, y, text.length);
        this.timer--;
      }

      this.ticks--;

      if (this.ticks <= 0) {
        _initGamestate2['default'].game.safeSwitchScreen(this, _newgame2['default']);
        return;
      }

      this.drawStars(display);
      setTimeout(function () {
        return _this3.render(display);
      }, 1000 / this.phases.length);
    }
  }]);

  return RespawnScreen;
})(_screen.Screen);

exports['default'] = RespawnScreen;
module.exports = exports['default'];

},{"../../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/page-title":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/page-title.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","./newgame":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/newgame.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/vanquished.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _screen = require('../screen');

var _conduct = require('./conduct');

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var SingleVanquishedScreen = (function (_SingleScrollingScreen) {
  _inherits(SingleVanquishedScreen, _SingleScrollingScreen);

  function SingleVanquishedScreen() {
    _classCallCheck(this, SingleVanquishedScreen);

    _get(Object.getPrototypeOf(SingleVanquishedScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SingleVanquishedScreen, null, [{
    key: 'enter',
    value: function enter() {
      _get(Object.getPrototypeOf(SingleVanquishedScreen), 'enter', this).call(this);
      var target = this.getMainPlayer();
      var killHash = target.conquest;
      var sortedKills = (0, _lodash2['default'])(killHash).keys().map(function (mon) {
        return { name: mon, num: killHash[mon] };
      }).sortBy('name').value();
      this.scrollContent = _lodash2['default'].map(sortedKills, function (kill) {
        return _lodash2['default'].padLeft(kill.num, 4) + ' ' + kill.name;
      });
      var totalKills = _lodash2['default'].reduce(sortedKills, function (prev, cur) {
        return prev + cur.num;
      }, 0);
      this.title = target.name + '\'s Conquest (' + sortedKills.length + ' types|' + totalKills + ' total)'; // shorten this for splitscreen
      if (!this.scrollContent.length) {
        this.scrollContent = ['No kills.'];
      }
      this.nextScreen = _conduct.SingleConductScreen;
    }

    // static get split() { return SplitVanquishedScreen; }
  }]);

  return SingleVanquishedScreen;
})(_screen.SingleScrollingScreen);

exports.SingleVanquishedScreen = SingleVanquishedScreen;

var SplitVanquishedScreen = (function (_SplitScrollingScreen) {
  _inherits(SplitVanquishedScreen, _SplitScrollingScreen);

  function SplitVanquishedScreen() {
    _classCallCheck(this, SplitVanquishedScreen);

    _get(Object.getPrototypeOf(SplitVanquishedScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(SplitVanquishedScreen, null, [{
    key: 'enter',
    value: function enter() {
      var _this = this;

      _get(Object.getPrototypeOf(SplitVanquishedScreen), 'enter', this).call(this);

      this.scrollContent = [];
      this.title = [];

      _lodash2['default'].each(_initGamestate2['default'].players, function (target, i) {
        var killHash = target.conquest;
        var sortedKills = (0, _lodash2['default'])(killHash).keys().map(function (mon) {
          return { name: mon, num: killHash[mon] };
        }).sortBy('name').value();
        _this.scrollContent[i] = _lodash2['default'].map(sortedKills, function (kill) {
          return _lodash2['default'].padLeft(kill.num, 4) + ' ' + kill.name;
        });
        var totalKills = _lodash2['default'].reduce(sortedKills, function (prev, cur) {
          return prev + cur.num;
        }, 0);
        _this.title[i] = target.name + '\'s Conquest (' + sortedKills.length + ' types|' + totalKills + ' total)'; // shorten this for splitscreen
        if (!_this.scrollContent[i].length) {
          _this.scrollContent[i] = ['No kills.'];
        }
      });

      this.nextScreen = _conduct.SplitConductScreen;
    }

    // static get split() { return SingleVanquishedScreen; }
  }]);

  return SplitVanquishedScreen;
})(_screen.SplitScrollingScreen);

exports.SplitVanquishedScreen = SplitVanquishedScreen;

},{"../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","./conduct":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/conduct.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/win.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _screen = require('../screen');

var _vanquished = require('./vanquished');

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _libPageTitle = require('../../lib/page-title');

var _libPageTitle2 = _interopRequireDefault(_libPageTitle);

var WinScreen = (function (_Screen) {
  _inherits(WinScreen, _Screen);

  function WinScreen() {
    _classCallCheck(this, WinScreen);

    _get(Object.getPrototypeOf(WinScreen.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(WinScreen, null, [{
    key: 'enter',
    value: function enter() {
      _initGamestate2['default'].game.engine.lock();
      this.changeScreenWithDelay({ single: _vanquished.SingleVanquishedScreen, multi: _vanquished.SplitVanquishedScreen }, 5000);
    }
  }, {
    key: 'render',
    value: function render(display) {
      this.drawCenterText(display, 11, 'You have won!');
      this.drawCenterText(display, 12, _initGamestate2['default'].winCondition.message);
      this.drawCenterText(display, 13, 'You earned ' + _initGamestate2['default'].spEarned + ' SP, ' + _initGamestate2['default'].kpEarned + ' KP and ' + _initGamestate2['default'].vpEarned + ' VP.');
      (0, _libPageTitle2['default'])('Victory');
    }
  }]);

  return WinScreen;
})(_screen.Screen);

exports['default'] = WinScreen;
module.exports = exports['default'];

},{"../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../../lib/page-title":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/page-title.js","../screen":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screen.js","./vanquished":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/vanquished.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/debug.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _gamestate = require('./gamestate');

var _gamestate2 = _interopRequireDefault(_gamestate);

window.GameState = _gamestate2['default'];

var debugInitialized = false;

exports['default'] = function () {
  if (debugInitialized) return;
  debugInitialized = true;

  document.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== _rotJs2['default'].VK_SPACE) return;

    _gamestate2['default'].isPaused = !_gamestate2['default'].isPaused;

    if (_gamestate2['default'].isPaused) {
      _gamestate2['default'].game.engine.lock();
    } else {
      _gamestate2['default'].game.engine.unlock();
    }
  });

  document.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== _rotJs2['default'].VK_R) return;

    _gamestate2['default'].renderAll = !_gamestate2['default'].renderAll;
  });

  document.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== _rotJs2['default'].VK_S) return;

    _gamestate2['default'].game.changeSplitScreen();
  });

  document.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== _rotJs2['default'].VK_D) return;

    _gamestate2['default'].players[0].descend();
  });

  document.body.addEventListener('keydown', function (e) {
    if (e.keyCode !== _rotJs2['default'].VK_M) return;

    _gamestate2['default'].manualMove = !_gamestate2['default'].manualMove;
    if (!_gamestate2['default'].manualMove) {
      _gamestate2['default'].game.engine.unlock();
    }
  });

  document.body.addEventListener('keydown', function (e) {
    var _offsets;

    var offsets = (_offsets = {}, _defineProperty(_offsets, _rotJs2['default'].VK_UP, { x: 0, y: -1 }), _defineProperty(_offsets, _rotJs2['default'].VK_DOWN, { x: 0, y: 1 }), _defineProperty(_offsets, _rotJs2['default'].VK_LEFT, { x: -1, y: 0 }), _defineProperty(_offsets, _rotJs2['default'].VK_RIGHT, { x: 1, y: 0 }), _offsets);

    if (!offsets[e.keyCode] || !_gamestate2['default'].manualMove) return;

    var player = _gamestate2['default'].players[0];
    player.moveTo(player.x + offsets[e.keyCode].x, player.y + offsets[e.keyCode].y);
    _gamestate2['default'].game.engine.unlock();
  });
};

module.exports = exports['default'];

},{"./gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/game-starter.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _game = require('./game');

var _game2 = _interopRequireDefault(_game);

var _gamestate = require('./gamestate');

var _gamestate2 = _interopRequireDefault(_gamestate);

var _displayScreensLoad = require('../display/screens/load');

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

exports['default'] = function () {
  Array.prototype.slice.call(document.getElementsByTagName('canvas')).forEach(function (item) {
    item.parentNode.removeChild(item);
  });

  (0, _gamestate.FreshGame)();
  var game = _gamestate2['default'].game = new _game2['default']();
  document.getElementById('game-area').appendChild(game.display.getContainer());
  game.switchScreen(_displayScreensLoad.LoadScreen);

  setTimeout(function () {
    game.setup();
    (0, _debug2['default'])();
  }, 300);
};

module.exports = exports['default'];

},{"../display/screens/load":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/load.js","./debug":"/home/seiyria/projects/Roguathia/src/js/rogue/init/debug.js","./game":"/home/seiyria/projects/Roguathia/src/js/rogue/init/game.js","./gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/game.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _worldgenWorld = require('../worldgen/world');

var _worldgenWorld2 = _interopRequireDefault(_worldgenWorld);

var _gamestate = require('./gamestate');

var _gamestate2 = _interopRequireDefault(_gamestate);

var _displayScreensGame = require('../display/screens/game');

var _displayScreensDead = require('../display/screens/dead');

var _displayScreensDead2 = _interopRequireDefault(_displayScreensDead);

var _displayScreensWin = require('../display/screens/win');

var _displayScreensWin2 = _interopRequireDefault(_displayScreensWin);

var _definitionsPlayer = require('../definitions/player');

var _definitionsPlayer2 = _interopRequireDefault(_definitionsPlayer);

var _constantsVictories = require('../constants/victories');

var Victories = _interopRequireWildcard(_constantsVictories);

var Game = (function () {
  function Game() {
    var _this = this;

    _classCallCheck(this, Game);

    this.display = new _rotJs2['default'].Display({
      fontSize: 14,
      fontStyle: 'bold',
      font: 'Fixedsys500c',
      width: _constantsSettings2['default'].screen.width,
      height: _constantsSettings2['default'].screen.height
    });
    this.currentScreen = null;

    this.listeners = {};

    var bindToScreen = function bindToScreen(event) {
      var listener = window.addEventListener(event, function (e) {
        if (_this.currentScreen === null) return;

        _this.currentScreen.handleInput(event, e);
      });

      _this.listeners[event] = listener;
    };

    _lodash2['default'].each(['keydown', 'keypress'], function (event) {
      return bindToScreen(event);
    });
  }

  _createClass(Game, [{
    key: 'refresh',
    value: function refresh() {
      if (!this.display) return;
      this.display.clear();
      this.currentScreen.render(this.display);
    }
  }, {
    key: 'gameOver',
    value: function gameOver() {
      _gamestate2['default'].emit('gameover');
      this.switchScreen(_displayScreensDead2['default']);
    }
  }, {
    key: 'checkWin',
    value: function checkWin() {
      var didWin = _gamestate2['default'].winCondition.check();
      if (didWin) this.win();
      return didWin;
    }
  }, {
    key: 'win',
    value: function win() {
      _gamestate2['default'].emit('gameover');
      this.switchScreen(_displayScreensWin2['default']);
    }
  }, {
    key: 'safeSwitchScreen',
    value: function safeSwitchScreen(me, newScreen) {
      if (this.currentScreen !== me) return;
      this.switchScreen(newScreen);
    }
  }, {
    key: 'changeSplitScreen',
    value: function changeSplitScreen() {
      if (!this.currentScreen.split || _gamestate2['default'].players.length === 1) return;
      _gamestate2['default'].splitScreen = !_gamestate2['default'].splitScreen;
      this.switchScreen(this.currentScreen.split);
    }
  }, {
    key: 'switchScreen',
    value: function switchScreen(screen) {
      if (this.currentScreen) {
        this.currentScreen.exit(this.display);
      }

      this.currentScreen = screen;

      if (this.currentScreen) {
        this.currentScreen.enter(this.display);
        this.refresh();
      }
    }
  }, {
    key: 'setup',
    value: function setup() {
      this.scheduler = new _rotJs2['default'].Scheduler.Speed();
      this.engine = new _rotJs2['default'].Engine(this.scheduler);

      /*    if(false) {
            this.loadOldData();
            return;
          }
      */

      this.startNewGame();
    }
  }, {
    key: 'loadOldData',
    value: function loadOldData() {}
  }, {
    key: 'startNewGame',
    value: function startNewGame() {
      var _this2 = this;

      _gamestate2['default'].winCondition = (0, _lodash2['default'])(Victories).values().sample();

      _gamestate2['default'].world = new _worldgenWorld2['default']();
      _gamestate2['default'].world.generateWorld();
      var zeroStartStairs = _gamestate2['default'].world.stairs[0].up;

      var playerLocations = _gamestate2['default'].world.getValidTilesInRange(zeroStartStairs[0], zeroStartStairs[1], 0, 2, function (tile) {
        return tile.glyph.key === '.';
      });

      for (var i = 0; i < _gamestate2['default'].extra.players; i++) {
        var startTile = playerLocations.shift();
        var player = new _definitionsPlayer2['default'](0, 0, 0, { template: _gamestate2['default'].templates[i] || {} });

        _gamestate2['default'].world.moveEntity(player, startTile.x, startTile.y, 0);
        _gamestate2['default'].players.push(player);
      }

      _gamestate2['default'].livingPlayers = _gamestate2['default'].players.length;
      _gamestate2['default'].playerTurnsTaken = 0;

      this.engine.start();
      _gamestate2['default'].emit('start');

      setTimeout(function () {
        if (_this2.currentScreen.name === 'DeadScreen') return; // turn 1 death (you spawned with an amulet of strangulation, etc)
        _this2.switchScreen(_displayScreensGame.SingleGameScreen);
        if (_gamestate2['default'].players.length > 1) _this2.changeSplitScreen();
      }, 100);
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      var _this3 = this;

      this.display._data = null;
      this.display = null;
      this.currentScreen = null;
      this.scheduler = null;
      this.engine = null;

      _lodash2['default'].each(['keydown', 'keypress'], function (event) {
        return window.removeEventListener(event, _this3.listeners[event]);
      });
      this.listeners = null;
    }
  }]);

  return Game;
})();

exports['default'] = Game;
module.exports = exports['default'];

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","../constants/victories":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/victories.js","../definitions/player":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/player.js","../display/screens/dead":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/dead.js","../display/screens/game":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/game.js","../display/screens/win":"/home/seiyria/projects/Roguathia/src/js/rogue/display/screens/win.js","../worldgen/world":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/world.js","./gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _constantsSettings = require('../constants/settings');

var _constantsSettings2 = _interopRequireDefault(_constantsSettings);

var _gameupgrades = require('./gameupgrades');

var _gameupgrades2 = _interopRequireDefault(_gameupgrades);

var _eventemitter2 = require('eventemitter2');

var GameState = (function (_EventEmitter2) {
  _inherits(GameState, _EventEmitter2);

  function GameState() {
    _classCallCheck(this, GameState);

    _get(Object.getPrototypeOf(GameState.prototype), 'constructor', this).call(this);
    this.reset();
  }

  _createClass(GameState, [{
    key: 'reset',
    value: function reset() {
      if (this.players) {
        _lodash2['default'].each(this.players, function (p) {
          return p.cleanUp();
        });
      }

      if (this.world) {
        this.world.cleanUp();
        this.world = null;
      }

      if (this.game) {
        this.game.cleanUp();
        this.game = null;
      }

      this.identification = {};
      this._idMap = {};
      this.players = [];
      this.messages = [];
      this.projectiles = [];
      this.monsters = [];
      this.splitScreen = false;
      this.currentFloor = 0;

      this.loadExternalOptions();
    }
  }, {
    key: 'loadExternalOptions',
    value: function loadExternalOptions() {
      var _this = this;

      this.upgrades = {};
      _lodash2['default'].keys(_constantsSettings2['default'].upgrades).forEach(function (key) {
        _this.upgrades[key] = _constantsSettings2['default'].upgrades[key] + ~ ~_gameupgrades2['default'].dungeon[key];
        if (_constantsSettings2['default'].upgradesMax[key]) {
          _this.upgrades[key] = Math.min(_constantsSettings2['default'].upgradesMax[key], _this.upgrades[key]);
        }
      });

      this.templates = _gameupgrades2['default'].templates;
      this.unlocked = _gameupgrades2['default'].unlocked;
      this.extra = _gameupgrades2['default'].extra;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return JSON.stringify(_lodash2['default'].omit(this, 'game'));
    }
  }, {
    key: 'vpEarned',
    get: function get() {
      return this.winCondition.check() ? this.winCondition.vp() : 0;
    }
  }, {
    key: 'kpEarned',
    get: function get() {
      return _lodash2['default'].reduce(this.players, function (prev, cur) {
        return prev + cur.totalKpEarned;
      }, 0);
    }
  }, {
    key: 'spEarned',
    get: function get() {
      return _lodash2['default'].reduce(this.players, function (prev, cur) {
        return prev + cur.getScore();
      }, 0);
    }
  }]);

  return GameState;
})(_eventemitter2.EventEmitter2);

var exportedState = window.GameState = new GameState();

var FreshGame = function FreshGame() {
  for (var key in exportedState) {
    if (!exportedState.hasOwnProperty(key) || _lodash2['default'].contains(['_events', 'newListener'], key)) continue;
    delete exportedState[key];
  }

  exportedState.reset();
};

exports.FreshGame = FreshGame;
exports['default'] = exportedState;

},{"../constants/settings":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/settings.js","./gameupgrades":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gameupgrades.js","eventemitter2":"/home/seiyria/projects/Roguathia/node_modules/eventemitter2/lib/eventemitter2.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/gameupgrades.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var baseState = {
  dungeon: {
    itemsInDungeon: 0,
    itemDropChance: 0,
    altarSpawnChance: 0,
    throneSpawnChance: 0,
    graveSpawnChance: 0,
    fountainSpawnChance: 0,
    sinkSpawnChance: 0
    /* itemDropChance: 100,
     altarSpawnChance: 1000,
     templeSpawnChance: 100,
     throneSpawnChance: 1000,
     throneRoomSpawnChance: 100,
     graveSpawnChance: 1000,
     graveyardSpawnChance: 100,
     fountainSpawnChance: 1000,
     oracleRoomChance: 100,
     sinkSpawnChance: 1000,
     bathroomSpawnChance: 100*/

  },

  templates: [],

  unlocked: {
    race: ['Elf', 'Human', 'Gnome'],
    profession: ['Tourist']
  },

  selectable: {
    race: [],
    profession: []
  },

  extra: {
    players: 1
  }
};

var NewState = function NewState() {
  return baseState;
};

exports.NewState = NewState;
var curState = NewState();

var SetState = function SetState(newState) {
  return curState = newState;
};

exports.SetState = SetState;
exports['default'] = curState;

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/init/init.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _gameStarter = require('./game-starter');

var _gameStarter2 = _interopRequireDefault(_gameStarter);

var gameStarted = false;

var StartGameCycle = function StartGameCycle() {
  if (gameStarted) return;

  if (!_rotJs2['default'].isSupported()) {
    alert('rot.js isn\'t supported :(');
  } else {
    gameStarted = true;
    (0, _gameStarter2['default'])();
  }
};
exports.StartGameCycle = StartGameCycle;

},{"./game-starter":"/home/seiyria/projects/Roguathia/src/js/rogue/init/game-starter.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/default-calculations.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var AC = function AC(item) {
  var ac = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
  return item.buc * -ac - item.enchantment;
};
exports.AC = AC;

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _diceJs = require('dice.js');

var _diceJs2 = _interopRequireDefault(_diceJs);

exports['default'] = function (roll) {
  return +_diceJs2['default'].roll(roll);
};

module.exports = exports['default'];

},{"dice.js":"/home/seiyria/projects/Roguathia/node_modules/dice.js/src/dice.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/directional-probability.js":[function(require,module,exports){

// thank you based stackexchange http://codereview.stackexchange.com/a/97310/64362
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var INDICES = [1, 2, 3, 6, 9, 8, 7, 4];
var PROBABILITIES = [10000, 2000, 500, 50, 10, 50, 500, 2000];

exports["default"] = function (lastNumpadDirection) {
  var lastIndexDirection = INDICES.indexOf(lastNumpadDirection);
  var shifted = PROBABILITIES.slice(PROBABILITIES.length - lastIndexDirection).concat(PROBABILITIES.slice(0, PROBABILITIES.length - lastIndexDirection));
  var result = {};
  for (var i = 0, l = INDICES.length; i < l; i++) {
    result[INDICES[i]] = shifted[i];
  }
  return result;
};

module.exports = exports["default"];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/gen-id.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var id = 0;

exports["default"] = function () {
  return id++;
};

module.exports = exports["default"];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _bragiBrowser = require('bragi-browser');

var _bragiBrowser2 = _interopRequireDefault(_bragiBrowser);

// remove extra log line
_bragiBrowser2['default'].transports.get('Console').property({ showMeta: false });

exports['default'] = function (group, message) {
  var isError = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  if (isError) console.error(new Error(message).stack);
  _bragiBrowser2['default'].log(group, message);
};

module.exports = exports['default'];

},{"bragi-browser":"/home/seiyria/projects/Roguathia/node_modules/bragi-browser/lib/bragi.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/number-range.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NumberRange = (function () {
  function NumberRange(min, cur, max) {
    _classCallCheck(this, NumberRange);

    this.min = min;
    this.max = max;
    this._set(cur);
  }

  _createClass(NumberRange, [{
    key: "atMin",
    value: function atMin() {
      return this.cur === this.min;
    }
  }, {
    key: "atMax",
    value: function atMax() {
      return this.cur === this.max;
    }
  }, {
    key: "toMin",
    value: function toMin() {
      this.cur = this.min;
    }
  }, {
    key: "toMax",
    value: function toMax() {
      this.cur = this.max;
    }
  }, {
    key: "percent",
    value: function percent() {
      return ~ ~(this.cur / this.max * 100);
    }
  }, {
    key: "gtPercent",
    value: function gtPercent(pct) {
      return this.percent() > pct;
    }
  }, {
    key: "ltPercent",
    value: function ltPercent(pct) {
      return this.percent() < pct;
    }
  }, {
    key: "ePercent",
    value: function ePercent(pct) {
      return this.percent() === pct;
    }
  }, {
    key: "gtePercent",
    value: function gtePercent(pct) {
      return this.percent() >= pct;
    }
  }, {
    key: "ltePercent",
    value: function ltePercent(pct) {
      return this.percent() <= pct;
    }
  }, {
    key: "gt",
    value: function gt(num) {
      return this.cur > num;
    }
  }, {
    key: "lt",
    value: function lt(num) {
      return this.cur < num;
    }
  }, {
    key: "e",
    value: function e(num) {
      return this.cur === num;
    }
  }, {
    key: "gte",
    value: function gte(num) {
      return this.cur >= num;
    }
  }, {
    key: "lte",
    value: function lte(num) {
      return this.cur <= num;
    }
  }, {
    key: "_set",
    value: function _set(num) {
      this.cur = Math.max(this.min, Math.min(this.max, num));
    }
  }, {
    key: "add",
    value: function add(num) {
      this._set(num + this.cur);
    }
  }, {
    key: "sub",
    value: function sub(num) {
      this.add(-num);
    }
  }]);

  return NumberRange;
})();

exports["default"] = NumberRange;
module.exports = exports["default"];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/page-title.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = function (newTitle) {
  document.title = newTitle + " - Roguathia";
};

module.exports = exports["default"];

},{}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/rot-extensions.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var WeightedExtension = function WeightedExtension(hash) {
  var filterKey = arguments.length <= 1 || arguments[1] === undefined ? 'probability' : arguments[1];
  var predicate = arguments.length <= 2 || arguments[2] === undefined ? function () {
    return true;
  } : arguments[2];

  var valid = (0, _lodash2['default'])(hash).keys().filter(predicate).reduce(function (prev, key) {

    // handle pre-formatted probability hashes
    if (_lodash2['default'].isNumber(hash[key])) {
      prev[key] = hash[key];
    } else {
      prev[key] = hash[key][filterKey];
    }
    return prev;
  }, {});

  var choice = _rotJs2['default'].RNG.getWeightedValue(valid);
  return { key: choice, value: hash[choice] };
};
exports.WeightedExtension = WeightedExtension;

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/valid-colors.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var Colors = ['#00f', // blue
'#0f0', // green
'#f00', // red
'#0ff', // cyan
'#f0f', // magenta
'#ff0', // yellow

'#aaf', // lightblue
'#afa', // lightgreen
'#faa', // lightred
'#aaf', // lightcyan
'#faf', // lightmagenta
'#ffa' // lightyellow
];

exports.Colors = Colors;
var GetColor = function GetColor() {
  return _lodash2['default'].sample(Colors);
};
exports.GetColor = GetColor;

},{"lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/lib/value-assign.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _diceRoller = require('./dice-roller');

var _diceRoller2 = _interopRequireDefault(_diceRoller);

exports['default'] = function (value, other) {
  if (_lodash2['default'].isString(other) && _lodash2['default'].contains(other, 'd')) {
    return (0, _diceRoller2['default'])(other);
  }
  return other;
};

module.exports = exports['default'];

},{"./dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/generator.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _tiles_all = require('./tiles/_all');

var Tiles = _interopRequireWildcard(_tiles_all);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var featureTypes = [{ name: 'throne', proto: Tiles.Throne }, { name: 'sink', proto: Tiles.Sink }, { name: 'fountain', proto: Tiles.Fountain } /* ,
                                                                                                                                              { name: 'grave' },*/
];

var Generator = (function () {
  function Generator() {
    _classCallCheck(this, Generator);
  }

  _createClass(Generator, null, [{
    key: 'generate',
    value: function generate() {}
  }, {
    key: 'placeTile',
    value: function placeTile(map, type, x, y, z) {
      map[x][y] = new type();
      map[x][y].x = x;
      map[x][y].y = y;
      map[x][y].z = z;
      return map[x][y];
    }
  }, {
    key: 'drawHorizontalWalls',
    value: function drawHorizontalWalls(map, room, z) {
      for (var i = room.getLeft() - 1; i <= room.getRight() + 1; i++) {
        if (!map[i][room.getTop() - 1].glyph.key) {
          this.placeTile(map, Tiles.DungeonHorizontalWall, i, room.getTop() - 1, z);
        }

        if (!map[i][room.getBottom() + 1].glyph.key) {
          this.placeTile(map, Tiles.DungeonHorizontalWall, i, room.getBottom() + 1, z);
        }
      }
    }
  }, {
    key: 'drawVerticalWalls',
    value: function drawVerticalWalls(map, room, z) {
      for (var i = room.getTop(); i <= room.getBottom(); i++) {

        var leftTile = map[room.getLeft() - 1][i].glyph.key;
        var rightTile = map[room.getRight() + 1][i].glyph.key;

        // these tiles take precedence, otherwise some walls look uggo
        if (!leftTile || leftTile === '-') {
          this.placeTile(map, Tiles.DungeonVerticalWall, room.getLeft() - 1, i, z);
        }

        if (!rightTile || rightTile === '-') {
          this.placeTile(map, Tiles.DungeonVerticalWall, room.getRight() + 1, i, z);
        }
      }
    }
  }, {
    key: 'getRandomFloorTile',
    value: function getRandomFloorTile(map) {
      return (0, _lodash2['default'])(map).flatten().filter(function (tile) {
        return tile.glyph.key === '.';
      }).sample();
    }
  }, {
    key: 'getRandomCoordsInRoom',
    value: function getRandomCoordsInRoom(room) {
      return [Math.floor(_rotJs2['default'].RNG.getUniform() * (room._x2 - room._x1)) + room._x1, Math.floor(_rotJs2['default'].RNG.getUniform() * (room._y2 - room._y1)) + room._y1];
    }
  }, {
    key: 'placeStairsInRoom',
    value: function placeStairsInRoom(map, room, z, stairs) {
      var _this = this;

      this.markRoomInelligible(room);
      var setStairs = function setStairs(stairs, x, y) {
        return _this.placeTile(map, stairs, x, y, z);
      };

      var _getRandomCoordsInRoom = this.getRandomCoordsInRoom(room);

      var _getRandomCoordsInRoom2 = _slicedToArray(_getRandomCoordsInRoom, 2);

      var x = _getRandomCoordsInRoom2[0];
      var y = _getRandomCoordsInRoom2[1];

      return setStairs(stairs, x, y);
    }
  }, {
    key: 'getStairs',
    value: function getStairs(z) {
      return _initGamestate2['default'].winCondition.mapStairs(z);
    }
  }, {
    key: 'markRoomInelligible',
    value: function markRoomInelligible(room) {
      if (!room) return;
      room._noMoreFeatures = false;
    }
  }, {
    key: 'attemptFeaturePlacement',
    value: function attemptFeaturePlacement(map, z, rooms) {
      var _this2 = this;

      var validRooms = _lodash2['default'].reject(rooms, function (room) {
        return room._noMoreFeatures;
      });
      _lodash2['default'].each(validRooms, function (room) {
        _lodash2['default'].each(featureTypes, function (type) {
          if (_rotJs2['default'].RNG.getUniformInt(1, 10000) <= _initGamestate2['default'].upgrades[type.name + 'SpawnChance']) {
            var _getRandomCoordsInRoom3 = _this2.getRandomCoordsInRoom(room);

            var _getRandomCoordsInRoom32 = _slicedToArray(_getRandomCoordsInRoom3, 2);

            var x = _getRandomCoordsInRoom32[0];
            var y = _getRandomCoordsInRoom32[1];

            _this2.placeTile(map, type.proto, x, y, z);
            _this2.markRoomInelligible(room);
            return false;
          }
        });
      });
    }
  }]);

  return Generator;
})();

exports['default'] = Generator;
module.exports = exports['default'];

},{"../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","./tiles/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/item-generator.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _definitionsEquipment = require('../definitions/equipment');

var EquipmentTypes = _interopRequireWildcard(_definitionsEquipment);

var _contentItemsFoods = require('../content/items/foods');

var Food = _interopRequireWildcard(_contentItemsFoods);

var _contentItemsFeets = require('../content/items/feets');

var Feet = _interopRequireWildcard(_contentItemsFeets);

var _contentItemsHeads = require('../content/items/heads');

var Head = _interopRequireWildcard(_contentItemsHeads);

var _contentItemsBodys = require('../content/items/bodys');

var Body = _interopRequireWildcard(_contentItemsBodys);

var _contentItemsRings = require('../content/items/rings');

var Ring = _interopRequireWildcard(_contentItemsRings);

var _contentItemsNecks = require('../content/items/necks');

var Neck = _interopRequireWildcard(_contentItemsNecks);

var _contentItemsWands = require('../content/items/wands');

var Wand = _interopRequireWildcard(_contentItemsWands);

var _contentItemsWrists = require('../content/items/wrists');

var Wrist = _interopRequireWildcard(_contentItemsWrists);

var _contentItemsCloaks = require('../content/items/cloaks');

var Cloak = _interopRequireWildcard(_contentItemsCloaks);

var _contentItems_weapons = require('../content/items/_weapons');

var Weapon = _interopRequireWildcard(_contentItems_weapons);

var _contentItemsPotions = require('../content/items/potions');

var Potion = _interopRequireWildcard(_contentItemsPotions);

var _contentItemsSpellbooks = require('../content/items/spellbooks');

var Spellbook = _interopRequireWildcard(_contentItemsSpellbooks);

var _contentItemsProjectiles = require('../content/items/projectiles');

var Projectile = _interopRequireWildcard(_contentItemsProjectiles);

var itemTypeHash = {
  Food: Food, Feet: Feet, Head: Head, Body: Body, Ring: Ring, Neck: Neck, Wand: Wand, Wrist: Wrist, Cloak: Cloak, Potion: Potion, Spellbook: Spellbook, Hands: _lodash2['default'].extend({}, Projectile, Weapon)
};

var ItemGenerator = (function () {
  function ItemGenerator() {
    _classCallCheck(this, ItemGenerator);
  }

  _createClass(ItemGenerator, null, [{
    key: 'getValidTypes',
    value: function getValidTypes(types) {
      return (0, _lodash2['default'])(types).keys().filter(function (key) {
        return types[key].rarity;
      }).map(function (key) {
        return [key, types[key].rarity];
      }).zipObject().value();
    }
  }, {
    key: 'spawn',
    value: function spawn() {
      var validTypes = this.getValidTypes(EquipmentTypes);
      var chosenType = _rotJs2['default'].RNG.getWeightedValue(validTypes);
      var validItems = this.getValidTypes(itemTypeHash[chosenType]);
      var chosenItem = _rotJs2['default'].RNG.getWeightedValue(validItems);
      return new itemTypeHash[chosenType][chosenItem]();
    }
  }]);

  return ItemGenerator;
})();

exports['default'] = ItemGenerator;
module.exports = exports['default'];

},{"../content/items/_weapons":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_weapons.js","../content/items/bodys":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/bodys.js","../content/items/cloaks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/cloaks.js","../content/items/feets":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/feets.js","../content/items/foods":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/foods.js","../content/items/heads":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/heads.js","../content/items/necks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/necks.js","../content/items/potions":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/potions.js","../content/items/projectiles":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/projectiles.js","../content/items/rings":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/rings.js","../content/items/spellbooks":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/spellbooks.js","../content/items/wands":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wands.js","../content/items/wrists":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/wrists.js","../definitions/equipment":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/equipment.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/maptypes/altar.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _tiles_all = require('../tiles/_all');

var Tiles = _interopRequireWildcard(_tiles_all);

var _generator = require('../generator');

var _generator2 = _interopRequireDefault(_generator);

var Altar = (function (_Generator) {
  _inherits(Altar, _Generator);

  function Altar() {
    _classCallCheck(this, Altar);

    _get(Object.getPrototypeOf(Altar.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Altar, null, [{
    key: 'generate',
    value: function generate(opts) {
      var _this = this;

      var _$extend = _lodash2['default'].extend({ w: 15, h: 15 }, opts);

      var w = _$extend.w;
      var h = _$extend.h;
      var z = _$extend.z;

      var map = [];

      var arena = new _rotJs2['default'].Map.Arena(w, h);

      arena.create(function (x, y, value) {
        if (!map[x]) map[x] = [];

        var proto = Tiles.Void;
        if (!value) proto = Tiles.DungeonFloor;

        _this.placeTile(map, proto, x, y, z);
      });

      var room = new _rotJs2['default'].Map.Feature.Room(1, 1, w - 2, h - 2);

      this.drawVerticalWalls(map, room, z);
      this.drawHorizontalWalls(map, room, z);

      var stairs = [this.placeStairsInRoom(map, room, z, Tiles.StairsUp)];

      var altarTile = this.getRandomFloorTile(map);
      this.placeTile(map, Tiles.SelykAltar, altarTile.x, altarTile.y, z);

      return { map: map, stairs: stairs, mapName: 'Selyk\'s Altar', shortMapName: 'Altar' };
    }
  }]);

  return Altar;
})(_generator2['default']);

exports['default'] = Altar;
module.exports = exports['default'];

},{"../generator":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/generator.js","../tiles/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/maptypes/dungeon.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _tiles_all = require('../tiles/_all');

var Tiles = _interopRequireWildcard(_tiles_all);

var _generator = require('../generator');

var _generator2 = _interopRequireDefault(_generator);

var Dungeon = (function (_Generator) {
  _inherits(Dungeon, _Generator);

  function Dungeon() {
    _classCallCheck(this, Dungeon);

    _get(Object.getPrototypeOf(Dungeon.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Dungeon, null, [{
    key: 'generate',
    value: function generate(opts) {
      var _this = this;

      var w = opts.w;
      var h = opts.h;
      var z = opts.z;

      var map = [];

      // -3 to adjust for the UI components at the bottom
      var digger = new _rotJs2['default'].Map.Digger(w, h - 3, { roomWidth: [4, 8], roomHeight: [4, 7], corridorLength: [5, 13] });

      digger.create(function (x, y, value) {
        if (!map[x]) map[x] = [];

        var proto = Tiles.Void;
        if (!value) proto = Tiles.DungeonFloor;

        _this.placeTile(map, proto, x, y, z);
      });

      // replace all corridors with corridor tiles
      _lodash2['default'].each(digger.getCorridors(), function (corridor) {
        _this.placeCorridorTiles(map, corridor, z);
      });

      // handle room outlines and doors
      _lodash2['default'].each(digger.getRooms(), function (room) {

        // draw left and right walls
        _this.drawVerticalWalls(map, room, z);

        // draw top and bottom walls
        _this.drawHorizontalWalls(map, room, z);

        // maybe draw some doors
        _this.drawDoors(map, room, z);
      });

      var _getStairs = this.getStairs(z);

      var _getStairs2 = _slicedToArray(_getStairs, 2);

      var stairsUp = _getStairs2[0];
      var stairsDown = _getStairs2[1];

      var rooms = _lodash2['default'].sample(digger.getRooms(), 2);
      var stairs = [this.placeStairsInRoom(map, rooms[0], z, stairsUp), stairsDown ? this.placeStairsInRoom(map, rooms[1], z, stairsDown) : null];

      this.attemptFeaturePlacement(map, z, digger.getRooms());

      return { map: map, stairs: stairs, mapName: 'The Dungeons of Doom', shortMapName: 'Dungeon' };
    }
  }, {
    key: 'placeCorridorTiles',
    value: function placeCorridorTiles(map, corridor, z) {
      var xStart = corridor._startX;
      var xEnd = corridor._endX;

      if (xStart > xEnd) {
        var _ref = [xEnd, xStart];
        xStart = _ref[0];
        xEnd = _ref[1];
      }

      var yStart = corridor._startY;
      var yEnd = corridor._endY;

      if (yStart > yEnd) {
        var _ref2 = [yEnd, yStart];
        yStart = _ref2[0];
        yEnd = _ref2[1];
      }

      for (var x = xStart; x <= xEnd; x++) {
        for (var y = yStart; y <= yEnd; y++) {
          this.placeTile(map, Tiles.Corridor, x, y, z);
        }
      }
    }
  }, {
    key: 'drawDoors',
    value: function drawDoors(map, room, z) {
      var _this2 = this;

      room.getDoors(function (x, y) {
        if (_rotJs2['default'].RNG.getPercentage() > 30) {
          _this2.placeTile(map, Tiles.DungeonFloor, x, y, z);
        } else {
          var door = _this2.placeTile(map, Tiles.Door, x, y, z);
          door.setProperCharacter(map[x - 1][y]);
        }
      });
    }
  }]);

  return Dungeon;
})(_generator2['default']);

exports['default'] = Dungeon;
module.exports = exports['default'];

},{"../generator":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/generator.js","../tiles/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/monster-spawner.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libDiceRoller = require('../lib/dice-roller');

var _libDiceRoller2 = _interopRequireDefault(_libDiceRoller);

var _contentMonsters_all = require('../content/monsters/_all');

var _contentMonsters_all2 = _interopRequireDefault(_contentMonsters_all);

var _definitionsMonster = require('../definitions/monster');

var _definitionsMonster2 = _interopRequireDefault(_definitionsMonster);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _libRotExtensions = require('../lib/rot-extensions');

var MonsterSpawner = (function () {
  function MonsterSpawner() {
    _classCallCheck(this, MonsterSpawner);
  }

  _createClass(MonsterSpawner, null, [{
    key: 'spawn',
    value: function spawn(basedOn) {
      var dungeonLevel = basedOn.z + 1;
      var targetLevel = basedOn.level;

      var lowestDifficulty = Math.floor((dungeonLevel + targetLevel) / 2);
      var highestDifficulty = 5 * dungeonLevel;

      var chosenName = (0, _libRotExtensions.WeightedExtension)(_contentMonsters_all2['default'], 'frequency', function (monsterName) {
        return _contentMonsters_all2['default'][monsterName].difficulty >= lowestDifficulty && _contentMonsters_all2['default'][monsterName].difficulty < highestDifficulty;
      }).key;

      if (!chosenName || !_contentMonsters_all2['default'][chosenName]) {
        (0, _libLogger2['default'])('MonsterSpawner', 'Monster (' + chosenName + ') could not be spawned: DLvl ' + dungeonLevel + ' TargetLevel ' + targetLevel + ' | difficulty range ' + lowestDifficulty + '-' + highestDifficulty + ' -- picking random monster to spawn...', false);
        chosenName = (0, _libRotExtensions.WeightedExtension)(_contentMonsters_all2['default'], 'frequency', function (monsterName) {
          return _contentMonsters_all2['default'][monsterName].difficulty > 0;
        }).key;
      }

      var numMonsters = (0, _libDiceRoller2['default'])(_contentMonsters_all2['default'][chosenName].spawnPattern);

      for (var i = 0; i < numMonsters; i++) {
        var tile = _lodash2['default'].sample(_initGamestate2['default'].world.getValidTilesInRange(basedOn.x, basedOn.y, basedOn.z, 50, function (tile) {
          return basedOn.distBetween(tile) > basedOn.getSight();
        }));
        this.spawnSingle(chosenName, tile);
      }
    }
  }, {
    key: 'spawnSingle',
    value: function spawnSingle(monsterName, tile) {

      while (_initGamestate2['default'].monsters.length >= _initGamestate2['default'].upgrades.monsterLimit) {

        // some monsters can be marked important, like Selyk, so they will always spawn and never despawn
        var firstBadMonster = _lodash2['default'].find(_initGamestate2['default'].monsters, function (mon) {
          return !mon.important;
        });

        // clean up old monsters
        firstBadMonster.die('Selyk\'s Divine Hand');
      }

      var monster = _contentMonsters_all2['default'][monsterName];

      if (!monster) {
        (0, _libLogger2['default'])('MonsterSpawner', 'Bad monster ' + monsterName + ': ' + new Error().stack);
      }

      try {
        var monsterOpts = monster.init();
        monsterOpts.difficulty = monster.difficulty;
        var monsterInstance = new _definitionsMonster2['default'](tile.x, tile.y, tile.z, monsterOpts);
        monsterInstance._name = monsterName;

        return monsterInstance;
      } catch (e) {
        (0, _libLogger2['default'])('MonsterSpawner', 'Could not spawn monster ' + monsterName + ': ' + e.stack);
      }
    }
  }]);

  return MonsterSpawner;
})();

exports['default'] = MonsterSpawner;
module.exports = exports['default'];

},{"../content/monsters/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/content/monsters/_all.js","../definitions/monster":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/monster.js","../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../lib/dice-roller":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/dice-roller.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","../lib/rot-extensions":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/rot-extensions.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _walls = require('./walls');

var Walls = _interopRequireWildcard(_walls);

var _floors = require('./floors');

var Floors = _interopRequireWildcard(_floors);

var _stairs = require('./stairs');

var Stairs = _interopRequireWildcard(_stairs);

var _features = require('./features');

var Features = _interopRequireWildcard(_features);

exports['default'] = _lodash2['default'].extend({}, Walls, Floors, Stairs, Features);
module.exports = exports['default'];

},{"./features":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/features.js","./floors":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/floors.js","./stairs":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/stairs.js","./walls":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/walls.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/features.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _definitionsTile = require('../../definitions/tile');

var _definitionsTile2 = _interopRequireDefault(_definitionsTile);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _contentEffectsFountain = require('../../content/effects/fountain');

var FountainEffects = _interopRequireWildcard(_contentEffectsFountain);

var _contentEffectsThrone = require('../../content/effects/throne');

var ThroneEffects = _interopRequireWildcard(_contentEffectsThrone);

var _contentEffectsSinkDrink = require('../../content/effects/sink-drink');

var SinkDrinkEffects = _interopRequireWildcard(_contentEffectsSinkDrink);

var _contentEffectsSinkKick = require('../../content/effects/sink-kick');

var SinkKickEffects = _interopRequireWildcard(_contentEffectsSinkKick);

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var Door = (function (_Tile) {
  _inherits(Door, _Tile);

  function Door() {
    _classCallCheck(this, Door);

    var isClosed = !!Math.round(_rotJs2['default'].RNG.getUniform());
    var openChar = isClosed ? _constantsGlyphs.Tiles.DoorOpenHorizontal : _constantsGlyphs.Tiles.DoorClosed;
    _get(Object.getPrototypeOf(Door.prototype), 'constructor', this).call(this, openChar, _constantsGlyphColors.Tiles.Door);
    this._isAIPassable = true;

    this.opacity = ! ~ ~isClosed;
    this.density = ! ~ ~isClosed;
  }

  // the door should look different than the walls next to it

  _createClass(Door, [{
    key: 'getOpenChar',
    value: function getOpenChar(basedOn) {
      var leftTileGlyph = basedOn.glyph.key;
      return leftTileGlyph === _constantsGlyphs.Tiles.DoorOpenHorizontal ? _constantsGlyphs.Tiles.DoorOpenVertical : _constantsGlyphs.Tiles.DoorOpenHorizontal;
    }
  }, {
    key: 'canInteract',
    value: function canInteract() {
      return this.density;
    }
  }, {
    key: 'setProperCharacter',
    value: function setProperCharacter() {
      var basedOn = arguments.length <= 0 || arguments[0] === undefined ? _initGamestate2['default'].world.getTile(this.x - 1, this.y, this.z) : arguments[0];

      var isOpen = this.density;
      var toggleChar = isOpen ? _constantsGlyphs.Tiles.DoorClosed : this.getOpenChar(basedOn);
      this.glyph.key = toggleChar;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      this.opacity = !this.opacity;
      this.density = !this.density;
      this.setProperCharacter();

      return entity.name + ' ' + (this.density ? 'closed' : 'opened') + ' the door.';
    }
  }]);

  return Door;
})(_definitionsTile2['default']);

exports.Door = Door;

var SelykAltar = (function (_Tile2) {
  _inherits(SelykAltar, _Tile2);

  function SelykAltar() {
    _classCallCheck(this, SelykAltar);

    _get(Object.getPrototypeOf(SelykAltar.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Altar, _constantsGlyphColors.Special.Selyk);
  }

  _createClass(SelykAltar, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return this.distBetween(entity) <= 1;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      entity._ascended = true;
      return entity.name + ' has acended to the Selykian Plane.';
    }
  }]);

  return SelykAltar;
})(_definitionsTile2['default']);

exports.SelykAltar = SelykAltar;

var Fountain = (function (_Tile3) {
  _inherits(Fountain, _Tile3);

  function Fountain() {
    _classCallCheck(this, Fountain);

    _get(Object.getPrototypeOf(Fountain.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Fountain, _constantsGlyphColors.Tiles.Fountain);
    this.density = 1;
  }

  _createClass(Fountain, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return this.distBetween(entity) <= 1;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      var effect = this.getRandomEffect(FountainEffects);
      effect.use(entity, this);
      if (_rotJs2['default'].RNG.getPercentage() <= 33) {
        this.ceaseExisting();
        return 'The fountain dried up!';
      }
    }
  }]);

  return Fountain;
})(_definitionsTile2['default']);

exports.Fountain = Fountain;

var Throne = (function (_Tile4) {
  _inherits(Throne, _Tile4);

  function Throne() {
    _classCallCheck(this, Throne);

    _get(Object.getPrototypeOf(Throne.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Throne, _constantsGlyphColors.Tiles.Throne);
  }

  _createClass(Throne, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return this.distBetween(entity) === 0;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      var effect = this.getRandomEffect(ThroneEffects);
      effect.use(entity, this);
      if (_rotJs2['default'].RNG.getPercentage() <= 33) {
        this.ceaseExisting();
        return 'The throne vanishes in a puff of logic!';
      }
    }
  }]);

  return Throne;
})(_definitionsTile2['default']);

exports.Throne = Throne;

var Sink = (function (_Tile5) {
  _inherits(Sink, _Tile5);

  function Sink() {
    _classCallCheck(this, Sink);

    _get(Object.getPrototypeOf(Sink.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Sink, _constantsGlyphColors.Tiles.Sink);
    this.density = 1;
  }

  _createClass(Sink, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return this.distBetween(entity) <= 1;
    }
  }, {
    key: 'becomeFountain',
    value: function becomeFountain() {
      _initGamestate2['default'].world.placeNewTile(Fountain, this.x, this.y, this.z);
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      if (_rotJs2['default'].RNG.getPercentage() <= 60) {
        this.getRandomEffect(SinkDrinkEffects).use(entity, this);
      } else {
        this.getRandomEffect(SinkKickEffects).use(entity, this);
      }

      // break chance
      if (_rotJs2['default'].RNG.getPercentage() <= 30) {

        // it might turn into a fountain, but probably not
        if (_rotJs2['default'].RNG.getPercentage() <= 20) {
          this.becomeFountain();
          return 'The pipes explode! Water spurts out!';
        }

        this.ceaseExisting();
        return 'The sink stops providing water.';
      }
    }
  }]);

  return Sink;
})(_definitionsTile2['default']);

exports.Sink = Sink;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../content/effects/fountain":"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/fountain.js","../../content/effects/sink-drink":"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/sink-drink.js","../../content/effects/sink-kick":"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/sink-kick.js","../../content/effects/throne":"/home/seiyria/projects/Roguathia/src/js/rogue/content/effects/throne.js","../../definitions/tile":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/tile.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/floors.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsTile = require('../../definitions/tile');

var _definitionsTile2 = _interopRequireDefault(_definitionsTile);

var _constantsGlyphs = require('../../constants/glyphs');

var Void = (function (_Tile) {
  _inherits(Void, _Tile);

  function Void() {
    _classCallCheck(this, Void);

    _get(Object.getPrototypeOf(Void.prototype), 'constructor', this).call(this);this.opacity = 1;this.reflect = 0;
  }

  return Void;
})(_definitionsTile2['default']);

exports.Void = Void;

var DungeonFloor = (function (_Tile2) {
  _inherits(DungeonFloor, _Tile2);

  function DungeonFloor() {
    _classCallCheck(this, DungeonFloor);

    _get(Object.getPrototypeOf(DungeonFloor.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Floor);
  }

  return DungeonFloor;
})(_definitionsTile2['default']);

exports.DungeonFloor = DungeonFloor;

var Corridor = (function (_Tile3) {
  _inherits(Corridor, _Tile3);

  function Corridor() {
    _classCallCheck(this, Corridor);

    _get(Object.getPrototypeOf(Corridor.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.Corridor);
  }

  return Corridor;
})(_definitionsTile2['default']);

exports.Corridor = Corridor;

},{"../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../definitions/tile":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/tile.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/stairs.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsTile = require('../../definitions/tile');

var _definitionsTile2 = _interopRequireDefault(_definitionsTile);

var _initGamestate = require('../../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _contentItems_special = require('../../content/items/_special');

var _constantsGlyphs = require('../../constants/glyphs');

var _constantsGlyphColors = require('../../constants/glyphColors');

var Stairs = (function (_Tile) {
  _inherits(Stairs, _Tile);

  function Stairs() {
    _classCallCheck(this, Stairs);

    _get(Object.getPrototypeOf(Stairs.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Stairs, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return this.distBetween(entity) === 0;
    }
  }]);

  return Stairs;
})(_definitionsTile2['default']);

var StairsDown = (function (_Stairs) {
  _inherits(StairsDown, _Stairs);

  function StairsDown() {
    _classCallCheck(this, StairsDown);

    _get(Object.getPrototypeOf(StairsDown.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.StairsDown);
  }

  _createClass(StairsDown, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return _get(Object.getPrototypeOf(StairsDown.prototype), 'canInteract', this).call(this, entity) && entity.descend && this.z !== _initGamestate2['default'].world.depth - 1;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      entity.descend();
      return entity.name + ' descended the stairs.';
    }
  }]);

  return StairsDown;
})(Stairs);

exports.StairsDown = StairsDown;

var SelykStairsDown = (function (_Stairs2) {
  _inherits(SelykStairsDown, _Stairs2);

  function SelykStairsDown() {
    _classCallCheck(this, SelykStairsDown);

    _get(Object.getPrototypeOf(SelykStairsDown.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.StairsDown, _constantsGlyphColors.Special.Selyk);
  }

  _createClass(SelykStairsDown, [{
    key: 'canInteract',
    value: function canInteract(entity) {
      return entity.hasInInventory(_contentItems_special.SelykCellarKey) && entity.descend;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      entity.descend();
      return entity.name + ' descended the stairs to Selyk\'s Cellar.';
    }
  }]);

  return SelykStairsDown;
})(Stairs);

exports.SelykStairsDown = SelykStairsDown;

var StairsUp = (function (_Stairs3) {
  _inherits(StairsUp, _Stairs3);

  function StairsUp() {
    _classCallCheck(this, StairsUp);

    _get(Object.getPrototypeOf(StairsUp.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.StairsUp);
  }

  _createClass(StairsUp, [{
    key: 'canInteract',
    value: function canInteract() {
      return false;
      // return super.canInteract(entity) && this.z !== 0;
    }
  }, {
    key: 'interact',
    value: function interact(entity) {
      entity.ascend();
      return entity.name + ' ascended the stairs.';
    }
  }]);

  return StairsUp;
})(Stairs);

exports.StairsUp = StairsUp;

},{"../../constants/glyphColors":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphColors.js","../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../content/items/_special":"/home/seiyria/projects/Roguathia/src/js/rogue/content/items/_special.js","../../definitions/tile":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/tile.js","../../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/walls.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _definitionsTile = require('../../definitions/tile');

var _definitionsTile2 = _interopRequireDefault(_definitionsTile);

var _constantsGlyphs = require('../../constants/glyphs');

var DungeonHorizontalWall = (function (_Tile) {
  _inherits(DungeonHorizontalWall, _Tile);

  function DungeonHorizontalWall() {
    _classCallCheck(this, DungeonHorizontalWall);

    _get(Object.getPrototypeOf(DungeonHorizontalWall.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.WallHorizontal);this.density = this.opacity = 1;this.reflect = 0;
  }

  return DungeonHorizontalWall;
})(_definitionsTile2['default']);

exports.DungeonHorizontalWall = DungeonHorizontalWall;

var DungeonVerticalWall = (function (_Tile2) {
  _inherits(DungeonVerticalWall, _Tile2);

  function DungeonVerticalWall() {
    _classCallCheck(this, DungeonVerticalWall);

    _get(Object.getPrototypeOf(DungeonVerticalWall.prototype), 'constructor', this).call(this, _constantsGlyphs.Tiles.WallVertical);this.density = this.opacity = 1;this.reflect = 0;
  }

  return DungeonVerticalWall;
})(_definitionsTile2['default']);

exports.DungeonVerticalWall = DungeonVerticalWall;

},{"../../constants/glyphs":"/home/seiyria/projects/Roguathia/src/js/rogue/constants/glyphs.js","../../definitions/tile":"/home/seiyria/projects/Roguathia/src/js/rogue/definitions/tile.js"}],"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/world.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _rotJs = require('rot-js');

var _rotJs2 = _interopRequireDefault(_rotJs);

var _tiles_all = require('./tiles/_all');

var Tiles = _interopRequireWildcard(_tiles_all);

var _maptypesDungeon = require('./maptypes/dungeon');

var _maptypesDungeon2 = _interopRequireDefault(_maptypesDungeon);

var _initGamestate = require('../init/gamestate');

var _initGamestate2 = _interopRequireDefault(_initGamestate);

var _itemGenerator = require('./item-generator');

var _itemGenerator2 = _interopRequireDefault(_itemGenerator);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var badTile = new Tiles.Void();

var World = (function () {
  function World() {
    _classCallCheck(this, World);

    this.tiles = [];

    this.stairs = [];

    this.entities = [];
    this.items = [];

    this.fov = [];
    this.lighting = [];
    this.explored = [];
  }

  _createClass(World, [{
    key: 'setMapAt',
    value: function setMapAt(floor, i) {
      var map = floor.map;
      var mapName = floor.mapName;
      var shortMapName = floor.shortMapName;
      var stairs = floor.stairs;

      this.tiles[i] = map;
      this.tiles[i].mapName = mapName;
      this.tiles[i].shortMapName = shortMapName;

      var _stairs = _slicedToArray(stairs, 2);

      var upStairs = _stairs[0];
      var downStairs = _stairs[1];

      this.stairs[i] = {};
      if (upStairs) this.stairs[i].up = [upStairs.x, upStairs.y];
      if (downStairs) this.stairs[i].down = [downStairs.x, downStairs.y];

      this.placeItemsOnMap(i);
    }
  }, {
    key: 'generateWorld',
    value: function generateWorld() {
      var width = arguments.length <= 0 || arguments[0] === undefined ? 70 : arguments[0];
      var height = arguments.length <= 1 || arguments[1] === undefined ? 70 : arguments[1];
      var depth = arguments.length <= 2 || arguments[2] === undefined ? 10 : arguments[2];

      this.width = width;
      this.height = height;
      this.depth = depth;

      for (var i = 0; i < depth; i++) {
        var genOpts = { w: width, h: height, z: i };
        this.setMapAt(_maptypesDungeon2['default'].generate(genOpts), i);
      }

      if (_initGamestate2['default'].winCondition.mapAdditions()) {
        this.depth = this.tiles.length;
      }

      this.setup();
    }

    // region Setup functions
  }, {
    key: 'setup',
    value: function setup() {
      this.setupExplored();
      this.setupFOV();
    }
  }, {
    key: 'setupExplored',
    value: function setupExplored() {
      for (var z = 0; z < this.depth; z++) {
        this.explored[z] = [];
        for (var x = 0; x < this.width; x++) {
          this.explored[z][x] = [];
          for (var y = 0; y < this.height; y++) {
            this.explored[z][x][y] = false;
          }
        }
      }
    }
  }, {
    key: 'setupFOV',
    value: function setupFOV() {
      var _this = this;

      var _loop = function (z) {
        _this.fov[z] = new _rotJs2['default'].FOV.RecursiveShadowcasting(function (x, y) {
          return !_this.getTile(x, y, z).isBlockingLight();
        });
      };

      for (var z = 0; z < this.depth; z++) {
        _loop(z);
      }
    }

    // endregion

    // region Exploration functions
  }, {
    key: 'setExplored',
    value: function setExplored(x, y, z) {
      var state = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

      if (this.isVoid(x, y, z)) return;
      this.explored[z][x][y] = state;
    }
  }, {
    key: 'isExplored',
    value: function isExplored(x, y, z) {
      return this.isVoid(x, y, z) ? false : this.explored[z][x][y];
    }

    // endregion

    // region Tile functions
  }, {
    key: 'getTile',
    value: function getTile(x, y, z) {
      if (z < 0 || z > this.tiles.length || x < 0 || x >= this.tiles[z].length || y < 0 || y >= this.tiles[z][x].length) {
        return badTile;
      }

      return this.tiles[z][x][y];
    }
  }, {
    key: 'placeNewTile',
    value: function placeNewTile(tileProto, x, y, z) {
      var tile = new tileProto();
      tile.x = x;
      tile.y = y;
      tile.z = z;
      this.tiles[z][x][y] = tile;
    }
  }, {
    key: 'isVoid',
    value: function isVoid(x, y, z) {
      var tile = this.getTile(x, y, z);
      return !tile || !this.getTile(x, y, z).glyph.key;
    }
  }, {
    key: 'isTileEmpty',
    value: function isTileEmpty(x, y, z) {
      var tile = this.getTile(x, y, z);
      return tile && !tile.isDense() && !this.getEntity(x, y, z) && !this.isVoid(x, y, z);
    }
  }, {
    key: 'isTilePassable',
    value: function isTilePassable(x, y, z) {
      var inclAIPass = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

      var tile = this.getTile(x, y, z);
      var aiPass = inclAIPass ? tile._isAIPassable : true;
      return tile && aiPass || this.isTileEmpty(x, y, z);
    }
  }, {
    key: 'getAllTilesInRange',
    value: function getAllTilesInRange(x, y, z, radius) {
      var tiles = [];

      // line these tiles up with the numpad
      for (var newY = y + radius; newY >= y - radius; newY--) {
        for (var newX = x - radius; newX <= x + radius; newX++) {
          var tile = this.tiles[z][newX][newY];
          tiles.push(tile);
        }
      }

      return tiles;
    }
  }, {
    key: 'getValidTilesInRange',
    value: function getValidTilesInRange(x, y, z, radius) {
      var filter = arguments.length <= 4 || arguments[4] === undefined ? function () {
        return true;
      } : arguments[4];

      var tiles = [];

      var lowerX = Math.max(x - radius, 0);
      var upperX = Math.min(x + radius, this.width);
      var lowerY = Math.max(y - radius, 0);
      var upperY = Math.min(y + radius, this.height);

      for (var newX = lowerX; newX <= upperX; newX++) {
        for (var newY = lowerY; newY <= upperY; newY++) {
          if (!this.tiles[z][newX]) continue;
          var tile = this.tiles[z][newX][newY];
          if (!tile) continue;
          if (!this.isTileEmpty(newX, newY, z)) continue;
          tiles.push(tile);
        }
      }

      return _lodash2['default'].filter(tiles, filter);
    }

    // endregion

    // region Dual-purpose getters/setters
  }, {
    key: 'getWithoutInits',
    value: function getWithoutInits(x, y, z) {
      var list = arguments.length <= 3 || arguments[3] === undefined ? 'entities' : arguments[3];

      if (!this[list][z]) return null;
      if (!this[list][z][x]) return null;
      if (!this[list][z][x][y]) return null;

      return this[list][z][x][y];
    }
  }, {
    key: 'ensureLocation',
    value: function ensureLocation(x, y, z) {
      var list = arguments.length <= 3 || arguments[3] === undefined ? 'entities' : arguments[3];
      var setTo = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

      if (!this[list][z]) this[list][z] = [];
      if (!this[list][z][x]) this[list][z][x] = [];
      if (!this[list][z][x][y]) this[list][z][x][y] = setTo;
    }

    // endregion

    // region Item functions
  }, {
    key: 'placeItemsOnMap',
    value: function placeItemsOnMap(z) {
      var itemsRemaining = arguments.length <= 1 || arguments[1] === undefined ? _initGamestate2['default'].upgrades.itemsInDungeon : arguments[1];

      while (itemsRemaining > 0 && _rotJs2['default'].RNG.getPercentage() <= _initGamestate2['default'].upgrades.itemDropChance) {
        itemsRemaining--;
        _initGamestate2['default'].world.placeItemAtRandomLocation(_itemGenerator2['default'].spawn(), z);
      }
    }
  }, {
    key: 'getItemsAt',
    value: function getItemsAt(x, y, z) {
      return this.getWithoutInits(x, y, z, 'items');
    }
  }, {
    key: 'removeItem',
    value: function removeItem(item) {
      var myItems = this.getItemsAt(item.x, item.y, item.z);
      if (!_lodash2['default'].contains(myItems, item)) {
        (0, _libLogger2['default'])('World', 'Invalid item removal attempt. ' + item.name + ' not found in list: ' + _lodash2['default'].pluck(myItems, 'name').join(', '));
        return false;
      }
      this.items[item.z][item.x][item.y] = _lodash2['default'].without(this.items[item.z][item.x][item.y], item);
      item.x = item.y = item.z = undefined;
    }
  }, {
    key: 'moveItem',
    value: function moveItem(item, x, y, z) {
      this.ensureLocation(x, y, z, 'items', []);

      if (item.x && item.y && item.z) {
        this.removeItem(item);
      }

      item.x = x;
      item.y = y;
      item.z = z;
      this.items[z][x][y].push(item);
    }
  }, {
    key: 'placeItemAtRandomLocation',
    value: function placeItemAtRandomLocation(item, z) {
      var tile = (0, _lodash2['default'])(this.tiles[z]).flatten().filter(function (tile) {
        return tile.glyph.key;
      }).reject(function (tile) {
        return tile.isDense();
      }).sample();
      this.moveItem(item, tile.x, tile.y, z);
    }

    // endregion

    // region Entity functions
  }, {
    key: 'moveEntity',
    value: function moveEntity(entity, x, y, z) {
      if (!this.isTileEmpty(x, y, z)) return false;

      this.ensureLocation(x, y, z);
      this.ensureLocation(entity.x, entity.y, entity.z);

      this.entities[entity.z][entity.x][entity.y] = null;

      entity.x = x;
      entity.y = y;
      entity.z = z;
      this.entities[z][x][y] = entity;
      return true;
    }
  }, {
    key: 'removeEntity',
    value: function removeEntity(entity) {
      var myEntity = this.getEntity(entity.x, entity.y, entity.z);
      if (myEntity !== entity) {
        (0, _libLogger2['default'])('World', 'Invalid entity removal attempt. ' + (entity ? entity.name : null) + ' tried to remove ' + (myEntity ? myEntity.name : null));
        return false;
      }
      this.entities[entity.z][entity.x][entity.y] = null;
    }
  }, {
    key: 'getEntity',
    value: function getEntity(x, y, z) {
      return this.getWithoutInits(x, y, z);
    }
  }, {
    key: 'placeEntityAtRandomLocation',
    value: function placeEntityAtRandomLocation(entity) {
      var z = arguments.length <= 1 || arguments[1] === undefined ? entity.z : arguments[1];
      return (function () {
        var tile = (0, _lodash2['default'])(this.tiles[z]).flatten().filter(function (tile) {
          return tile.glyph.key;
        }).reject(function (tile) {
          return tile.isDense();
        }).sample();
        this.moveEntity(entity, tile.x, tile.y, z);
      }).apply(this, arguments);
    }
  }, {
    key: 'getValidEntitiesInRange',
    value: function getValidEntitiesInRange(x, y, z, radius) {
      var filter = arguments.length <= 4 || arguments[4] === undefined ? function () {
        return true;
      } : arguments[4];

      var entities = [];

      var lowerX = Math.max(x - radius, 0);
      var upperX = Math.min(x + radius, this.width);
      var lowerY = Math.max(y - radius, 0);
      var upperY = Math.min(y + radius, this.height);

      for (var newX = lowerX; newX <= upperX; newX++) {
        for (var newY = lowerY; newY <= upperY; newY++) {
          var entity = this.getEntity(newX, newY, z);
          if (!entity) continue;
          entities.push(entity);
        }
      }

      return _lodash2['default'].filter(entities, filter);
    }

    // endregion

    // region Lighting functions
  }, {
    key: 'addLighting',
    value: function addLighting(lightSource) {
      if (!this.lighting[lightSource.z]) this.lighting[lightSource.z] = [];
      this.lighting[lightSource.z].push(lightSource);
    }
  }, {
    key: 'removeLighting',
    value: function removeLighting(lightSource) {
      this.lighting[lightSource.z] = _lodash2['default'].without(this.lighting[lightSource.z], lightSource);
    }

    // endregion

  }, {
    key: 'descend',
    value: function descend() {
      if (!_initGamestate2['default'].winCondition.shouldTrigger()) return;
      _initGamestate2['default'].winCondition.trigger();
    }
  }, {
    key: 'cleanUp',
    value: function cleanUp() {
      _lodash2['default'].each(_lodash2['default'].compact(_lodash2['default'].flattenDeep(this.entities)), function (e) {
        return e.removeSelf() && e.cleanUp();
      });

      for (var z = 0; z < this.tiles.length; z++) {
        for (var x = 0; x < this.tiles[z].length; x++) {
          for (var y = 0; y < this.tiles[z][x].length; y++) {
            this.tiles[z][x][y] = null;
          }
          this.tiles[z][x] = null;
        }
        this.tiles[z] = null;
      }

      this.tiles = null;
      this.stairs = null;
      this.entities = null;
      this.items = null;
      this.fov = null;
      this.lighting = null;
      this.explored = null;
    }
  }]);

  return World;
})();

exports['default'] = World;
module.exports = exports['default'];

},{"../init/gamestate":"/home/seiyria/projects/Roguathia/src/js/rogue/init/gamestate.js","../lib/logger":"/home/seiyria/projects/Roguathia/src/js/rogue/lib/logger.js","./item-generator":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/item-generator.js","./maptypes/dungeon":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/maptypes/dungeon.js","./tiles/_all":"/home/seiyria/projects/Roguathia/src/js/rogue/worldgen/tiles/_all.js","lodash":"/home/seiyria/projects/Roguathia/node_modules/lodash/index.js","rot-js":"/home/seiyria/projects/Roguathia/node_modules/rot-js/lib/rot.js"}]},{},["/home/seiyria/projects/Roguathia/src/js/init.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
